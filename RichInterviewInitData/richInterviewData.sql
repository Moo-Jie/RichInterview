-- MySQL dump 10.13  Distrib 8.0.35, for Win64 (x86_64)
--
-- Host: 127.0.0.1    Database: rich_interview
-- ------------------------------------------------------
-- Server version	8.0.35

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!50503 SET NAMES utf8mb4 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `learnpath`
--

DROP TABLE IF EXISTS `learnpath`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `learnpath` (
  `id` bigint NOT NULL AUTO_INCREMENT COMMENT 'id',
  `title` varchar(256) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT '标题',
  `content` text COLLATE utf8mb4_unicode_ci COMMENT '内容',
  `tags` varchar(1024) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT '标签列表（json 数组）',
  `answer` text COLLATE utf8mb4_unicode_ci COMMENT '推荐答案',
  `userId` bigint NOT NULL COMMENT '创建用户 id',
  `editTime` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '编辑时间',
  `createTime` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `updateTime` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '更新时间',
  `isDelete` tinyint NOT NULL DEFAULT '0' COMMENT '是否删除',
  PRIMARY KEY (`id`),
  KEY `idx_title` (`title`),
  KEY `idx_userId` (`userId`)
) ENGINE=InnoDB AUTO_INCREMENT=1924750005344677891 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci COMMENT='学习路线';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `learnpath`
--

LOCK TABLES `learnpath` WRITE;
/*!40000 ALTER TABLE `learnpath` DISABLE KEYS */;
INSERT INTO `learnpath` VALUES (1923355319811969025,'最新 JAVA 零基础学习路线','# 为您提供 JAVA 零基础学习路线，实现快速入门',NULL,'# Java 零基础学习路线指南（2025年最新版）\n\n## 一、环境搭建与基础认知 \n\n### 1.1 开发环境配置 \n\n### 1.2 计算机基础必修课\n\n- **JDK安装**：从Oracle官网下载JDK17（LTS版本），配置JAVA_HOME环境变量\n- **IDE选择**：推荐IntelliJ IDEA（社区版免费）或Eclipse\n- **第一个程序**：\n\n ```java \npublic class HelloWorld {\n    public static void main(String[] args) {\n        System.out.println(\"Hello  Java!\");\n    }\n}\n ```\n\n| 知识点           | 学习重点                          | 参考资源                     |\n| ---------------- | --------------------------------- | ---------------------------- |\n| 二进制与内存原理 | 原码/反码/补码、堆栈内存模型      | 《计算机组成原理》           |\n| DOS基础命令      | cd、dir、path等操作               | 微软官方文档                 |\n| 编译原理基础     | .java → .class → 机器码的执行过程 | 《深入理解Java虚拟机》第一章 |\n\n------\n\n## 二、Java 核心语法体系（200+学时)\n\n### 2.1 基础语法模块\n\n1. 数据类型：\n\n   - 8种基本类型（int/double/boolean等）\n   - 引用类型（String/数组/自定义类）\n   - 自动装箱与拆箱（Integer ↔ int）\n\n2. 流程控制：\n\n   ```java\n   // 分支结构示例 \n   switch(score/10) {\n       case 10: \n       case 9: grade = \'A\'; break;\n       case 8: grade = \'B\'; break;\n       default: grade = \'C\';\n   }\n   \n   // 循环结构实战 \n   for(int i=0; i<matrix.length;  i++) {\n       for(int j=0; j<matrix[i].length; j++) {\n           sum += matrix[i][j];\n       }\n   }\n   ```\n\n### 2.2 面向对象编程（OOP）深度解析\n\n- 四大特性：\n\n  1. 封装：private字段 + getter/setter\n  2. 继承：extends关键字的类层级设计\n  3. 多态：方法重写 + 父类引用指向子类对象\n  4. 抽象：abstract类与接口设计原则\n\n- 设计模式入门：\n\n  - 单例模式（饿汉式/懒汉式）\n  - 工厂模式（简单工厂/静态工厂）\n  - 示例代码：\n\n  ```java\n  // 单例模式实现\n  public class Singleton {\n      private static Singleton instance = new Singleton();\n      private Singleton() {}\n      public static Singleton getInstance() {\n          return instance;\n      }\n  }\n  ```\n\n------\n\n## 三、Java 进阶技术栈（300+学时）\n\n### 3.1 异常处理机制\n\n| 异常类型                       | 典型场景         | 处理方法              |\n| ------------------------------ | ---------------- | --------------------- |\n| NullPointerException           | 对象未初始化访问 | 判空处理 + Optional类 |\n| ArrayIndexOutOfBoundsException | 数组越界         | 索引范围校验          |\n| IOException                    | 文件读写失败     | try-with-resources    |\n\n### 3.2 集合框架全景解析\n\n```mermaid\ngraph TB \n    Collection-->List \n    List-->ArrayList\n    List-->LinkedList \n    Collection-->Set \n    Set-->HashSet \n    Set-->TreeSet \n    Map-->HashMap\n    Map-->TreeMap\n    Map-->LinkedHashMap\n```\n\n### 3.3 多线程与并发编程\n\n- 基础概念：\n\n  - 进程 vs 线程\n  - synchronized关键字\n  - volatile可见性保证\n\n- 线程池实战：\n\n  ```java\n  ExecutorService pool = Executors.newFixedThreadPool(5); \n  pool.submit(()  -> {\n      System.out.println(Thread.currentThread().getName()); \n  });\n  pool.shutdown(); \n  ```\n\n------\n\n## 四、JavaWeb 开发体系（400+学时）\n\n### 4.1 前端三剑客基础\n\n1. **HTML5**：语义化标签、表单验证\n2. **CSS3**：Flex布局、Grid布局、媒体查询\n3. **JavaScript**：ES6语法、DOM操作、Ajax\n\n### 4.2 服务端技术栈\n\n| 技术组件       | 核心功能         | 学习重点              |\n| -------------- | ---------------- | --------------------- |\n| Servlet        | 请求响应处理     | doGet/doPost方法重写  |\n| Filter         | 请求过滤与预处理 | 编码转换/权限校验     |\n| JSP            | 动态页面渲染     | EL表达式 + JSTL标签库 |\n| Session/Cookie | 会话状态管理     | 用户登录状态保持方案  |\n\n### 4.3 数据库与JDBC\n\n- MySQL进阶：\n\n  - 索引优化（B+树原理）\n  - 事务隔离级别（RU/RC/RR/S）\n  - 执行计划分析（EXPLAIN）\n\n- JDBC模板：\n\n  ```java\n  try(Connection conn = DriverManager.getConnection(url,  user, pass);\n      PreparedStatement ps = conn.prepareStatement(\"SELECT  * FROM users\");\n      ResultSet rs = ps.executeQuery())  {\n      while(rs.next())  {\n          System.out.println(rs.getString(\"username\")); \n      }\n  }\n  ```\n\n------\n\n## 五、主流框架整合（300+学时）\n\n### 5.1 Spring 生态体系\n\n1. **IoC容器**：Bean生命周期管理\n2. **AOP编程**：切入点表达式 + 通知类型\n3. **事务管理**：声明式事务配置\n\n### 5.2 MyBatis 深度整合\n\n- **XML映射**：动态SQL编写\n- **二级缓存**：Ehcache集成\n- **逆向工程**：MBG代码生成\n\n### 5.3 SpringBoot 快速开发\n\n```java\n@SpringBootApplication\npublic class DemoApplication {\n    public static void main(String[] args) {\n        SpringApplication.run(DemoApplication.class,  args);\n    }\n}\n \n@RestController\nclass HelloController {\n    @GetMapping(\"/hello\")\n    public String hello() {\n        return \"Hello SpringBoot!\";\n    }\n}\n```\n\n------\n\n## 六、项目实战阶段（500+学时）\n\n### 6.1 初级项目选题\n\n1. **学生管理系统**：CRUD+分页查询\n2. **电商秒杀系统**：Redis缓存 + 限流策略\n3. **博客平台**：Markdown渲染 + 评论系统\n\n### 6.2 开发工具链\n\n- **Maven**：多模块项目管理\n- **Git**：分支策略（Git Flow）\n- **Docker**：容器化部署\n- **Jenkins**：CI/CD流水线\n\n------\n\n## 七、学习资源推荐 \n\n### 7.1 经典书籍\n\n- 《Java核心技术 卷Ⅰ》 （Cay S. Horstmann）\n- 《Effective Java》 （Joshua Bloch）\n- 《Spring实战》 （Craig Walls）\n\n### 7.2 在线课程\n\n- 网易云课堂《Java工程师进阶之路》\n- Coursera《Object Oriented Programming in Java》\n- B站黑马程序员Java全套教程\n\n### 7.3 实践平台\n\n- LeetCode（算法训练）\n- GitHub（参与开源项目）\n- 阿里云高校计划（免费服务器）\n\n------\n\n> **学习建议**：本路线需持续6-8个月的系统学习，建议每日保持3小时有效学习时间。重点要突破面向对象思想、集合框架原理、并发编程模型三大难点。\n\n\n\n\n\n\n\n',1916407199693844483,'2025-05-16 20:30:17','2025-05-16 20:30:17','2025-05-17 18:32:56',0),(1923361463884320769,'最新 C++ 零基础学习路线','# 为您提供 C++ 零基础学习路线，实现快速入门',NULL,'# C++ 零基础学习路线（2025年最新版）\n\n------\n\n## 目录\n\n1. **学习前准备**\n2. **第一阶段：C语言基础（4-6周）**\n3. **第二阶段：C++核心语法与面向对象（8-10周）**\n4. **第三阶段：C++进阶与标准库（6-8周）**\n5. **第四阶段：数据结构与算法（8-12周）**\n6. **第五阶段：系统级编程与项目实战（12-16周）**\n7. **持续学习与资源推荐**\n\n------\n\n## 一、学习前准备\n\n### 1.1 环境搭建\n\n- 开发工具：\n  - **Visual Studio**（推荐2025社区版）：集成调试、编译、代码分析功能。\n  - **Dev-C++**：轻量级IDE，适合新手快速上手。\n  - **CLion**：专业C++ IDE，适合中后期复杂项目开发。\n- **编译器**：GCC（MinGW）、Clang、MSVC。\n\n### 1.2 学习心态\n\n- **目标明确**：C++适用于游戏引擎、高频交易、操作系统、嵌入式等领域，确定学习方向（如求职、竞赛、兴趣开发）。\n- **实践为王**：每天至少编写50行代码，坚持3个月可突破语法瓶颈。\n\n------\n\n## 二、第一阶段：C语言基础（4-6周）\n\n### 2.1 核心内容\n\n1. **基础语法**：变量、数据类型、运算符、流程控制（if/else、switch、循环）。\n2. **函数与模块化**：函数定义、参数传递、递归。\n3. **指针与内存管理**：指针运算、动态内存分配（malloc/free）。\n4. **复合类型**：数组、结构体、联合体、枚举。\n\n### 2.2 推荐资源\n\n- 书籍：\n  - 《C Primer Plus》（第6版）：适合零基础，案例丰富。\n  - 《C和指针》：深入理解指针与内存机制。\n- 视频教程：\n  - 郝斌C语言教程（B站）：通俗易懂，适合入门。\n  - 浙江大学翁恺C语言（慕课网）：结合理论与实战。\n\n### 2.3 实战练习\n\n- 小项目：\n  - 计算器（支持加减乘除）。\n  - 学生成绩管理系统（文件读写）。\n- 刷题平台：\n  - 洛谷（新手村）、LeetCode（简单题）。\n\n------\n\n## 三、第二阶段：C++核心语法与面向对象（8-10周）\n\n### 3.1 核心内容\n\n1. **C++基础**：命名空间、输入输出流（cin/cout）、引用、函数重载。\n2. **面向对象编程**：类与对象、封装、继承、多态、虚函数。\n3. **运算符重载**：自定义类型运算符行为。\n4. **异常处理**：try-catch机制、异常安全设计。\n\n### 3.2 推荐资源\n\n- 书籍：\n  - 《C++ Primer》（第5版）：语法权威指南，需精读。\n  - 《Effective C++》：55条改善程序的实用条款。\n- 视频教程：\n  - 黑马程序员C++教程（B站）：配套案例代码实操。\n  - 侯捷《C++面向对象高级编程》：深入类与对象设计。\n\n### 3.3 实战练习\n\n- 项目案例：\n  - 银行账户管理系统（模拟存取款、利息计算）。\n  - 简单游戏引擎（实现角色移动、碰撞检测）。\n\n------\n\n## 四、第三阶段：C++进阶与标准库（6-8周）\n\n### 4.1 核心内容\n\n1. **模板编程**：函数模板、类模板、特化与偏特化。\n2. **STL标准库**：容器（vector/list/map）、算法（sort/find）、迭代器。\n3. **智能指针**：unique_ptr、shared_ptr、weak_ptr（避免内存泄漏）。\n4. **C++11/14/17新特性**：auto、lambda、移动语义、并发库。\n\n### 4.2 推荐资源\n\n- 书籍：\n  - 《STL源码剖析》：理解底层实现原理。\n  - 《深入理解C++11》：掌握现代C++特性。\n- 视频教程：\n  - 侯捷《STL标准库与泛型编程》：剖析STL设计思想。\n\n### 4.3 实战练习\n\n- 项目案例：\n  - 实现自定义容器（如动态数组）。\n  - 多线程数据统计工具（使用std::thread）。\n\n------\n\n## 五、第四阶段：数据结构与算法（8-12周）\n\n### 5.1 核心内容\n\n1. **线性结构**：链表、栈、队列、哈希表。\n2. **树与图**：二叉树、AVL树、图的遍历（DFS/BFS）。\n3. **算法思想**：贪心、动态规划、回溯、分治。\n4. **复杂度分析**：时间与空间复杂度计算。\n\n### 5.2 推荐资源\n\n- 书籍：\n  - 《算法导论》：理论深度与实战结合。\n  - 《剑指Offer》：针对面试高频题型。\n- 刷题平台：\n  - LeetCode（中等难度为主）、Codeforces（竞赛向）。\n\n------\n\n## 六、第五阶段：系统级编程与项目实战（12-16周）\n\n### 6.1 核心内容\n\n1. **操作系统**：进程与线程、内存管理、文件系统。\n2. **网络编程**：TCP/IP协议、Socket编程、epoll模型。\n3. **数据库**：SQL基础、MySQL API、Redis缓存。\n4. **项目实战**：从需求分析到代码部署。\n\n### 6.2 推荐项目\n\n- **高并发服务器**：使用libevent或Boost.Asio实现。\n- **简易数据库引擎**：支持SQL解析与事务管理。\n- **2D游戏开发**：基于SFML或Cocos2d-x引擎。\n\n### 6.3 工具与框架\n\n- **调试工具**：GDB、Valgrind（内存泄漏检测）。\n- **构建工具**：CMake、Makefile。\n- **第三方库**：Boost（智能指针、协程）、OpenCV（图像处理）。\n\n------\n\n## 七、持续学习与资源推荐\n\n### 7.1 进阶方向\n\n- **图形学**：OpenGL/DirectX编程。\n- **嵌入式开发**：RTOS、ARM架构优化。\n- **机器学习**：TensorFlow C++ API。\n\n### 7.2 社区与资源\n\n- 网站：\n  - GitHub：参与开源项目（如Chromium、LLVM）。\n  - Stack Overflow：解决编码难题。\n- 书籍：\n  - 《深度探索C++对象模型》：理解虚函数表、多重继承。\n  - 《C++ Templates全览》：模板元编程进阶。\n\n\n\n\n\n\n',1916407199693844483,'2025-05-16 20:54:41','2025-05-16 20:54:41','2025-05-17 18:33:06',0),(1923361509891641345,'最新 Python 零基础学习路线','# 为您提供 Python 零基础学习路线，实现快速入门',NULL,'# Python 零基础学习路线（2025年最新版）\n\n------\n\n## 目录\n\n1. **学习前准备**\n2. **第一阶段：Python基础语法与编程思维（4-6周）**\n3. **第二阶段：Web开发与全栈实践（8-10周）**\n4. **第三阶段：数据分析与可视化（6-8周）**\n5. **第四阶段：人工智能与机器学习（8-12周）**\n6. **第五阶段：自动化运维与项目实战（12-16周）**\n7. **持续学习与进阶方向**\n\n------\n\n## 一、学习前准备\n\n### 1.1 环境搭建\n\n- Python安装：\n  - 官网下载Python 3.12+版本（推荐使用Anaconda集成环境，内置Jupyter Notebook和常用库）。\n  - 验证安装：命令行输入 `python --version` 查看版本。\n- 开发工具：\n  - **PyCharm**：专业级IDE，适合中大型项目开发。\n  - **VS Code**：轻量级编辑器，搭配Python插件（如Pylance、Jupyter）提升效率。\n  - **Jupyter Notebook**：交互式编程环境，适合数据分析与可视化。\n\n### 1.2 学习心态\n\n- **目标明确**：Python适用于Web开发、数据分析、人工智能、自动化运维等领域，明确学习方向（如求职、兴趣开发）。\n- **每日实践**：坚持每天编写至少50行代码，通过小项目巩固知识点。\n\n------\n\n## 二、第一阶段：Python基础语法与编程思维（4-6周）\n\n### 2.1 核心内容\n\n1. **基础语法**：变量、数据类型（整数、浮点数、字符串、布尔值）、运算符、流程控制（if/else、循环）。\n2. **数据结构**：列表、元组、字典、集合的操作与常用方法。\n3. **函数与模块**：函数定义、参数传递、lambda表达式、模块导入与创建。\n4. **文件操作**：读写文本/CSV文件、异常处理（try-except）。\n\n### 2.2 推荐资源\n\n- 书籍：\n  - 《Python编程：从入门到实践》（第3版）：案例驱动，适合零基础。\n  - 《Python Crash Course》：快速掌握核心语法。\n- 视频教程：\n  - B站黑马程序员Python教程：手把手代码实操。\n  - 廖雪峰Python教程：系统化理论讲解。\n\n### 2.3 实战练习\n\n- 小项目：\n  - 简易计算器（支持加减乘除和异常处理）。\n  - 学生成绩管理系统（命令行交互，数据存储到文件）。\n- 刷题平台：\n  - LeetCode（简单题，如两数之和、反转字符串）。\n  - 牛客网（Python基础题库）。\n\n------\n\n## 三、第二阶段：Web开发与全栈实践（8-10周）\n\n### 3.1 核心内容\n\n1. **前端基础**：HTML/CSS布局、JavaScript基础、DOM操作。\n2. **后端框架**：\n\n- **Flask**：路由、模板渲染、表单处理、数据库集成（SQLAlchemy）。\n- **Django**：MTV设计模式、ORM、Admin后台、RESTful API开发。\n\n1. **数据库**：SQL基础、MySQL/PostgreSQL操作、Redis缓存。\n\n### 3.2 推荐资源\n\n- 书籍：\n  - 《Flask Web开发实战》：从零搭建博客系统。\n  - 《Django企业开发实战》：结合企业级项目案例。\n- 实战项目：\n  - 个人博客系统（支持文章发布、评论功能）。\n  - 电商平台后端（用户认证、商品管理、订单系统）。\n\n------\n\n## 四、第三阶段：数据分析与可视化（6-8周）\n\n### 4.1 核心内容\n\n1. **数据分析库**：NumPy（数组运算）、Pandas（数据清洗、聚合）。\n2. **数据可视化**：Matplotlib（基础图表）、Seaborn（统计图表）、Plotly（交互式可视化）。\n3. **爬虫技术**：Requests库（HTTP请求）、BeautifulSoup/Scrapy（网页解析）。\n\n### 4.2 推荐资源\n\n- 书籍：\n  - 《利用Python进行数据分析》（第2版）：Pandas权威指南。\n  - 《Python网络爬虫权威指南》：Scrapy框架深度解析。\n- 实战项目：\n  - 对专用于爬取练习的网站，进行合法地数据爬取与分析练习。\n  - 新冠疫情数据可视化（动态地图、趋势预测）。\n\n------\n\n## 五、第四阶段：人工智能与机器学习（8-12周）\n\n### 5.1 核心内容\n\n1. **机器学习基础**：监督学习（线性回归、决策树）、无监督学习（聚类、降维）。\n2. **深度学习框架**：TensorFlow/Keras（图像分类）、PyTorch（自然语言处理）。\n3. **模型部署**：Flask API封装、ONNX模型导出。\n\n### 5.2 推荐资源\n\n- 书籍：\n  - 《机器学习实战：基于Scikit-Learn和TensorFlow》。\n  - 《深度学习入门：基于Python的理论与实现》。\n- 实战项目：\n  - 手写数字识别（MNIST数据集）。\n  - 情感分析模型（基于IMDB影评数据）。\n\n------\n\n## 五、第五阶段：自动化运维与项目实战（12-16周）\n\n### 6.1 核心内容\n\n1. **自动化运维**：Shell脚本编写、Ansible自动化部署、Docker容器化。\n2. **系统监控**：Prometheus + Grafana（性能指标可视化）。\n3. **项目实战**：\n\n- 高并发Web服务器（Nginx + Gunicorn + Django）。\n- 自动化测试框架（Selenium + Pytest）。\n\n### 6.2 工具与框架\n\n- **版本控制**：Git代码管理、GitHub/GitLab协作开发。\n- **CI/CD**：Jenkins持续集成、GitHub Actions自动化流水线。\n\n------\n\n## 七、持续学习与进阶方向\n\n### 7.1 进阶方向\n\n- **大数据处理**：PySpark分布式计算、Hadoop生态集成。\n- **量化金融**：Backtrader回测框架、股票数据分析。\n- **区块链开发**：智能合约（Solidity）、以太坊DApp开发。\n\n### 7.2 社区与资源\n\n- 网站\n\n  ：\n\n  - Kaggle：参与数据科学竞赛。\n  - Stack Overflow：解决技术难题。\n\n- 书籍\n\n  ：\n\n  - 《流畅的Python》：掌握Python高级特性。\n  - 《设计模式：可复用面向对象软件的基础》。\n\n\n\n\n\n\n',1916407199693844483,'2025-05-16 20:54:52','2025-05-16 20:54:52','2025-05-17 18:33:15',0),(1923361575977095169,'（未发布）最新 Go 零基础学习路线','# 为您提供 Go 零基础学习路线，实现快速入门',NULL,'（未发布）',1916407199693844483,'2025-05-16 20:55:08','2025-05-16 20:55:08','2025-05-17 17:23:57',0),(1924745290783404034,'最新人工智能零基础学习路线','# 为您提供 人工智能 零基础学习路线，实现快速入门',NULL,NULL,1916407199693844483,'2025-05-20 16:33:32','2025-05-20 16:33:32','2025-05-20 16:38:50',1),(1924748634461581314,'最新 人工智能零基础学习路线','# 为您提供 人工智能 零基础学习路线，实现快速入门',NULL,'# 人工智能系统化学习路线（2025年最新版）\n\n\n\n## 一、基础准备阶段\n\n### 1.1 数学基础搭建 \n\n人工智能的数学基础包含三大核心领域：\n\n1. **线性代数**  \n   - 重点掌握：矩阵运算、特征值与特征向量、奇异值分解（SVD）  \n   - 学习建议：结合图像处理中的卷积运算理解矩阵变换\n\n2. **微积分与优化理论**  \n   - 核心内容：导数与梯度概念、多元函数极值、拉格朗日乘数法  \n   - 实践应用：梯度下降法在神经网络中的应用场景\n\n3. **概率论与统计学**  \n   - 关键知识点：贝叶斯定理、高斯分布、假设检验  \n   - 典型应用：朴素贝叶斯分类器的数学推导\n\n### 1.2 编程能力培养 \n\n1. **Python语言核心**  \n   - 基础语法：列表推导式、生成器、装饰器  \n   - 科学计算库：Numpy（矩阵运算）、Pandas（数据处理）  \n   - 推荐教材：《流畅的Python》+《利用Python进行数据分析》\n\n2. **Linux系统与开发环境**  \n   - 必会技能：Shell脚本编写、Docker容器部署  \n   - 工具链配置：Anaconda环境管理、Jupyter Notebook调试 \n\n\n\n## 二、机器学习核心技术\n\n### 2.1 算法体系构建 \n\n| 算法类型   | 核心算法                | 应用场景           |\n| ---------- | ----------------------- | ------------------ |\n| 监督学习   | 线性回归、SVM、随机森林 | 房价预测、信用评分 |\n| 无监督学习 | K-Means、PCA、DBSCAN    | 客户分群、数据降维 |\n| 半监督学习 | 标签传播算法            | 医学影像标注       |\n\n### 2.2 特征工程方法论 \n\n1. **数据预处理流程**  \n   - 缺失值处理：多重插补法（MICE）  \n   - 特征编码：WOE编码在金融风控中的应用[6]()\n\n2. **特征选择技术**  \n   - 过滤法：卡方检验、互信息法  \n   - 嵌入法：L1正则化（LASSO）\n\n### 2.3 模型调优策略 \n\n- **交叉验证**：K折交叉验证的偏差-方差平衡 \n- **超参数优化**：贝叶斯优化 vs 网格搜索对比 \n- 实践项目：Kaggle泰坦尼克生存预测竞赛（TOP10%解决方案分析）\n\n\n\n\n\n## 三、深度学习进阶体系\n\n### 3.1 神经网络架构演进 \n\n```mermaid \ngraph LR \nA[感知机] --> B[BP神经网络]\nB --> C[CNN]\nB --> D[RNN]\nC --> E[ResNet]\nD --> F[Transformer]\n```\n\n### 3.2 主流框架对比\n\n| 框架         | 优势领域               | 学习曲线 |\n| ------------ | ---------------------- | -------- |\n| TensorFlow   | 工业级部署、移动端优化 | 陡峭     |\n| PyTorch      | 动态计算图、研究首选   | 平缓     |\n| PaddlePaddle | 中文生态、产业实践     | 中等     |\n\n### 3.3 核心技术突破点\n\n1. 计算机视觉\n   - YOLO系列目标检测模型演进（v1-v8对比）\n   - 医疗影像分割中的U-Net变体研究[3](https://blog.csdn.net/qq_41293655/article/details/109673596)\n2. 自然语言处理\n   - BERT的预训练与微调技巧\n   - 大模型微调实战：LoRA+QLoRA技术解析\n\n\n\n\n\n## 四、行业应用与前沿探索\n\n### 4.1 垂直领域解决方案\n\n1. 金融科技\n   - 高频交易预测：LSTM+Attention时序模型\n   - 反欺诈系统：图神经网络（GNN）应用\n2. 智能制造\n   - 工业缺陷检测：MMDetection框架实践\n   - 预测性维护：PHM（故障预测与健康管理）系统搭建\n\n### 4.2 大模型技术生态\n\n1. 训练方法论\n   - 分布式训练：ZeRO-3优化策略\n   - 混合精度训练：FP16与BF16对比\n2. 推理加速技术\n   - 模型量化：QAT vs PTQ选择策略\n   - 服务化部署：Triton Inference Server\n\n\n\n\n\n## 五、持续学习与资源体系\n\n### 5.1 学习路径规划\n\n1. **月度学习计划**\n\n   ```\n   markdown复制- 第1-2月：夯实数学基础+Python编程 \n   - 第3-4月：机器学习算法+Kaggle实战 \n   - 第5-6月：深度学习框架+论文复现 \n   ```\n\n2. **知识管理方法**\n\n   - 构建个人知识库（Obsidian/Notion）\n   - 论文精读模板：Abstract→Method→Experiment\n\n### 5.2 优质资源推荐\n\n- **视频课程**：李沐《动手学深度学习》（B站）\n- **书籍体系**：《深度学习》《Hands-On ML》\n- 竞赛平台：Kaggle、天池、讯飞开发者大赛\n\n> 提示：本路线已综合36个技术模块与120+实践案例，建议每周保持15小时有效学习时间。遇到技术瓶颈时，可通过AI框架官方文档（如PyTorch Tutorials）进行查漏补缺。',1916407199693844483,'2025-05-20 16:46:49','2025-05-20 16:46:49','2025-05-20 16:49:39',0),(1924750005344677890,'最新 C++ Qt零基础学习路线','# 为您提供 C++ Qt 零基础学习路线，实现快速入门',NULL,'# C++/Qt 渐进式学习路线（2025年最新版）\n\n## 一、基础奠基阶段（200小时）\n\n### 1. C++核心语法强化（80小时）\n\n- **面向过程编程**（20小时）\n  - 掌握基本数据类型与运算符优先级 \n  - 熟练流程控制结构（条件分支/循环结构）\n  - 理解函数传参机制（值传递/引用传递）\n  - 内存对齐原理与结构体应用场景 \n\n- **面向对象编程**（40小时）\n  - 类与对象的关系解析 \n  - 封装原理与访问控制策略 \n  - 继承体系的三大类型（公有/保护/私有）\n  - 多态的实现路径（虚函数表原理）\n  - 模板编程基础（函数模板/类模板）\n\n- **STL与设计模式**（20小时）\n  - 容器深度对比（vector/list/map特性和性能差异）\n  - 迭代器的失效场景与解决方案 \n  - 常用算法实践（sort/find/transform）\n  - 单例模式在资源管理中的应用 \n  - 观察者模式与Qt信号槽的关联性 \n\n### 2. Qt开发环境构建\n\n- **工具链配置**（5小时）\n\n  - Qt 6.5 LTS版本完整安装指南 \n  - MSVC/MinGW编译器选择策略\n  - 配置高可用开发环境（CMake/QMake对比）\n  - 调试技巧（内存泄漏检测/性能分析器）\n\n- **首个Qt程序**（10小时）\n\n  ```cpp\n  #include <QApplication>\n  #include <QLabel>\n  \n  int main(int argc, char *argv[]) {\n      QApplication app(argc, argv);\n      QLabel *label = new QLabel(\"Hello Qt6!\");\n      label->setWindowTitle(\"First App\");\n      label->resize(400, 300);\n      label->show();\n      return app.exec(); \n  }\n  ```\n\n- 解析QObject继承体系\n- 认识元对象系统（MOC工作机制）\n- 内存管理机制（父子对象树原理）\n\n### 3. GUI编程基础\n\n- 控件体系精讲\n\n  （40小时）\n\n  - 窗口类控件（QMainWindow/QDialog差异）\n  - 基础控件（QPushButton/QLineEdit/QCheckBox）\n  - 容器控件（QTabWidget/QScrollArea）\n  - 高级控件（QTableView/QTreeWidget）\n\n- 布局管理系统\n\n  （30小时）\n\n  - 基础布局（QHBoxLayout/QVBoxLayout）\n  - 栅格布局（QGridLayout复杂场景应用）\n  - 表单布局（QFormLayout自动对齐机制）\n  - 自定义布局策略（实现瀑布流布局）\n\n- 事件处理机制\n\n  （30小时）\n\n  - 事件循环原理（exec()底层实现）\n  - 常见事件类型（鼠标/键盘/绘图事件）\n  - 事件过滤器的高级应用\n  - 自定义事件设计与派发\n\n------\n\n## 二、进阶提升阶段（300小时）\n\n### 1. 核心机制深化\n\n- 信号与槽系统\n\n  （50小时）\n\n  - 连接方式对比（自动/队列/阻塞连接）\n  - 元类型系统注册（qRegisterMetaType）\n  - 信号重载解决方案（函数指针语法）\n  - 跨线程通信的最佳实践\n\n- 绘图系统\n\n  （60小时）\n\n  - QPainter绘图管线解析\n  - 矢量图形绘制（路径/QPainterPath）\n  - 双缓冲绘图技术（避免闪烁）\n  - 自定义仪表盘控件开发案例\n\n- 模型视图框架\n\n  （40小时）\n\n  - Model/View架构解耦原理\n  - 标准模型（QStandardItemModel）\n  - 自定义代理（进度条/颜色选择）\n  - 大数据量优化（分页加载策略）\n\n### 2. 跨平台能力建设（80小时）\n\n- 文件系统\n\n  （20小时）\n\n  - 路径处理（QDir/QFileInfo）\n  - 文件监控（QFileSystemWatcher）\n  - 序列化技术（JSON/XML二进制格式对比）\n\n- 数据库编程\n\n  （30小时）\n\n  - SQLite嵌入式开发实战\n  - 连接池管理（QSqlDatabase复用）\n  - 事务处理与异常回滚机制\n  - 模型视图联动（QSqlQueryModel）\n\n- 网络通信\n\n  （30小时）\n\n  - HTTP协议栈（QNetworkAccessManager）\n  - WebSocket实时通信实现\n  - TCP/UDP协议差异与选型\n  - 自定义协议设计（数据封包/拆包）\n\n### 3. 高级特性探索（70小时）\n\n- 多线程编程\n\n  （40小时）\n\n  - QThread生命周期管理\n  - 线程池（QThreadPool配置优化）\n  - 无锁队列（QAtomicPointer应用）\n  - 生产者-消费者模式实践\n\n- 国际化支持\n\n  （15小时）\n\n  - 多语言切换（QM文件生成流程）\n  - 本地化格式处理（日期/货币）\n  - 动态语言加载机制\n\n- 插件架构\n\n  （15小时）\n\n  - 插件接口设计规范\n  - 动态加载机制（QLibrary）\n  - 热插拔功能实现方案\n\n------\n\n## 三、专业深化阶段（400小时）\n\n### 1. QML现代开发（150小时）\n\n- 基础语法\n\n  （30小时）\n\n  - QML对象树结构\n  - 属性绑定原理\n  - 组件化开发规范\n  - 状态机与过渡动画\n\n- QtQuick控件\n\n  （50小时）\n\n  - 布局系统（Row/Grid/Stack）\n  - 图形效果（阴影/模糊/渐变）\n  - Canvas元素绘制复杂图形\n  - OpenGL集成（Shader特效）\n\n- C++与QML交互\n\n  （70小时）\n\n  - 上下文属性注入\n  - 自定义QML类型注册\n  - 信号跨语言传递\n  - 混合编程性能优化\n\n### 2. 工业级开发（150小时）\n\n- 架构设计\n\n  （50小时）\n\n  - 模块化设计原则\n  - 依赖注入实现解耦\n  - 日志系统（分类/分级/滚动）\n  - 配置管理系统设计\n\n- 测试体系\n\n  （40小时）\n\n  - 单元测试框架（QTestLib）\n  - 自动化UI测试（Squish）\n  - 内存泄漏检测（Valgrind）\n  - 性能分析（QML Profiler）\n\n- 部署发布\n\n  （60小时）\n\n  - 静态编译技术\n  - 安装包制作（NSIS/Inno Setup）\n  - 自动更新机制实现\n  - 崩溃报告收集系统\n\n### 3. 前沿技术整合（100小时）\n\n- 三维可视化\n\n  （40小时）\n\n  - Qt3D模块架构解析\n  - 三维模型导入与渲染\n  - 粒子系统特效实现\n  - AR/VR设备集成方案\n\n- 物联网开发\n\n  （30小时）\n\n  - Modbus协议栈集成\n  - OPC UA通信实现\n  - MQTT消息中间件应用\n  - 工业协议解析库开发\n\n- 人工智能集成\n\n  （30小时）\n\n  - OpenCV图像处理集成\n  - PyTorch模型推理加速\n  - ONNX运行时环境搭建\n  - 多模态交互设计\n\n------\n\n## 四、实战项目阶段（自驱动）\n\n### 1. 初级项目选题\n\n- 企业办公工具\n\n  （120小时）\n\n  - 多Tab文本编辑器\n  - 会议室预约系统\n  - 即时通讯客户端\n\n### 2. 中级项目选题\n\n- 工业控制软件\n\n  （200小时）\n\n  - 数据采集监控系统\n  - 智能仓储管理系统\n  - 能耗监测分析平台\n\n### 3. 高级项目选题\n\n- 跨领域解决方案\n\n  （300小时+）\n\n  - 自动驾驶仿真平台\n  - 医疗影像处理系统\n  - 数字孪生工厂平台\n\n------\n\n## 五、持续成长路径\n\n### 1. 知识体系更新\n\n- 每季度研究Qt官方Release Notes\n- 关注Qt年度开发者大会技术动向\n- 参与Qt RFC提案讨论\n\n### 2. 开源社区参与\n\n- 贡献Qt官方Bug修复\n- 维护Qt中文技术文档\n- 开发Qt扩展插件库\n\n### 3. 职业发展建议\n\n- 深耕工业自动化/汽车电子领域\n- 向架构师/技术专家方向发展\n- 构建个人技术品牌（博客/开源项目）\n\n------\n\n> 本路线综合Qt官方文档、CSDN技术社区、知乎开发者经验等资源，建议配合《Qt6C++开发指南》《精通Qt4编程》等经典著作系统学习。每个阶段需完成至少3个实践项目，建议代码量达到2万行以上形成肌肉记忆。',1916407199693844483,'2025-05-20 16:52:16','2025-05-20 16:52:16','2025-05-20 16:53:04',0);
/*!40000 ALTER TABLE `learnpath` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `question`
--

DROP TABLE IF EXISTS `question`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `question` (
  `id` bigint NOT NULL AUTO_INCREMENT COMMENT 'id',
  `title` varchar(256) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT '标题',
  `content` text CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci COMMENT '内容',
  `tags` varchar(1024) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT '标签列表（json 数组）',
  `answer` text CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci COMMENT '推荐答案',
  `userId` bigint NOT NULL COMMENT '创建用户 id',
  `editTime` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '编辑时间',
  `createTime` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `updateTime` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '更新时间',
  `isDelete` tinyint NOT NULL DEFAULT '0' COMMENT '是否删除',
  `reviewStatus` int NOT NULL DEFAULT '0' COMMENT '状态：0-待审核, 1-通过, 2-拒绝',
  `reviewMessage` varchar(512) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT '审核信息',
  `reviewerId` bigint DEFAULT NULL COMMENT '审核人 id',
  `reviewTime` datetime DEFAULT NULL COMMENT '审核时间',
  `viewNum` int NOT NULL DEFAULT '0' COMMENT '浏览量',
  `thumbNum` int NOT NULL DEFAULT '0' COMMENT '点赞数',
  `favourNum` int NOT NULL DEFAULT '0' COMMENT '收藏数',
  `priority` int NOT NULL DEFAULT '0' COMMENT '优先级',
  `source` varchar(512) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT '题目来源',
  `needVip` tinyint NOT NULL DEFAULT '0' COMMENT '仅会员可见（1 表示仅会员可见）',
  PRIMARY KEY (`id`),
  KEY `idx_title` (`title`),
  KEY `idx_userId` (`userId`)
) ENGINE=InnoDB AUTO_INCREMENT=1916749255532466179 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci COMMENT='题目';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `question`
--

LOCK TABLES `question` WRITE;
/*!40000 ALTER TABLE `question` DISABLE KEYS */;
INSERT INTO `question` VALUES (1916348763044098049,'请你简单介绍一下HTML语言','### 请你简单介绍一下HTML语言的基本概念 、特性 。','[\"简单\",\"HTML\",\"HTML特性\",\"HTML发展\"]','# HTML 语言简介\n\n## 一、什么是 HTML\n\nHTML（Hyper - Text Markup Language），即超文本标记语言，是一种用于创建网页的标准标记语言。它并非一种编程语言，而是一种标记语言，用于定义网页内容的结构和呈现方式，通过在普通文本中添加各种标记标签来指示文本应该以何种方式显示。\n\n## 二、HTML 的基本结构\n\n一个最简单的 HTML 文档结构如下：\n\n\n\n复制\n\n```\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset = \"UTF - 8\">\n    <title>页面标题</title>\n</head>\n<body>\n    <!-- 页面主体内容 -->\n</body>\n</html>\n```\n\n- `<!DOCTYPE html>` ：文档声明，用来告诉浏览器这个文档使用的是 HTML5 标准。\n- `<html>` ：根元素，它是 HTML 文档的最外层元素，所有其他 HTML 元素都必须包含在这个元素之内。\n- `<head>` ：头部元素，包含了文档的元数据，如字符编码设置（`<meta charset = \"UTF - 8\">`）、页面标题（`<title>`）等，这些信息不会在网页正文中显示。\n- `<body>` ：主体元素，网页上可见的内容，如文本、图像、链接、表格、列表等都放置在这个元素内。\n\n## 三、常见的 HTML 标签\n\n1. **文本标签**\n   - `<h1>` 到 `<h6>` ：标题标签，用于定义不同级别的标题，`<h1>` 字体最大，`<h6>` 字体最小。\n   - `<p>` ：段落标签，用于定义一段文本内容。\n   - `<br>` ：换行标签，用于强制文本换行。\n   - `<strong>` ：加粗标签，使文本以加粗形式显示。\n   - `<em>` ：斜体标签，使文本以斜体形式显示。\n2. **链接标签**\n   - `<a>` ：超链接标签，用于创建从一个页面到另一个页面或页面内不同位置的链接。其语法为 `<a href = \"链接地址\">链接显示文本</a>`，`href` 属性指定了链接的目标 URL。\n3. **图像标签**\n   - `<img>` ：图像标签，用于在网页中插入图像。其主要属性有 `src`（指定图像文件的路径或 URL）、`alt`（为图像提供替代文本，当图像无法显示时，浏览器会显示这个替代文本）。\n4. **列表标签**\n   - `<ul>` ：无序列表标签，列表项前会自动添加圆点或其他装饰符号。\n   - `<ol>` ：有序列表标签，列表项前会自动添加编号。\n   - `<li>` ：列表项标签，用于定义列表中的一个项目，在 `<ul>` 或 `<ol>` 中使用。\n5. **表格标签**\n   - `<table>` ：表格标签，用于创建表格。\n   - `<tr>` ：表格行标签，定义表格中的一行。\n   - `<td>` ：表格单元格标签，定义表格中的一个单元格，用于放置数据。\n   - `<th>` ：表头单元格标签，通常用于定义表格的表头部分，其内容会以加粗居中的方式显示。\n\n## 四、HTML 的特点\n\n1. **简单易学** ：HTML 语法相对简单，容易上手，对于初学者来说，通过学习基础的标签和属性，就可以快速创建出简单的网页。\n2. **跨平台** ：HTML 是一种跨平台的语言，可以在各种操作系统和设备上运行，如 Windows、Mac、Linux、移动设备等，只要安装了浏览器，就可以查看 HTML 页面。\n3. **与 CSS 和 JavaScript 配合良好** ：HTML 可以与 CSS（层叠样式表）结合，用于控制网页的样式和布局，使页面更加美观；同时，也可以与 JavaScript 脚本语言配合，为网页添加交互功能，如表单验证、动态效果等。\n\n## 五、HTML 的发展\n\nHTML 自诞生以来，经历了多个版本的更新和演变。HTML5 是目前最新的版本，它在前一版本的基础上进行了大量的改进和扩展，引入了许多新的特性，如新的语义化标签（如 `<header>`、`<nav>`、`<footer>`、`<section>`、`<article>` 等，使网页结构更加清晰）、音频和视频标签（`<audio>` 和 `<video>`，用于直接在网页中播放多媒体文件）、画布标签（`<canvas>`，用于绘制图形和图像）等，为开发者提供了更强大的功能和更丰富的用户体验。\n\n总之，HTML 作为网页开发的基础语言，为互联网的发展和信息的传播提供了重要的支持，通过学习和掌握 HTML，可以为深入学习网页前端开发打下坚实的基础。',1916407199693844483,'2025-04-27 12:28:43','2025-04-27 12:28:43','2025-05-17 17:48:27',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916349763737923586,'阐述什么是HTML语法中的属性','### 请你阐述什么是HTML语法中的属性','[\"简单\",\"HTML属性\",\"HTML语法\",\"HTML特性\"]','# HTML 语法中的属性\n\n在 HTML 语法中，属性是 HTML 元素的重要组成部分，它为元素提供了附加信息，用于定义元素的行为、样式、内容或其他特性。\n\n属性通常出现在 HTML 标签的开始标签中，紧跟在元素名称后面，以 name=\"value\" 的形式写在标签内。其中，name 是属性的名称，用于标识这个属性所代表的特定功能或特性；value 是属性的值，它为这个属性提供了具体的设置或参数，通常用引号（可以是单引号或双引号）将值括起来。例如，在 `<img src=\"image.jpg\" alt=\"描述文字\">` 中，“src” 是属性名称，表示图像文件的路径或 URL，“image.jpg” 是该属性的值，告诉浏览器要加载哪个图像文件；“alt” 属性用于为图像提供替代文本，“描述文字” 是它的值，在图像无法显示时，浏览器会呈现这个替代文本。\n\n属性种类繁多，根据其功能可以分为以下几类：\n\n- **内容属性** ：如前文提到的 `<img>` 标签的 `src` 和 `alt` 属性，它们直接关系到元素所要展示或引用的内容，还有 `<a>` 标签的 `href` 属性，指定了超链接的目标 URL，决定了链接指向的页面或资源位置。\n- **行为属性** ：这类属性影响元素的交互行为。例如，`<input>` 标签的 `type` 属性，它可以取多种值，像 “text” 表示文本输入框、“submit” 表示提交按钮、“checkbox” 表示复选框等，不同的值决定了输入框的类型和行为表现；还有 `<button>` 标签的 `onclick` 属性，用于指定当按钮被点击时要执行的 JavaScript 代码，从而实现交互功能。\n- **样式属性** ：直接与元素的外观样式相关，比如 `<font>` 标签（虽然在现代 HTML5 中不推荐使用）的 `color` 属性可以设置文本颜色，`face` 属性可以指定文本的字体样式。不过，在实际网页开发中，我们更倾向于使用 CSS（层叠样式表）来控制样式，但在某些情况下，HTML 标签的样式属性也能起到快速简单的样式定义作用，如 `<div>` 标签的 `style` 属性，可以直接在 HTML 中定义 CSS 样式规则来改变元素的宽、高、背景颜色等外观特性。\n- **关联属性** ：用于建立元素之间的关联或引用关系。例如，`<label>` 标签的 `for` 属性，它与 `<input>` 标签的 `id` 属性相配合，当用户点击 `<label>` 时，与之关联的 `<input>` 元素会自动获得焦点，这增强了表单元素的可用性和交互性。\n\n在使用属性时，有以下一些规则和注意事项：\n\n- 属性值对于 HTML 元素来说是可选的，但有些属性必须带有值才能正常发挥作用。例如，`<input>` 标签的 `required` 属性，它本身就是一个布尔属性，可以只写属性名而不赋值（但在实际书写时，为了兼容性，通常会写成 `required=\"required\"` 的形式），用于指定该输入框是必填项，在表单提交时会对这个输入框的内容进行验证。\n- 多个属性在标签中可以按任意顺序排列，只要它们之间用空格分隔开即可。例如，`<input type=\"text\" id=\"nameInput\" name=\"username\">`，这里的 `type`、`id` 和 `name` 属性顺序可以调换，不会影响元素的功能。\n- 属性值中如果包含空格、引号等特殊字符，需要用特殊的方式来处理。推荐的做法是使用单引号或双引号将属性值完整地括起来，避免因特殊字符导致的解析错误。例如，如果一个属性值中包含双引号，那么可以将该属性用单引号包围，如 `value=\'He said \"Hello\"\'>`。\n\n总之，HTML 属性是丰富 HTML 元素功能和特性的重要工具，通过合理地使用各种属性，开发者可以精确地控制网页元素的行为、样式和内容展示方式，从而构建出功能多样、美观实用的网页界面。',1916407199693844483,'2025-04-27 12:32:42','2025-04-27 12:32:42','2025-05-17 17:48:28',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916350704595808257,'HTML中文本格式化的细节和进阶操作','### 请你阐述HTML中文本格式化的细节和进阶操作','[\"简单\",\"HTML特性\",\"HTML语法\",\"HTML文本格式化\",\"格式化\",\"文本操作\"]','# HTML 中文本格式化细节与进阶操作\n\n## 一、HTML 基本文本格式化标签\n\nHTML 提供了一系列基本的文本格式化标签，用于快速改变文本的显示样式。\n\n### （一）字体样式标签\n\n  * **加粗文本**\n    * 使用 `<strong>` 标签或 `<b>` 标签。`<strong>` 标签表示强调重要的文本内容，对屏幕阅读器等辅助设备有语义意义；`<b>` 标签则仅仅是从视觉上使文本加粗，没有强调的语义。例如：\n\n```html\n<strong>这是一个强调的重要文本</strong>\n<b>这是一个加粗文本</b>\n```\n\n  * **斜体文本**\n    * 可以使用 `<em>` 标签或 `<i>` 标签。`<em>` 标签用于表示强调的文本，在语义上表示文本有重音或强调的语气；`<i>` 标签只是单纯地将文本以斜体形式显示。例如：\n\n```html\n<em>这是一段带有强调语气的文本</em>\n<i>这是一段斜体文本</i>\n```\n\n  * **下划线文本**\n    * 使用 `<u>` 标签来为文本添加下划线。例如：\n\n```html\n<u>这是一段带有下划线的文本</u>\n```\n\n  * **删除线文本**\n    * 使用 `<s>` 标签或 `<del>` 标签。`<s>` 标签表示文本是不再准确或不再相关的内容；`<del>` 标签表示文档中被删除的内容。例如：\n\n```html\n<s>这是一段不再准确的文本</s>\n<del>这是一段被删除的文本</del>\n```\n\n  * **上标和下标文本**\n    * 使用 `<sup>` 标签用于创建上标文本，如数学公式中的指数；`<sub>` 标签用于创建下标文本，如化学式中的原子个数。例如：\n\n```html\n水的化学式：H<sub>2</sub>O\n数学公式：x<sup>2</sup> + y<sup>2</sup> = z<sup>2</sup>\n```\n\n### （二）段落和换行标签\n\n  * **段落标签 `<p>`**\n    * 它用于定义文档中的一个段落，在段落文本之间会自动添加一定的间距，默认情况下段落中的文本会根据容器宽度自动换行。例如：\n\n```html\n<p>这是一个段落，段落中的文本是连续的，当文本到达容器边缘时会自动换行。</p>\n```\n\n  * **换行标签 `<br>`**\n    * 用于强制文本换行，常用于诗歌、地址等需要精确控制换行的位置的文本内容。例如：\n\n```html\n地址：北京市海淀区XX街道XX号<br>\n邮编：100000\n```\n\n  * **水平线标签 `<hr>`**\n    * 用于在文档中创建一条水平线，起到分隔内容的作用。可以通过其属性（如 `size` 设置线条高度、`color` 设置线条颜色、`width` 设置线条宽度等）来自定义水平线的样式。例如：\n\n```html\n<hr size=\"3\" color=\"red\" width=\"50%\">\n```\n\n## 二、HTML 文本格式化的进阶操作\n\n### （一）使用 CSS 样式进行文本格式化\n\nCSS（层叠样式表）提供了更强大的文本格式化功能，通过将 CSS 样式应用到 HTML 元素上，可以精确地控制文本的外观。\n\n  * **字体样式设置**\n    * 可以设置字体族（`font - family`）、字体大小（`font - size`）、字体粗细（`font - weight`）、字体样式（`font - style`）等属性。例如：\n\n```html\n<p style=\"font-family: \'Arial\', sans - serif; font-size: 16px; font-weight: bold; font-style: italic;\">\n    这段文本设置了字体族为 Arial，字体大小为 16 像素，字体加粗且为斜体。\n</p>\n```\n\n  * **文本颜色和背景颜色设置**\n    * 使用 `color` 属性设置文本颜色，`background - color` 属性设置文本背景颜色。例如：\n\n```html\n<p style=\"color: blue; background-color: yellow;\">\n    这段文本为蓝色，背景为黄色。\n</p>\n```\n\n  * **文本对齐方式设置**\n    * 可以使用 `text - align` 属性设置文本的对齐方式，如 `left`（左对齐）、`right`（右对齐）、`center`（居中对齐）、`justify`（两端对齐）。例如：\n\n```html\n<p style=\"text-align: center;\">\n    这段文本居中对齐。\n</p>\n```\n\n  * **文本装饰设置**\n    * 使用 `text - decoration` 属性可以设置文本的装饰效果，如 `underline`（下划线）、`overline`（上划线）、`line - through`（删除线）、`none`（无装饰）。例如：\n\n```html\n<p style=\"text-decoration: underline;\">\n    这段文本带有下划线。\n</p>\n```\n\n  * **文本缩进和间距设置**\n    * 可以通过 `text - indent` 属性设置段落首行缩进，`word - spacing` 属性设置单词间距，`letter - spacing` 属性设置字母间距，`line - height` 属性设置行高。例如：\n\n```html\n<p style=\"text-indent: 2em; word-spacing: 10px; letter-spacing: 2px; line-height: 1.5;\">\n    这段文本设置了首行缩进 2 个字符，单词间距为 10 像素，字母间距为 2 像素，行高为 1.5 倍行距。\n</p>\n```\n\n### （二）使用 HTML 列表进行文本组织\n\n列表在组织文本内容方面非常有用，可以清晰地展示一系列相关项目。\n\n  * **无序列表 `<ul>` 和有序列表 `<ol>`**\n    * 无序列表中的列表项前带有圆点或其他装饰符号，有序列表中的列表项前带有编号。例如：\n\n```html\n<ul>\n    <li>苹果</li>\n    <li>香蕉</li>\n    <li>橙子</li>\n</ul>\n\n<ol>\n    <li>第一步</li>\n    <li>第二步</li>\n    <li>第三步</li>\n</ol>\n```\n\n  * **定义列表 `<dl>`**\n    * 用于定义术语或名词的列表，包含 `<dt>`（定义项目）和 `<dd>`（定义描述）两个标签。例如：\n\n```html\n<dl>\n    <dt>HTML</dt>\n    <dd>超文本标记语言，用于创建网页的标准标记语言。</dd>\n    <dt>CSS</dt>\n    <dd>层叠样式表，用于描述 HTML 或 XML（如 SVG、XML）等文档的呈现。</dd>\n</dl>\n```\n\n### （三）使用 HTML 表格进行文本布局\n\n表格可以用于展示结构化的数据或进行页面布局（虽然在现代网页开发中更倾向于使用 CSS 布局，但在某些情况下表格仍然有用）。\n\n  * **基本表格结构**\n    * 表格由 `<table>` 标签定义，表格行由 `<tr>` 标签定义，表格单元格由 `<td>` 标签（数据单元格）或 `<th>` 标签（表头单元格）定义。例如：\n\n```html\n<table border=\"1\">\n    <tr>\n        <th>姓名</th>\n        <th>年龄</th>\n        <th>城市</th>\n    </tr>\n    <tr>\n        <td>张三</td>\n        <td>25</td>\n        <td>北京</td>\n    </tr>\n    <tr>\n        <td>李四</td>\n        <td>30</td>\n        <td>上海</td>\n    </tr>\n</table>\n```\n\n    * 其中 `border` 属性用于设置表格边框，值为 “1” 时表示显示边框。\n\n  * **表格的进阶属性和样式设置**\n    * 可以使用 `colspan` 属性设置单元格跨越的列数，`rowspan` 属性设置单元格跨越的行数。还可以通过 CSS 样式来美化表格，如设置表格宽度、高度、背景颜色、单元格边距等。例如：\n\n```html\n<table style=\"width: 100%; border-collapse: collapse;\">\n    <tr style=\"background-color: #f2f2f2;\">\n        <th style=\"padding: 10px; text-align: left;\" colspan=\"2\">个人信息</th>\n    </tr>\n    <tr>\n        <td style=\"padding: 8px; border: 1px solid #ddd;\">姓名</td>\n        <td style=\"padding: 8px; border: 1px solid #ddd;\">张三</td>\n    </tr>\n    <tr>\n        <td style=\"padding: 8px; border: 1px solid #ddd;\">年龄</td>\n        <td style=\"padding: 8px; border: 1px solid #ddd;\">25</td>\n    </tr>\n</table>\n```\n\n通过掌握这些 HTML 中文本格式化的细节和进阶操作，你可以更加灵活地创建美观、易读且结构合理的网页文本内容。',1916407199693844483,'2025-04-27 12:36:26','2025-04-27 12:36:26','2025-05-17 17:48:27',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916351710326992898,'HTML语言的各大头部元素','### 请阐述HTML语言的各大头部元素，如<head><title> <link> <base><style><meta>。','[\"简单\",\"HTML头部\",\"HTML语法\",\"HTML特性\"]','# HTML 语言中的头部元素\n\n在 HTML 文档中，`<head>` 元素是一个非常重要的部分，它包含了文档的元数据，这些元数据不会在网页正文中显示，但对文档的呈现、性能和与外部资源的交互等方面起着关键作用。以下是 HTML 中常见的头部元素及其功能介绍：\n\n## 一、`<title>` 元素\n\n`<title>` 元素用于定义 HTML 文档的标题，这个标题会显示在浏览器的标题栏或标签页上，对于用户识别当前页面以及搜索引擎优化（SEO）都非常重要。一个 HTML 文档中只能包含一个 `<title>` 元素，它应该尽可能简洁且准确地描述页面内容。例如：\n\n```html\n<title>HTML 文档的标题</title>\n```\n\n## 二、`<link>` 元素\n\n`<link>` 元素用于将 HTML 文档与外部资源进行连接，最常见的是链接外部样式表（CSS 文件）。通过指定 `rel` 属性（表示链接资源与当前文档的关系）和 `href` 属性（表示链接资源的 URL），可以让 HTML 文档引用外部样式，从而实现对页面样式的统一控制。例如：\n\n```html\n<link rel=\"stylesheet\" href=\"styles.css\">\n```\n\n在这个例子中，`rel=\"stylesheet\"` 表示链接的资源是一个样式表，`href=\"styles.css\"` 指定了样式表文件的位置。此外，`<link>` 元素还可以用于其他用途，如链接网页图标（favicon）：\n\n```html\n<link rel=\"icon\" href=\"favicon.ico\">\n```\n\n## 三、`<base>` 元素\n\n`<base>` 元素用于为文档中的所有相对 URL 提供一个基础 URL 地址。这在 HTML 文档中需要引用多个相对路径的资源（如图片、链接等）时非常有用，可以避免在每个资源引用中重复书写完整的 URL 前缀。`<base>` 元素通常包含一个 `href` 属性，该属性的值是基础 URL。例如：\n\n```html\n<base href=\"https://www.example.com/images/\">\n```\n\n当设置了这个基础 URL 后，文档中所有相对路径的图片引用（如 `<img src=\"image.jpg\">`）都会基于这个基础 URL，即实际路径为 `https://www.example.com/images/image.jpg`。需要注意的是，`<base>` 元素在一个文档中只能出现一次，并且应该放在 `<head>` 部分的开头位置。\n\n## 四、`<style>` 元素\n\n`<style>` 元素允许开发者在 HTML 文档中直接嵌入 CSS 样式。这对于小型网页或快速原型设计非常方便，可以避免创建单独的外部样式表文件。`<style>` 元素的 `type` 属性（在 HTML5 中可以省略）用于指定样式表语言的类型，通常为 `text/css`。例如：\n\n```html\n<style>\n    body {\n        font-family: Arial, sans-serif;\n        background-color: #f0f0f0;\n    }\n    h1 {\n        color: #333;\n    }\n</style>\n```\n\n在这个例子中，定义了页面主体的字体和背景颜色，以及标题的文本颜色。不过，对于大型项目或多个页面共享样式的场景，更推荐使用外部样式表（通过 `<link>` 元素引用），以便于维护和重用。\n\n## 五、`<meta>` 元素\n\n`<meta>` 元素用于设置页面的元数据，这些数据通常不会显示在页面上，但对搜索引擎、浏览器以及其他处理页面的应用程序非常重要。常见的 `<meta>` 元素包括：\n\n  * **字符编码设置** ：通过 `charset` 属性指定页面的字符编码，确保页面中的文本能够正确显示。例如：\n\n    ```html\n    <meta charset=\"UTF-8\">\n    ```\n\n    这个设置应该出现在 `<head>` 部分的开头，以避免字符编码问题。\n\n  * **视口设置（viewport）** ：对于响应式网页设计，`<meta>` 元素可以用于设置视口（viewport），以适应不同设备的屏幕宽度。例如：\n\n    ```html\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    ```\n\n    这里的 `name` 属性值为 \"viewport\"，`content` 属性包含具体的视口设置，其中 `width=device-width` 表示视口宽度等于设备屏幕宽度，`initial-scale=1.0` 表示初始缩放比例为 1.0。\n\n  * **网页描述和关键词** ：这些元数据对于搜索引擎优化（SEO）有一定作用，可以提供对页面内容的简短描述和关键词列表。例如：\n\n    ```html\n    <meta name=\"description\" content=\"这是对页面内容的简短描述\">\n    <meta name=\"keywords\" content=\"关键词1, 关键词2, 关键词3\">\n    ```\n\n    其中 `name` 属性值分别为 \"description\" 和 \"keywords\"，`content` 属性包含对应的描述文本和关键词列表。\n\n  * **其他 HTTP 响应头设置** ：`<meta>` 元素还可以用于设置一些等价于 HTTP 响应头的信息，如内容安全策略（CSP）等。例如：\n\n    ```html\n    <meta http-equiv=\"Content-Security-Policy\" content=\"default-src \'self\'\">\n    ```\n\n    在这个例子中，`http-equiv` 属性值为 \"Content-Security-Policy\"，用于指定内容安全策略，`content` 属性包含了具体的安全策略规则。\n\n通过合理地使用这些头部元素，可以有效地组织和优化 HTML 文档，提升用户体验和页面性能，同时为搜索引擎和其他应用程序提供必要的信息。',1916407199693844483,'2025-04-27 12:40:26','2025-04-27 12:40:26','2025-05-17 17:48:28',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916352548336349186,'HTML中区块特性','### 你知道HTML中的区块特性吗？','[\"普通\",\"HTML区块\",\"HTML内联元素\"]','# HTML `<div>` 和 `<span>`\n\nHTML 可以通过 `<div>` 和 `<span>` 将元素组合起来。\n\n## HTML 区块元素\n\n大多数 HTML 元素被定义为**块级元素**或**内联元素**。\n\n块级元素在浏览器显示时，通常会以新行来开始（和结束）。\n\n实例：`<h1>`、`<p>`、`<ul>`、`<table>`\n\n## HTML 内联元素\n\n内联元素在显示时通常不会以新行开始。\n\n实例：`<b>`、`<td>`、`<a>`、`<img>`\n\n## HTML `<div>` 元素\n\nHTML `<div>` 元素是块级元素，它可用于组合其他 HTML 元素的容器。\n\n`<div>` 元素没有特定的含义。除此之外，由于它属于块级元素，浏览器会在其前后显示折行。\n\n如果与 CSS 一同使用，`<div>` 元素可用于对大的内容块设置样式属性。\n\n`<div>` 元素的另一个常见的用途是文档布局。它取代了使用表格定义布局的老式方法。使用 `<table>` 元素进行文档布局不是表格的正确用法。`<table>` 元素的作用是显示表格化的数据。\n\n## HTML `<span>` 元素\n\nHTML `<span>` 元素是内联元素，可用作文本的容器。\n\n`<span>` 元素也没有特定的含义。\n\n当与 CSS 一同使用时，`<span>` 元素可用于为部分文本设置样式属性。\n\n## HTML 分组标签\n\n| 标签 | 描述 |\n| --- | --- |\n| [https://www.runoob.com/tags/tag-div.html](https://www.runoob.com/tags/tag-div.html) | 定义了文档的区域，块级 (block-level) |\n| [https://www.runoob.com/tags/tag-span.html](https://www.runoob.com/tags/tag-span.html) | 用来组合文档中的行内元素，内联元素 (inline) |',1916407199693844483,'2025-04-27 12:43:46','2025-04-27 12:43:46','2025-05-17 17:48:27',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916352561502269441,'HTML中区块特性','### 你知道HTML中的区块特性吗？','[\"普通\",\"HTML区块\",\"HTML内联元素\"]','# HTML `<div>` 和 `<span>`\n\nHTML 可以通过 `<div>` 和 `<span>` 将元素组合起来。\n\n## HTML 区块元素\n\n大多数 HTML 元素被定义为**块级元素**或**内联元素**。\n\n块级元素在浏览器显示时，通常会以新行来开始（和结束）。\n\n实例：`<h1>`、`<p>`、`<ul>`、`<table>`\n\n## HTML 内联元素\n\n内联元素在显示时通常不会以新行开始。\n\n实例：`<b>`、`<td>`、`<a>`、`<img>`\n\n## HTML `<div>` 元素\n\nHTML `<div>` 元素是块级元素，它可用于组合其他 HTML 元素的容器。\n\n`<div>` 元素没有特定的含义。除此之外，由于它属于块级元素，浏览器会在其前后显示折行。\n\n如果与 CSS 一同使用，`<div>` 元素可用于对大的内容块设置样式属性。\n\n`<div>` 元素的另一个常见的用途是文档布局。它取代了使用表格定义布局的老式方法。使用 `<table>` 元素进行文档布局不是表格的正确用法。`<table>` 元素的作用是显示表格化的数据。\n\n## HTML `<span>` 元素\n\nHTML `<span>` 元素是内联元素，可用作文本的容器。\n\n`<span>` 元素也没有特定的含义。\n\n当与 CSS 一同使用时，`<span>` 元素可用于为部分文本设置样式属性。\n\n## HTML 分组标签\n\n| 标签 | 描述 |\n| --- | --- |\n| [https://www.runoob.com/tags/tag-div.html](https://www.runoob.com/tags/tag-div.html) | 定义了文档的区域，块级 (block-level) |\n| [https://www.runoob.com/tags/tag-span.html](https://www.runoob.com/tags/tag-span.html) | 用来组合文档中的行内元素，内联元素 (inline) |',1916407199693844483,'2025-04-27 12:43:49','2025-04-27 12:43:49','2025-05-17 17:48:27',1,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916353575588507649,'HTML 表单和输入 的相关知识','### 请你阐述HTML 表单和输入 的相关知识，并介绍相关用法！','[\"简单\",\"HTML表单\",\"输入\",\"HTML语法\"]','# HTML 表单与输入：构建交互式网页的核心\n\nHTML 表单是网页中用于收集用户输入数据的重要工具，它允许用户输入文本、选择选项、上传文件等，并将这些数据发送到服务器进行处理。表单的创建和使用涉及多个 HTML 元素，其中 `<form>` 元素是表单的容器，而 `<input>`、`<textarea>`、`<select>` 等元素则是表单的具体输入控件。\n\n## 一、`<form>` 元素：表单的容器\n\n`<form>` 元素是表单的根元素，它定义了一个表单的范围，并包含所有表单控件。`<form>` 元素的主要属性包括：\n\n- **`action`**：指定表单数据提交到的服务器端脚本的 URL。例如：\n  ```html\n  <form action=\"submit_form.php\">\n  ```\n  这里，表单数据将被提交到 `submit_form.php` 文件进行处理。\n\n- **`method`**：定义表单数据提交的方式，通常为 `GET` 或 `POST`。`GET` 方法将表单数据附加到 URL 中，适合少量数据；`POST` 方法将数据放在请求体中，适合大量或敏感数据。例如：\n  ```html\n  <form action=\"submit_form.php\" method=\"POST\">\n  ```\n\n- **`enctype`**：定义表单数据的编码类型，主要用于文件上传。常见的值有：\n  - `application/x-www-form-urlencoded`（默认值）\n  - `multipart/form-data`（用于文件上传）\n  - `text/plain`\n\n- **`name`**：为表单指定一个名称，便于在 JavaScript 中引用。\n\n## 二、`<input>` 元素：表单的核心输入控件\n\n`<input>` 元素是最常用的表单控件，它可以通过 `type` 属性定义多种输入类型。常见的 `type` 值包括：\n\n- **`text`**：单行文本输入框。\n  ```html\n  <input type=\"text\" name=\"username\" placeholder=\"请输入用户名\">\n  ```\n\n- **`password`**：密码输入框，输入内容会以点或星号显示。\n  ```html\n  <input type=\"password\" name=\"password\">\n  ```\n\n- **`radio`**：单选按钮，同一组单选按钮的 `name` 属性值必须相同。\n  ```html\n  <input type=\"radio\" name=\"gender\" value=\"male\"> 男\n  <input type=\"radio\" name=\"gender\" value=\"female\"> 女\n  ```\n\n- **`checkbox`**：复选框，允许用户选择多个选项。\n  ```html\n  <input type=\"checkbox\" name=\"hobby\" value=\"reading\"> 阅读\n  <input type=\"checkbox\" name=\"hobby\" value=\"traveling\"> 旅行\n  ```\n\n- **`submit`**：提交按钮，用于将表单数据发送到服务器。\n  ```html\n  <input type=\"submit\" value=\"提交\">\n  ```\n\n- **`reset`**：重置按钮，用于将表单恢复到初始状态。\n  ```html\n  <input type=\"reset\" value=\"重置\">\n  ```\n\n- **`file`**：文件上传控件，允许用户选择文件上传。\n  ```html\n  <input type=\"file\" name=\"avatar\">\n  ```\n\n- **`email`**：用于输入电子邮件地址，支持自动验证。\n  ```html\n  <input type=\"email\" name=\"email\" placeholder=\"请输入邮箱\">\n  ```\n\n- **`number`**：用于输入数字，支持范围限制。\n  ```html\n  <input type=\"number\" name=\"age\" min=\"18\" max=\"100\">\n  ```\n\n## 三、其他表单控件\n\n除了 `<input>` 元素，表单中还可以包含以下控件：\n\n- **`<textarea>`**：多行文本输入框，适合输入较长的文本内容。\n  ```html\n  <textarea name=\"comment\" rows=\"4\" cols=\"50\">请输入您的评论...</textarea>\n  ```\n\n- **`<select>`**：下拉选择框，允许用户从多个选项中选择一个。\n  ```html\n  <select name=\"country\">\n      <option value=\"CN\">中国</option>\n      <option value=\"US\">美国</option>\n      <option value=\"JP\">日本</option>\n  </select>\n  ```\n\n- **`<label>`**：用于定义表单控件的标签，增强表单的可访问性。\n  ```html\n  <label for=\"username\">用户名：</label>\n  <input type=\"text\" id=\"username\" name=\"username\">\n  ```\n\n## 四、表单验证\n\nHTML5 提供了一些内置的表单验证功能，可以在用户提交表单之前进行数据验证，减少服务器端的验证负担。常见的验证属性包括：\n\n- **`required`**：指定输入框为必填项。\n  ```html\n  <input type=\"text\" name=\"username\" required>\n  ```\n\n- **`pattern`**：使用正则表达式验证输入内容。\n  ```html\n  <input type=\"text\" name=\"phone\" pattern=\"\\d{11}\" title=\"请输入11位数字的手机号码\">\n  ```\n\n- **`min` 和 `max`**：限制数字或日期输入的范围。\n  ```html\n  <input type=\"number\" name=\"age\" min=\"18\" max=\"100\">\n  ```\n\n- **`maxlength` 和 `minlength`**：限制文本输入的最大和最小长度。\n  ```html\n  <input type=\"text\" name=\"username\" minlength=\"3\" maxlength=\"10\">\n  ```\n\n## 五、表单的提交与处理\n\n当用户点击提交按钮时，表单数据会根据 `<form>` 元素的 `action` 和 `method` 属性发送到服务器。服务器端脚本（如 PHP、Python、Node.js 等）可以接收并处理这些数据。例如，一个简单的 PHP 脚本可以这样处理表单数据：\n\n```php\n<?php\nif ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") {\n    $username = $_POST[\"username\"];\n    $password = $_POST[\"password\"];\n    echo \"用户名: $username<br>\";\n    echo \"密码: $password<br>\";\n}\n?>\n```\n\n## 六、表单的布局与样式\n\n表单的布局和样式可以通过 CSS 进行定制。例如，可以使用 CSS Flexbox 或 Grid 布局来创建响应式的表单布局，同时使用 CSS 样式来美化表单控件。\n\n```html\n<style>\n    form {\n        display: flex;\n        flex-direction: column;\n        max-width: 300px;\n        margin: 0 auto;\n    }\n    label {\n        margin-bottom: 5px;\n    }\n    input, textarea, button {\n        margin-bottom: 10px;\n        padding: 8px;\n        border: 1px solid #ccc;\n        border-radius: 4px;\n    }\n</style>\n```\n\n通过合理使用 HTML 表单和输入控件，结合 CSS 样式和 JavaScript 功能，可以创建出功能强大且用户友好的交互式网页。',1916407199693844483,'2025-04-27 12:47:51','2025-04-27 12:47:51','2025-05-17 17:48:28',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916354548981608450,'React 18 的主要新特性','###  React 18 的主要新特性有哪些？请你简单阐述一下！','[\"普通\",\"React新特性\",\"React特点\"]','\n- **并发渲染**：通过时间切片和优先级调度优化渲染性能[2]()  \n- **自动批处理**：默认对所有状态更新（包括异步操作）进行合并渲染[2]()  \n- **新根API**：`ReactDOM.createRoot`  替代旧版 `ReactDOM.render`   \n- **Suspense增强**：支持流式服务端渲染和数据获取  \n- **新Hook**：如 `useTransition`（标记低优先级更新）、`useId`（生成唯一ID）[2]()',1916407199693844483,'2025-04-27 12:51:43','2025-04-27 12:51:43','2025-05-17 17:48:28',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916354837247733761,'React 中虚拟DOM的工作原理','### 请你阐述一下 React 中虚拟DOM的工作原理是什么？','[\"普通\",\"React特性\",\"DOM工作原理\",\"虚拟节点树\"]','\n1. **生成虚拟节点树**：React 将组件转换为轻量级 JavaScript 对象描述  \n2. **差异对比（Diff算法）**：比较新旧虚拟DOM树的差异（仅同级对比）[6]()  \n3. **局部更新真实DOM**：仅对变化部分进行实际DOM操作，避免全量渲染  \n**优势**：减少DOM操作开销，提升渲染性能[1]()[6]()',1916407199693844483,'2025-04-27 12:52:52','2025-04-27 12:52:52','2025-05-17 17:48:27',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916355081247174657,'React 中类组件与函数组件的核心区别','### React 类组件与函数组件的核心区别是什么？','[\"普通\",\"React\",\"类组件\",\"React函数组件\",\"React语法特性\"]','\n| **维度**       | 类组件                | 函数组件（含Hooks）       |\n|----------------|-----------------------|--------------------------|\n| **状态管理**   | `this.state`           | `useState`/`useReducer`  |\n| **生命周期**   | `componentDidMount`等 | `useEffect`              |\n| **代码复用**   | 继承/HOC              | 自定义Hook               |\n| **性能优化**   | `shouldComponentUpdate`| `React.memo`+`useMemo`    |',1916407199693844483,'2025-04-27 12:53:50','2025-04-27 12:53:50','2025-05-17 17:48:27',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916355314983153666,'React 组件通信的常用方式','### 请你列举并介绍几种React 组件通信的常用方式！','[\"普通\",\"React特性\",\"React通信\",\"通信原理\",\"通信方式\"]','\n- **父子通信**：通过 `props` 传递数据和回调函数  \n- **跨层级通信**：  \n  - **Context API**：适用于低频更新的全局状态（如主题/用户信息）[4]()  \n  - **Redux/MobX**：复杂状态管理，支持中间件和异步处理[4]()  \n- **事件总线**：`EventEmitter`（非React推荐方案）  ',1916407199693844483,'2025-04-27 12:54:45','2025-04-27 12:54:45','2025-05-17 17:48:28',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916355617795125250,'如何优化React应用性能','### 如何优化React应用性能？请你讲一下你的理解。','[\"普通\",\"React优化\",\"React性能\"]','\n- **组件级优化**：  \n  - 使用 `React.memo`  缓存函数组件  \n  - 类组件继承 `PureComponent` 或实现 `shouldComponentUpdate`  \n- **状态管理优化**：  \n  - 避免在渲染函数中创建新对象（如 `style={{}}`）  \n  - 使用 `useCallback`/`useMemo` 缓存函数和计算结果[4]()  \n- **代码分割**：通过 `React.lazy`  + `Suspense` 实现按需加载  ',1916407199693844483,'2025-04-27 12:55:58','2025-04-27 12:55:58','2025-05-17 17:48:28',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916356136861216770,' React Hooks 的设计意义与核心规则',' ### React Hooks 的设计意义是什么？为了实现什么目的？\n### 同时 React Hooks的核心规则又是什么？','[\"普通\",\"React Hooks\",\"Hooks\",\"生命周期\"]','\n**设计意义**：  \n- 解决类组件的生命周期逻辑分散问题（如数据获取与清理分散在不同方法）  \n- 实现更灵活的逻辑复用（自定义Hook）  \n \n**核心规则**：  \n1. 只在最顶层调用Hook（不可在条件/循环中调用）  \n2. 仅在React函数组件或自定义Hook中使用  ',1916407199693844483,'2025-04-27 12:58:01','2025-04-27 12:58:01','2025-05-17 17:48:28',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916356203420626945,' React Hooks 的设计意义与核心规则',' ### React Hooks 的设计意义是什么？为了实现什么目的？\n### 同时 React Hooks的核心规则又是什么？','[\"普通\",\"React Hooks\",\"Hooks\",\"生命周期\"]','\n**设计意义**：  \n- 解决类组件的生命周期逻辑分散问题（如数据获取与清理分散在不同方法）  \n- 实现更灵活的逻辑复用（自定义Hook）  \n \n**核心规则**：  \n1. 只在最顶层调用Hook（不可在条件/循环中调用）  \n2. 仅在React函数组件或自定义Hook中使用  ',1916407199693844483,'2025-04-27 12:58:17','2025-04-27 12:58:17','2025-05-17 17:48:28',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916356678740127746,'Redux 的核心工作流程的各大核心概念','### 请你阐述 Redux 的核心工作流程的各大核心概念，如Action、Reducer、Store、数据流的含义，请你简单阐述。','[\"普通\",\"Redux\",\"Redux特性\",\"Redux组件\"]','\n1. **Action**：描述事件的对象（如 `{type: \'ADD_TODO\', payload: \'...\'}`）  \n2. **Reducer**：纯函数，接收旧状态和Action，返回新状态  \n3. **Store**：通过 `createStore` 创建，包含状态树和中间件  \n4. **数据流**：`View → Action → Reducer → Store → View Update`[4]()  ',1916407199693844483,'2025-04-27 13:00:11','2025-04-27 13:00:11','2025-05-17 17:48:28',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916356962170220545,' React Router 的实现原理','###  React Router 的实现原理是什么，请阐述一下。','[\"普通\",\" React Router\",\" Router路由\",\"路由\",\"React路由\"]','\n- **BrowserRouter**：基于HTML5 History API（`pushState`/`replaceState`）  \n- **HashRouter**：通过URL哈希值（如 `#/home`）实现无刷新路由  \n- **核心组件**：  \n  - `<Routes>` 和 `<Route>` 定义路由映射  \n  - `<Link>` 生成导航链接，`useNavigate` 实现编程式导航  ',1916407199693844483,'2025-04-27 13:01:18','2025-04-27 13:01:18','2025-05-17 17:48:28',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916357337950498818,'React 服务端渲染（SSR）的核心价值','### React 服务端渲染（SSR）的核心价值是什么，请详细阐述。','[\"普通\",\"SSR\",\"服务端渲染\",\"React 服务端渲染\"]','# React 服务端渲染（SSR）的核心价值 \n \n## 1. **SEO 优化与内容可索引性**\n- **搜索引擎友好**：传统客户端渲染（CSR）的动态内容无法被爬虫有效抓取，而 SSR 生成的完整 HTML 结构可直接被搜索引擎解析[1]()[2]()。例如，新闻、电商类网站通过 SSR 能显著提升关键词排名[5]()。\n- **元数据预置**：在服务端可直接注入 `<title>`、`<meta>` 等 SEO 关键标签，确保爬虫准确获取页面描述[6]()[8]()。\n \n## 2. **首屏性能优化**\n- **减少白屏时间**：服务端预渲染的 HTML 可直接展示，无需等待客户端 JS 加载和执行，首屏加载速度提升 30%-50%[1]()[4]()。例如，Next.js  的流式渲染（Streaming SSR）支持分块传输内容，进一步缩短首次内容渲染时间[3]()[7]()。\n- **低网络环境优化**：在弱网条件下，用户仍能快速看到页面骨架，提升感知性能[4]()[7]()。\n \n## 3. **同构开发与代码复用**\n- **统一技术栈**：同一套 React 代码既在服务端生成静态 HTML，又在客户端进行交互激活（Hydration），降低维护成本[1]()[6]()。\n- **数据预取优化**：通过 `getServerSideProps`（Next.js ）在服务端同步获取数据，避免客户端多次请求导致的瀑布流问题[4]()[6]()。\n \n## 4. **技术架构升级**\n- **并发渲染支持**：React 18 的并发模式（Concurrent Mode）允许服务端中断低优先级任务，优先渲染关键内容，提升复杂应用的响应效率[3]()[6]()。\n- **流式传输（Streaming）**：通过 `renderToNodeStream` 逐块输出 HTML，减少服务端内存占用并加速内容到达时间[7]()[3]()。\n \n## 5. **用户体验增强**\n- **内容可见性优先**：用户无需等待 JS 执行即可看到主要内容，降低跳出率[2]()[8]()。\n- **渐进式增强**：在客户端激活后保留完整的交互能力（如表单提交、动态路由），兼顾静态展示与动态功能[4]()[6]()。\n \n---\n \n> **总结**：React SSR 的核心价值在于 **平衡性能与功能**，通过服务端预渲染解决 SEO 和首屏性能瓶颈，同时利用现代框架（如 Next.js ）实现开发效率与用户体验的双重提升。对于内容密集型、高 SEO 需求的应用（如企业官网、媒体平台），SSR 是首选方案[5]()[7]()。',1916407199693844483,'2025-04-27 13:02:48','2025-04-27 13:02:48','2025-05-17 17:48:28',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916357989745340418,'React 服务端渲染（SSR）的 SEO 优化','### 阐述React 服务端渲染（SSR）的 SEO 优化的特性和适合的场景','[\"普通\",\"SEO优化\",\"React\",\"SEO\",\"渲染策略\",\"SSR SEO特性\"]','# React 服务端渲染（SSR）的 SEO 优化特性与适用场景 \n \n## 一、SEO 优化核心特性 \n \n### 1. **静态 HTML 预渲染**\n- 服务器端生成完整的 HTML 结构，包含所有动态内容（如文本、链接、元数据），确保爬虫无需执行 JavaScript 即可获取完整页面信息。\n- 相较于客户端渲染（CSR）的空白 HTML 模板，SSR 的预渲染页面可直接被搜索引擎索引，避免内容缺失导致的排名下降。\n \n### 2. **元数据动态注入**\n- 通过 `<title>`、`<meta>` 等标签在服务端动态注入关键词、描述、结构化数据（Schema.org ），精准控制 SEO 元信息[1]()[2]()。\n- 示例：新闻类页面可为每篇文章生成独立的标题和摘要，提升搜索结果的点击率。\n \n### 3. **爬虫兼容性保障**\n- 解决传统 SPA 对 JavaScript 执行能力弱的爬虫（如百度）的兼容问题，确保异步加载内容也能被完整抓取。\n- 支持流式渲染（Streaming SSR），分块传输 HTML 内容，加速爬虫解析效率。\n \n---\n \n## 二、适用场景分析 \n \n### 1. **内容密集型网站**\n- **新闻/媒体平台**：需要快速索引大量文章内容，依赖关键词排名获取流量。\n- **电商平台**：商品详情页需确保价格、规格等核心信息被搜索引擎收录，促进自然流量转化。\n \n### 2. **高 SEO 需求应用**\n- **企业官网/品牌站**：依赖搜索引擎获取潜在客户，需强化品牌关键词和业务描述。\n- **论坛/社区**：用户生成内容（UGC）的实时索引需求，如问答、评论等动态信息。\n \n### 3. **首屏内容敏感场景**\n- **低网络环境用户**：预渲染 HTML 减少首屏依赖 JS 加载，提升弱网条件下的内容可见性。\n- **广告着陆页**：需快速展示核心营销信息以降低跳出率，同时保障 SEO 关键词覆盖。\n \n---\n \n## 三、技术选型建议 \n- **框架推荐**：Next.js  内置 SSR 支持，简化路由配置和数据预取（`getServerSideProps`）。\n- **混合渲染策略**：对 SEO 关键页面使用 SSR，非核心页面采用 CSR 以降低服务器负载。\n- **性能监控**：结合 Lighthouse 和 Google Search Console 持续优化 TTFB（首字节时间）和 LCP（最大内容渲染）指标。\n \n> 提示：SSR 需权衡服务器成本与开发复杂度，建议通过 Next.js  等成熟框架降低实施门槛。更多技术细节可参考 [Next.js 官方文档] 。',1916407199693844483,'2025-04-27 13:05:23','2025-04-27 13:05:23','2025-06-02 17:00:55',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916358212882313218,'React Fiber 架构的核心改进','### 你知道React Fiber 架构吗，其有何改进？','[\"普通\",\"React Fiber \",\"错误边界\",\"增量渲染\",\"可中断渲染\"]','\n- **可中断渲染**：将渲染任务拆分为多个小任务，优先处理高优先级更新（如用户输入）  \n- **增量渲染**：通过 `requestIdleCallback` 在浏览器空闲时段执行任务  \n- **错误边界**：通过 `componentDidCatch` 捕获子组件树中的错误[4]()  ',1916407199693844483,'2025-04-27 13:06:16','2025-04-27 13:06:16','2025-05-17 17:48:28',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916359917300658178,' Spring Boot 自动配置的实现原理','###  Spring Boot 自动配置的实现原理是什么？','[\"普通\",\" Spring Boot 自动配置\",\" Spring Boot 特性\",\" Spring Boot 框架\"]','# Spring Boot 自动配置的实现原理 \n \n## 一、核心机制 \nSpring Boot 自动配置的核心目标是通过**条件化注解**和**预定义配置规则**，根据项目依赖和环境自动装配 Bean，实现**零配置开箱即用**。其核心流程可分为以下步骤：\n \n---\n \n## 二、实现原理详解 \n \n### 1. 启动入口与注解驱动 \n- **@SpringBootApplication**：  \n  该组合注解包含 `@EnableAutoConfiguration`，是自动配置的触发入口[1]()[3]()。其作用包括：  \n  - 扫描主类所在包及其子包组件  \n  - 通过 `@Import(AutoConfigurationImportSelector.class)`  加载自动配置类  \n \n### 2. 自动配置类加载机制 \n- **AutoConfigurationImportSelector**：  \n  该类实现 `ImportSelector` 接口，负责从以下位置读取配置类：  \n  - **META-INF/spring.factories** （Spring Boot 2.7 前主要来源）  \n  - **META-INF/spring/AutoConfiguration.imports** （Spring Boot 2.7+ 推荐格式）[4]()  \n  例如，`spring-boot-autoconfigure` 包的 `spring.factories`  定义了上百个默认配置类[1]()[5]()。\n \n### 3. 条件化注解筛选 \n自动配置类通过 **@Conditional** 系列注解判断是否生效，例如：  \n| 注解                     | 作用                                                         | 示例场景                     |\n|--------------------------|--------------------------------------------------------------|------------------------------|\n| `@ConditionalOnClass`    | 类路径存在指定类时生效                                       | 存在 `DataSource` 时配置数据库连接池 |\n| `@ConditionalOnProperty` | 配置文件中存在指定属性时生效                                 | `spring.datasource.url`  存在时启用数据源 |\n| `@ConditionalOnMissingBean` | 容器中无该类型 Bean 时生效                                 | 用户未自定义 `RedisTemplate` 时加载默认实现 |\n \n### 4. 配置属性绑定 \n- **@EnableConfigurationProperties**：  \n  将配置文件（如 `application.yml` ）中的属性绑定到 Java 对象。例如：  \n  ```java \n  @ConfigurationProperties(prefix = \"spring.http.encoding\") \n  public class HttpEncodingProperties {\n      private String charset = \"UTF-8\";\n      // Getter/Setter \n  }',1916407199693844483,'2025-04-27 13:13:03','2025-04-27 13:13:03','2025-05-17 17:48:27',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916360175657201666,'Spring Boot Starter 的设计意义','### Spring Boot Starter 的设计意义是什么？','[\"普通\",\"Spring Boot Starter\",\"Spring Boot\"]','\nStarter 的核心价值在于简化依赖管理：  \n1. **依赖聚合**：如 `spring-boot-starter-web` 包含 Spring MVC、Tomcat、Jackson 等 Web 开发必备依赖，避免版本冲突。  \n2. **自动配置**：每个 Starter 携带 `spring.factories`  文件，声明其关联的自动配置类()。  \n3. **标准化开发**：官方/第三方 Starter 统一命名规范（如 `xxx-spring-boot-starter`），提升生态兼容性()。  ',1916407199693844483,'2025-04-27 13:14:04','2025-04-27 13:14:04','2025-06-02 16:58:16',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916360469438836738,'Spring Boot 如何简化 Spring 应用的开发','### Spring Boot 如何简化 Spring 应用的开发？','[\"普通\",\"SpringBoot 特性\",\"SpringBoot优化\",\"SpringBoot开发\"]','\nSpring Boot 通过四大特性简化开发：  \n1. **嵌入式容器**：内嵌 Tomcat/Jetty，无需部署 WAR 包，`java -jar` 直接运行[1]()[5]()。  \n2. **自动配置**：基于类路径依赖智能推断 Bean 配置[3]()。  \n3. **Actuator 监控**：提供 `/health`、`/metrics` 等端点实现生产级监控[3]()。  \n4. **统一配置**：支持 `application.yml`  多环境配置，通过 `@ConfigurationProperties` 实现类型安全绑定[4]()。  ',1916407199693844483,'2025-04-27 13:15:14','2025-04-27 13:15:14','2025-05-17 17:48:27',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916360752554356738,'Spring Boot 与 Spring MVC 的核心区别','### 简单阐述一下，Spring Boot 与 Spring MVC 的核心区别是什么？','[\"普通\",\"Spring Boot 特性\",\"Spring MVC \"]','\n| **维度**        | Spring MVC                  | Spring Boot                  |  \n|-----------------|-----------------------------|------------------------------|  \n| **配置方式**    | 需手动配置 DispatcherServlet| 零 XML 配置，自动装配        |  \n| **部署**        | 依赖外部容器（如 Tomcat）   | 内嵌容器，独立运行           |  \n| **依赖管理**    | 手动管理各依赖版本          | Starter 统一管理依赖         |  \n| **监控**        | 无原生支持                  | 集成 Actuator 提供监控端点   |  ',1916407199693844483,'2025-04-27 13:16:22','2025-04-27 13:16:22','2025-05-17 17:48:28',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916364085042130946,'Spring Boot 的多环境配置','### 如何实现 Spring Boot 的多环境配置？如 Profile 注解、外部化配置等等。','[\"普通\",\"多环境配置\",\"Spring Boot\"]','\n1. **配置文件拆分**：创建 `application-{dev|prod}.yml`，通过 `spring.profiles.active=dev`  激活[3]()。  \n2. **Profile 注解**：使用 `@Profile(\"dev\")` 标注特定环境下的 Bean[4]()。  \n3. **外部化配置**：支持从环境变量、命令行参数（`--server.port=8081` ）覆盖配置[1]()。  \n**最佳实践**：利用 `spring.config.import`  实现配置文件的模块化加载[4]()。 ',1916407199693844483,'2025-04-27 13:29:36','2025-04-27 13:29:36','2025-05-17 17:48:28',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916364300407058434,'Spring Boot Actuator 的核心功能','### Spring Boot Actuator 的核心功能有哪些？','[\"普通\",\"Actuator\",\"Spring Boot Actuator\"]','\nActuator 提供以下生产就绪功能：  \n1. **健康检查**：`/health` 端点显示数据库、磁盘状态等[3]()。  \n2. **指标监控**：`/metrics` 暴露 JVM 内存、HTTP 请求统计等数据[4]()。  \n3. **环境信息**：`/env` 展示所有配置属性，支持动态修改（需配合 `@RefreshScope`）[3]()。  \n4. **审计日志**：记录用户操作事件，便于安全审计[1]()。  \n ',1916407199693844483,'2025-04-27 13:30:28','2025-04-27 13:30:28','2025-05-17 17:48:27',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916364596206153730,'如何将 Spring Boot 应用打包为可执行 JAR','### 如何将 Spring Boot 应用打包为可执行 JAR？','[\"普通\",\"插件配置\",\"分层构建\",\"启动脚本\",\" Spring Boot 应用打包\"]','\n1. **插件配置**：在 `pom.xml`  中添加 `spring-boot-maven-plugin`，执行 `mvn package` 生成 FAT JAR[1]()[5]()。  \n2. **分层构建**：通过 `<layers>` 配置将依赖、资源、代码分离，优化 Docker 镜像构建效率[4]()。  \n3. **启动脚本**：生成的 JAR 包含 Unix/Windows 启动脚本，支持 `java -jar` 直接运行[3]()。  ',1916407199693844483,'2025-04-27 13:31:38','2025-04-27 13:31:38','2025-05-17 17:48:28',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916364763508551682,'Spring Boot 集成 MyBatis','### Spring Boot 如何集成 MyBatis？','[\"普通\",\" MyBatis\",\"Spring Boot\"]','\n集成步骤分为四步：  \n1. **添加 Starter**：引入 `mybatis-spring-boot-starter` 依赖[3]()。  \n2. **配置数据源**：在 `application.yml`  中定义 `spring.datasource`  参数[4]()。  \n3. **Mapper 扫描**：使用 `@MapperScan(\"com.example.mapper\")`  注解自动注册接口[1]()。  \n4. **事务管理**：通过 `@Transactional` 注解声明式管理数据库事务[3]()。  ',1916407199693844483,'2025-04-27 13:32:18','2025-04-27 13:32:18','2025-05-17 17:48:28',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916364926142689282,'Spring Boot 的监控方案','### Spring Boot 的监控方案有哪些？','[\"普通\",\"监控\",\"监控方案\",\"Spring Boot\"]','\n主流监控方案包括：  \n1. **Spring Boot Admin**：可视化监控平台，聚合多个实例的健康状态[3]()。  \n2. **Prometheus + Grafana**：通过 `micrometer-registry-prometheus` 暴露指标，Grafana 展示仪表盘[4]()。  \n3. **ELK 日志分析**：集成 Logstash 将日志发送到 Elasticsearch，Kibana 可视化分析[1]()。  ',1916407199693844483,'2025-04-27 13:32:57','2025-04-27 13:32:57','2025-05-17 17:48:27',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916365192476798978,' Spring Boot 实现热部署','###  Spring Boot 如何实现热部署？请简单阐述。','[\"普通\",\"DevTools\",\"JRebel\",\"热部署\",\"Spring Boot\"]','\n两种热部署方案：  \n1. **DevTools**：添加 `spring-boot-devtools` 依赖，IDE 修改代码后自动重启（需开启 Build Project Automatically）[3]()[5]()。  \n2. **JRebel**：商业工具，支持类/资源热加载，无需重启应用[1]()。  \n**限制**：静态资源修改可直接生效，但 Bean 定义变更仍需重启[4]()。  ',1916407199693844483,'2025-04-27 13:34:00','2025-04-27 13:34:00','2025-05-17 17:48:28',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916366662802649089,'JavaScript  闭包的定义与典型应用场景','### 请阐述 JS 闭包的定义与典型应用场景。','[\"普通\",\"JavaScript \",\"闭包\"]','\n闭包（Closure）是函数与其词法环境的组合，允许内部函数访问外部函数的作用域[1]()。核心特性包括：\n- **持久化变量**：外层函数变量不会被垃圾回收 \n- **数据封装**：创建私有变量（如计数器实现）\n```javascript \nfunction createCounter() {\n  let count = 0;\n  return function() { return ++count; };\n}\nconst counter = createCounter();\nconsole.log(counter());  // 1 \n```\n应用场景：\n\n    模块化开发（实现私有方法）\n    防抖/节流函数\n    缓存计算结果（Memoization）',1916407199693844483,'2025-04-27 13:39:51','2025-04-27 13:39:51','2025-05-17 17:48:28',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916367042479435778,'JavaScript 原型链继承机制','### JavaScript 原型链继承机制是什么？','[\"普通\",\"JavaScript 原型链继承机制\",\"JavaScript \",\"原型链\"]','## 原型链继承机制\n\n**答案**\nJavaScript 通过原型链实现继承：\n\n1. **构造函数原型**：每个函数都有 `prototype` 属性指向原型对象\n2. **实例继承**：对象通过 `__proto__` 继承原型属性\n3. **链式查找**：访问属性时逐级向上查找原型链[5](https://blog.csdn.net/weixin_32534011/article/details/116410193)\n\n```\njavascript复制function Animal(name) { this.name  = name; }\nAnimal.prototype.speak  = function() { console.log(this.name);  };\n \nfunction Dog(name) { Animal.call(this,  name); }\nDog.prototype  = Object.create(Animal.prototype); \n```\n\n',1916407199693844483,'2025-04-27 13:41:21','2025-04-27 13:41:21','2025-05-17 17:48:28',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916367063207686145,'JavaScript 原型链继承机制','### JavaScript 原型链继承机制是什么？','[\"普通\",\"JavaScript 原型链继承机制\",\"JavaScript \",\"原型链\"]','## 原型链继承机制\n\n**答案**\nJavaScript 通过原型链实现继承：\n\n1. **构造函数原型**：每个函数都有 `prototype` 属性指向原型对象\n2. **实例继承**：对象通过 `__proto__` 继承原型属性\n3. **链式查找**：访问属性时逐级向上查找原型链[5](https://blog.csdn.net/weixin_32534011/article/details/116410193)\n\n```\njavascript复制function Animal(name) { this.name  = name; }\nAnimal.prototype.speak  = function() { console.log(this.name);  };\n \nfunction Dog(name) { Animal.call(this,  name); }\nDog.prototype  = Object.create(Animal.prototype); \n```\n\n',1916407199693844483,'2025-04-27 13:41:26','2025-04-27 13:41:26','2025-05-17 17:48:28',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916367533326249985,'javascript 中事件循环（Event Loop）运行机制','### 你知道 JavaScript 事件循环（Event Loop）运行机制是什么吗？','[\"普通\",\"JavaScript\",\"Event Loop\"]','JavaScript 单线程通过事件循环处理异步任务：\n\n1. **调用栈**：同步任务立即执行\n\n2. 任务队列\n\n   ：\n\n   - 宏任务：`setTimeout`、DOM 事件\n   - 微任务：`Promise.then` 、`MutationObserver`\n\n3. **执行顺序**：同步代码 → 微任务 → 宏任务[1](https://www.php.cn/faq/474942.html)\n\n```\njavascript复制console.log(1); \nsetTimeout(() => console.log(2),  0);\nPromise.resolve().then(()  => console.log(3)); \n// 输出顺序：1 → 3 → 2 \n```\n\n',1916407199693844483,'2025-04-27 13:43:18','2025-04-27 13:43:18','2025-05-17 17:48:27',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916367795055013889,'javascript 中 ES6 核心特性解析','### 你知道 ES6 核心特性解析是什么？','[\"普通\",\"ES6 核心特性\",\"JS\"]','| 特性          | 说明                        | 示例                      |\n| ------------- | --------------------------- | ------------------------- |\n| **let/const** | 块级作用域变量声明          | `let x = 10`              |\n| **箭头函数**  | 简化函数写法，绑定外层 this | `() => console.log(this)` |\n| **解构赋值**  | 快速提取对象/数组值         | `const {name} = obj`      |\n| **Class**     | 面向对象语法糖              | `class User {}`           |\n\n',1916407199693844483,'2025-04-27 13:44:21','2025-04-27 13:44:21','2025-05-17 17:48:28',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916368089960722434,'javascript 中 Promise 与 async/await 的对比','### javascript 中 Promise 与 async/await 的对比','[\"普通\",\"Promise \",\" async/await\"]','- Promise\n\n  ：\n\n  - 三种状态：pending/fulfilled/rejected\n  - 链式调用：`.then().catch()`\n\n- async/await\n\n  ：\n\n  - 语法糖：用同步方式写异步代码\n  - 错误处理：必须配合 try/catch[1](https://www.php.cn/faq/474942.html)\n\n```\njavascript复制// Promise \nfetch(url).then(res => res.json()).catch(console.error); \n \n// async/await \nasync function loadData() {\n  try {\n    const res = await fetch(url);\n    return res.json(); \n  } catch(err) { console.error(err);  }\n}\n```\n\n',1916407199693844483,'2025-04-27 13:45:31','2025-04-27 13:45:31','2025-05-17 17:48:27',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916368424502603778,'javascript 的 this 关键字的指向规则','### this 关键字的指向规则','[\"普通\",\"this 关键字\",\"指向规则\",\"javascript\"]','| 场景         | this 指向        | 示例                      |\n| ------------ | ---------------- | ------------------------- |\n| 普通函数调用 | window/undefined | `function fn() {this...}` |\n| 对象方法调用 | 所属对象         | `obj.method()`            |\n| 构造函数     | 新创建实例       | `new User()`              |\n| 箭头函数     | 外层 this 绑定   | `() => {this...}`         |\n\n',1916407199693844483,'2025-04-27 13:46:51','2025-04-27 13:46:51','2025-05-17 17:48:27',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916368816854577154,'javascript 中类型转换机制与 === 区别','### JS中类型转换机制与 === 区别是什么，简要阐述即可。','[\"普通\",\"类型转换机制\",\"JS\",\"===\"]','- 隐式转换规则\n\n  ：\n\n  - 字符串拼接：`1 + \"2\" = \"12\"`\n  - 布尔判断：`if(0)` 判定为 false\n\n- == 与 ===\n\n  ：\n\n  - `==` 会进行类型转换后比较\n  - `===` 严格比较类型和值[5](https://blog.csdn.net/weixin_32534011/article/details/116410193)\n\n```\njavascript复制0 == false   // true \n0 === false  // false \n```\n\n',1916407199693844483,'2025-04-27 13:48:25','2025-04-27 13:48:25','2025-05-17 17:48:27',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916369336109412354,'JavaScript 中 作用域链与变量提升','### JS 中 作用域链与变量提升 的特性是什么？阐述一下。','[\"普通\",\"JS  \",\"JS 作用域链\",\"JS 变量提升 \"]','- \n  变量提升\n\n  ：\n\n  - var 声明提升到作用域顶部\n  - let/const 存在暂时性死区\n\n- 作用域链\n\n  ：\n\n  - 函数执行时创建作用域链\n  - 内部函数可访问外层变量[1](https://www.php.cn/faq/474942.html)\n\n```\njavascript复制console.log(a);  // undefined（var a 被提升）\nvar a = 5;\n```\n\n',1916407199693844483,'2025-04-27 13:50:28','2025-04-27 13:50:28','2025-05-17 17:48:27',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916369781787766786,'JavaScript 中常见设计模式实现','### JS 中常见设计模式实现你了解吗？如：单例模式、观察者模式。','[\"普通\",\"单例模式\",\"观察者模式\",\"JS设计模式\"]','**1.单例模式**：确保类只有一个实例\n\n```\njavascript复制class Logger {\n  constructor() { \n    if (!Logger.instance)  Logger.instance  = this;\n    return Logger.instance; \n  }\n}\n```\n\n**2.观察者模式**：对象间订阅/通知机制\n\n```\njavascript复制class Subject {\n  constructor() { this.observers  = []; }\n  subscribe(obs) { this.observers.push(obs);  }\n  notify(data) { this.observers.forEach(obs  => obs.update(data));  }\n}\n```',1916407199693844483,'2025-04-27 13:52:15','2025-04-27 13:52:15','2025-05-17 17:48:28',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916370093105786881,'JavaScript 性能优化实践方案','### 你做过 JS 性能优化吗？请阐述相关方案。','[\"普通\",\"JS 性能优化\"]','- \n  减少重绘回流\n\n  ：\n\n  - 使用 `transform` 代替 top/left 修改\n  - 批量 DOM 操作（文档片段）\n\n- 内存管理\n\n  ：\n\n  - 及时解除事件监听\n  - 避免循环引用\n\n- 代码优化\n\n  ：\n\n  - 节流防抖函数\n  - Web Worker 处理密集型任务[4](https://blog.csdn.net/weixin_52710450/article/details/117326399)\n\n------\n\n> 提示：更多技术细节可参考 [MDN Web Docs](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript) 或 [1](https://www.php.cn/faq/474942.html)[5](https://blog.csdn.net/weixin_32534011/article/details/116410193) 中的案例解析',1916407199693844483,'2025-04-27 13:53:29','2025-04-27 13:53:29','2025-05-17 17:48:28',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916372857504444417,'CSS 盒模型的组成及两种模型的区别','### CSS 盒模型的组成及两种模型的区别是什么？','[\"普通\",\"CSS盒模型\"]','\nCSS盒模型由四部分组成：内容（content）、内边距（padding）、边框（border）、外边距（margin）。  \n- **标准盒模型**：元素的 `width/height` 仅表示内容区大小  \n- **替代盒模型**：`width/height` 包含内容+内边距+边框（通过 `box-sizing: border-box` 切换）  \n触发方式：`box-sizing: content-box`（默认）为标准模型，`border-box` 为替代模型[3]()[4]()。\n ',1916407199693844483,'2025-04-27 14:04:28','2025-04-27 14:04:28','2025-05-17 17:48:28',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916373244877778946,'CSS 选择器优先级如何计算','### CSS 选择器优先级如何计算，你知道吗？','[\"普通\",\"CSS 选择器\",\"CSS 选择器优先级\"]','\n优先级从高到低：  \n1. `!important`  \n2. 内联样式（如 `style=\"color:red\"`）  \n3. ID选择器（`#id`）  \n4. 类/伪类/属性选择器（`.class`、`:hover`、`[type=\"text\"]`）  \n5. 元素/伪元素选择器（`div`、`::before`）  \n**特指度计算规则**：ID数 × 100 + 类数 × 10 + 元素数 × 1[3]()。',1916407199693844483,'2025-04-27 14:06:00','2025-04-27 14:06:00','2025-05-17 17:48:27',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916373633257746434,'CSS 中实现元素水平垂直居中的方法','### 实现元素水平垂直居中方法？','[\"普通\",\"CSS元素水平垂直居\",\"CSS语法特性\"]','\n```css \n/* Flex方案 */\n.parent { display: flex; justify-content: center; align-items: center; }\n \n/* Grid方案 */\n.parent { display: grid; place-items: center; }\n \n/* 绝对定位+平移 */\n.child { \n  position: absolute; \n  left: 50%; top: 50%; \n  transform: translate(-50%, -50%);\n}\n \n/* 表格布局 */\n.parent { display: table-cell; text-align: center; vertical-align: middle; }\n \n/* margin自动填充（需已知宽高） */\n.child { margin: auto; } \n```',1916407199693844483,'2025-04-27 14:07:33','2025-04-27 14:07:33','2025-05-17 17:48:28',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916373697111830530,'实现元素水平垂直居中的5种方法','### 实现元素水平垂直居中的5种方法？','[\"普通\",\"CSS元素水平垂直居\",\"CSS语法特性\"]','\n```css \n/* Flex方案 */\n.parent { display: flex; justify-content: center; align-items: center; }\n \n/* Grid方案 */\n.parent { display: grid; place-items: center; }\n \n/* 绝对定位+平移 */\n.child { \n  position: absolute; \n  left: 50%; top: 50%; \n  transform: translate(-50%, -50%);\n}\n \n/* 表格布局 */\n.parent { display: table-cell; text-align: center; vertical-align: middle; }\n \n/* margin自动填充（需已知宽高） */\n.child { margin: auto; } \n```',1916407199693844483,'2025-04-27 14:07:48','2025-04-27 14:07:48','2025-05-17 17:48:28',1,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916373944642875393,'CSS 中 Flexbox 中 flex: 1 的含义','### Flexbox 中 flex: 1 的含义','[\"普通\",\"Flexbox\",\"CSS语法\"]','`flex: 1` 是 `flex-grow: 1`（扩展比例）、`flex-shrink: 1`（收缩比例）、`flex-basis: 0%`（初始尺寸）的简写。表示元素会根据容器剩余空间自动伸缩，占据同等比例的空间[3](https://www.cnblogs.com/xiaodi-js/p/18725053)。',1916407199693844483,'2025-04-27 14:08:47','2025-04-27 14:08:47','2025-05-17 17:48:28',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916374431396048897,'CSS 中 什么是 BFC？如何触发？','### 在CSS 中什么是 BFC？如何触发？','[\"普通\",\"BFC\",\"CSS 的 BFC\"]','\n**BFC（块级格式化上下文）** 是独立渲染区域，内部布局不影响外部。触发条件：\n\n- `float` 非 `none`\n- `overflow` 非 `visible`\n- `display: inline-block/table-cell/flex`\n- `position: absolute/fixed`\n  应用场景：清除浮动、防止外边距折叠[3](https://www.cnblogs.com/xiaodi-js/p/18725053)[4](https://blog.csdn.net/SSSS__AS/article/details/125679229)。',1916407199693844483,'2025-04-27 14:10:43','2025-04-27 14:10:43','2025-05-17 17:48:27',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916374778164326402,'CSS 中响应式设计的实现方案','### 响应式设计的实现方案，阐述一下。','[\"普通\",\"CSS\",\"CSS响应式设计\"]','- **媒体查询**：`@media (max-width: 768px) { ... }` 适配不同屏幕\n- **视口单位**：使用 `vw/vh` 实现比例布局\n- **流式布局**：百分比宽度替代固定像素\n- **Flex/Grid**：弹性容器自动调整子项排列\n- **图片适配**：`srcset` 属性按分辨率加载[2](https://blog.csdn.net/simahe/article/details/143717024)[3](https://www.cnblogs.com/xiaodi-js/p/18725053)。\n\n',1916407199693844483,'2025-04-27 14:12:06','2025-04-27 14:12:06','2025-05-17 17:48:27',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916375026521649153,'CSS 中transition 和 animation 的核心区别','### 请你阐述transition 和 animation 的核心区别。','[\"普通\",\"transition\",\" animation \",\"CSS特性\"]','| **特性**     | transition               | animation                                                    |\n| ------------ | ------------------------ | ------------------------------------------------------------ |\n| **触发条件** | 需要状态变化（如:hover） | 自动或通过关键帧控制                                         |\n| **复杂度**   | 简单两态过渡             | 支持多关键帧复杂动画                                         |\n| **循环控制** | 不支持循环               | 可通过 `infinite` 实现循环                                   |\n| **适用场景** | 按钮悬停、颜色渐变       | 轮播图、骨骼动画等复杂效果[3](https://www.cnblogs.com/xiaodi-js/p/18725053)。 |\n\n',1916407199693844483,'2025-04-27 14:13:05','2025-04-27 14:13:05','2025-05-17 17:48:28',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916375190833508354,'CSS 预处理器的优势及常用工具','### CSS 预处理器的优势及常用工具有什么？','[\"普通\",\"CSS 预处理器\"]','\n**优势**：\n\n- 支持变量、嵌套、混合（Mixin）等编程特性\n- 模块化开发（如拆分 `_variables.scss` ）\n- 内置函数（颜色计算、循环等）\n  **常用工具**：Sass（使用 `$` 符号）、Less（使用 `@` 符号）[1](https://blog.csdn.net/pengxian00007/article/details/116716226)[3](https://www.cnblogs.com/xiaodi-js/p/18725053)。',1916407199693844483,'2025-04-27 14:13:44','2025-04-27 14:13:44','2025-05-17 17:48:28',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916375873980772354,'如何优化 CSS 性能？','### 如何优化 CSS 性能？说出你的方案。','[\"普通\",\"CSS优化\"]','- **减少重排/重绘**：使用 `transform` 替代 `top/left` 修改位置\n- **压缩代码**：删除注释、合并重复样式\n- **避免深层嵌套**：如 `.nav ul li a` 改为 `.nav-link`\n- **使用 GPU 加速**：对动画元素添加 `will-change: transform`\n- **按需加载**：拆分首屏关键CSS[2](https://blog.csdn.net/simahe/article/details/143717024)[3](https://www.cnblogs.com/xiaodi-js/p/18725053)。\n\n',1916407199693844483,'2025-04-27 14:16:27','2025-04-27 14:16:27','2025-05-17 17:48:28',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916376252332158978,'CSS 中清除浮动的方法','### CSS 中清除浮动的方法你知道吗？回答三种最好。','[\"普通\",\"CSS 清除浮动\",\"CSS语法\"]','- **减少重排/重绘**：使用 `transform` 替代 `top/left` 修改位置\n- **压缩代码**：删除注释、合并重复样式\n- **避免深层嵌套**：如 `.nav ul li a` 改为 `.nav-link`\n- **使用 GPU 加速**：对动画元素添加 `will-change: transform`\n- **按需加载**：拆分首屏关键CSS[2](https://blog.csdn.net/simahe/article/details/143717024)[3](https://www.cnblogs.com/xiaodi-js/p/18725053)。\n\n\n\n',1916407199693844483,'2025-04-27 14:17:57','2025-04-27 14:17:57','2025-05-17 17:48:27',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916378340617400322,'Elasticsearch 中倒排索引的原理及其核心优势 ','### Elasticsearch 中倒排索引的原理及其核心优势是什么？','[\"普通\",\"Elasticsearch\",\"倒排索引\"]','\n倒排索引是Elasticsearch实现快速搜索的核心数据结构，由两个核心部分组成：\n- **词典（Term Dictionary）**：存储所有文档中出现过的分词结果，按字典序排序[2]()[3]()。\n- **倒排列表（Posting List）**：记录每个词项对应的文档ID集合及位置信息。\n \n**优势**：\n1. **高效检索**：直接通过词项定位文档，时间复杂度为O(1)；\n2. **空间压缩**：使用FST（Finite State Transducer）压缩存储，降低内存占用[2]()；\n3. **支持复杂查询**：支持布尔逻辑、短语匹配、模糊查询等[3]()。',1916407199693844483,'2025-04-27 14:26:15','2025-04-27 14:26:15','2025-05-17 17:48:27',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916401120159248386,' Elasticsearch 中 分片（Shard）与副本（Replica）的设计意义',' ### Elasticsearch 中，分片（Shard）与副本（Replica）的设计意义是什么？请你简单阐述。','[\"普通\",\"Elasticsearch \",\"Shard\",\"Replica\",\"分片与副本\"]','\n- **分片**：  \n  1. 将索引数据水平拆分，支持分布式存储和并行处理；\n  2. 分片数在索引创建时固定，建议每个分片大小控制在10-50GB[4]()；\n- **副本**：  \n  1. 提供数据冗余，防止节点故障导致数据丢失；\n  2. 提升查询吞吐量（副本分片可分担读请求）[1]()[4]()。',1916407199693844483,'2025-04-27 15:56:46','2025-04-27 15:56:46','2025-05-17 17:48:28',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916402006881251329,'Elasticsearch 中的 Master 节点选举机制','### 你知道 Elasticsearch 中的 Master 节点选举机制吗？','[\"普通\",\"Elasticsearch\",\"Master 节点选举\",\"节点选举\"]','\nElasticsearch通过Zen Discovery模块实现Master选举：\n1. **候选节点筛选**：仅`node.master=true` 的节点参与选举；\n2. **投票规则**：采用类Paxos算法，需获得超过半数候选节点投票；\n3. **防脑裂机制**：通过`discovery.zen.minimum_master_nodes` 设置最小候选节点数（通常为`(候选节点数/2)+1`）[4]()。\n',1916407199693844483,'2025-04-27 16:00:18','2025-04-27 16:00:18','2025-05-17 17:48:28',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916402693220380673,'Elasticsearch 中文档写入与更新流程','### Elasticsearch 中的文档写入与更新流程是什么？大概阐述一下。','[\"普通\",\"Elasticsearch\"]','\n1. **写入阶段**：  \n   - 文档先写入内存缓冲区，同时记录到事务日志（Translog）；\n   - 每隔1秒（默认）将缓冲区数据刷新（Refresh）到文件系统缓存，生成新段（Segment）[2]()。\n2. **更新阶段**：  \n   - 旧文档被标记为删除（记录在`.del`文件），新文档写入新段；\n   - 段合并（Merge）时物理删除旧文档[2]()[4]()。',1916407199693844483,'2025-04-27 16:03:01','2025-04-27 16:03:01','2025-05-17 17:48:28',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916402873424457730,'Elasticsearch 中性能调优的常用策略','### Elasticsearch 中性能调优的常用策略','[\"普通\",\"Elasticsearch\",\"Elasticsearch优化\"]','\n- **索引设计优化**：  \n  1. 使用别名管理滚动索引（如按时间拆分）；\n  2. 冷热数据分离，SSD存储热数据[2]()。\n- **查询优化**：  \n  1. 避免深分页（改用Search After）；\n  2. 使用Filter代替Query（利用缓存机制）[2]()[3]()。\n- **硬件配置**：  \n  1. 为JVM分配不超过32GB内存（避免指针压缩失效）；\n  2. 使用SSD提升IO性能[4]()。',1916407199693844483,'2025-04-27 16:03:44','2025-04-27 16:03:44','2025-05-17 17:48:28',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916411245628534786,'MySQL 复制原理及流程是什么','### MySQL 复制原理及流程是什么？','[\"普通\",\"MySQL\",\"MySQL原理\"]','\nMySQL 主从复制通过三个线程实现：  \n1. **主库 Binlog 线程**：记录所有数据变更操作到二进制日志（Binary Log）[1]()[3]()  \n2. **从库 I/O 线程**：拉取主库的 Binlog 内容并写入中继日志（Relay Log）  \n3. **从库 SQL 线程**：解析 Relay Log 并执行 SQL 语句实现数据同步  \n \n**核心流程**：  \n- 主库数据更新 → 记录 Binlog → 从库 I/O 线程读取 → 写入 Relay Log → SQL 线程执行 → 数据同步完成  \n \n**应用场景**：读写分离、数据备份、负载均衡等[5]()。\n ',1916407199693844483,'2025-04-27 16:37:00','2025-04-27 16:37:00','2025-05-17 17:48:28',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916411397617528833,'MySQL中InnoDB 和 MyISAM 的核心区别','### MySQL中 InnoDB 和 MyISAM 的核心区别？','[\"普通\",\"MySQL\",\"MySQL原理\"]','\n| **维度**       | InnoDB                  | MyISAM              |\n|----------------|-------------------------|---------------------|\n| **事务支持**   | 支持 ACID 事务          | 不支持事务          |\n| **锁机制**     | 行级锁                  | 表级锁              |\n| **外键**       | 支持                    | 不支持              |\n| **崩溃恢复**   | 有 Redo Log 保障        | 需手动修复          |\n| **存储结构**   | 数据与索引集中存储      | 数据与索引分离存储  |  \n**典型场景**：InnoDB 适合高并发写操作，MyISAM 适合读密集型场景[1]()[3]()。\n ',1916407199693844483,'2025-04-27 16:37:37','2025-04-27 16:37:37','2025-05-17 17:48:27',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916411542182604802,'MySQL 中解释 CHAR 和 VARCHAR 的区别','### MySQL 中解释 CHAR 和 VARCHAR 的区别？','[\"普通\",\"MySQL\",\"MySQL类型\"]','\n- **存储方式**：  \n  - CHAR 是定长类型，长度固定（1-255字符），存储时用空格填充至指定长度[1]()  \n  - VARCHAR 是变长类型，长度可变（1-65535字节），存储实际字符长度+长度标识  \n- **性能对比**：  \n  - CHAR 查询更快（固定长度无需计算），但可能浪费存储空间  \n  - VARCHAR 节省空间，但频繁更新可能导致页分裂  \n**示例**：`CHAR(10)` 存入 \"abc\" 占 10 字节，`VARCHAR(10)` 存入 \"abc\" 占 4 字节[3]()。\n ',1916407199693844483,'2025-04-27 16:38:11','2025-04-27 16:38:11','2025-05-17 17:48:28',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916411695689936898,'MySQL中事务的四大隔离级别及解决的问题','### MySQL中事务的四大隔离级别及解决的问题?','[\"普通\",\"MySQL\",\"MySQL事务\"]','\n| **级别**           | 脏读 | 不可重复读 | 幻读 | 实现机制                 |\n|--------------------|------|------------|------|--------------------------|\n| 读未提交 (RU)      | ❌    | ❌          | ❌    | 无锁                     |\n| 读已提交 (RC)      | ✅    | ❌          | ❌    | 快照读                   |\n| 可重复读 (RR)      | ✅    | ✅          | ❌    | MVCC + 间隙锁（InnoDB） |\n| 串行化 (Serializable) | ✅    | ✅          | ✅    | 完全加锁                 |  \n**默认级别**：InnoDB 默认采用可重复读（RR）[6]()。\n ',1916407199693844483,'2025-04-27 16:38:48','2025-04-27 16:38:48','2025-05-17 17:48:27',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916411822005596162,'MySQL中 SQL 优化的常用手段有哪些？','### MySQL中 SQL 优化的常用手段有哪些？','[\"普通\",\"MySQL\",\"SQL优化\"]','\n1. **索引优化**：  \n   - 避免在 WHERE 子句中对字段进行函数操作（如 `WHERE YEAR(date)=2023`）  \n   - 使用覆盖索引减少回表查询[4]()  \n2. **语句优化**：  \n   - 用 EXISTS 替代 IN 子查询  \n   - 避免 SELECT *，明确指定字段  \n3. **分库分表**：对超 500 万行的表进行水平拆分[4]()  \n4. **配置调优**：调整 `innodb_buffer_pool_size` 提升缓存命中率  \n ',1916407199693844483,'2025-04-27 16:39:18','2025-04-27 16:39:18','2025-05-17 17:48:27',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916411989207330818,'MySQL中 B+ 树索引的优势是什么？','### MySQL 中B+ 树索引的优势是什么？','[\"普通\",\"MySQL\",\"B+树\",\"B+树索引\",\"MySQL索引\"]','\n- **减少磁盘 I/O**：树形结构层级低，每个节点存储大量键值（相比 B 树）  \n- **范围查询高效**：叶子节点形成双向链表，快速遍历范围数据  \n- **排序优化**：索引本身有序，避免 filesort 操作[4]()  \n**对比哈希索引**：B+树支持范围查询，哈希仅适合等值查询。\n ',1916407199693844483,'2025-04-27 16:39:58','2025-04-27 16:39:58','2025-05-17 17:48:27',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916412164558598145,'MySQL 中如何实现数据库备份与恢复','### MySQL 中如何实现数据库备份与恢复？','[\"普通\",\"MySQL\",\"MySQL数据安全性\",\"数据恢复\"]','\n- **物理备份**：  \n  - 使用 `xtrabackup` 工具热备份 InnoDB 数据文件  \n  - 优点：速度快，支持增量备份[1]()  \n- **逻辑备份**：  \n  - 用 `mysqldump` 导出 SQL 语句  \n  - 恢复命令：`mysql -u root -p dbname < backup.sql`   \n**注意事项**：定期验证备份文件可用性[4]()。',1916407199693844483,'2025-04-27 16:40:39','2025-04-27 16:40:39','2025-05-17 17:50:49',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916412278345871362,'MySQL主从数据不一致如何校验','### MySQL主从数据不一致如何校验？','[\"普通\",\"MySQL主从数据\"]','\n- **工具校验**：  \n  - Percona 的 `pt-table-checksum` 检查数据差异  \n  - `pt-table-sync` 修复不一致数据[4]()  \n- **手动校验**：  \n  - 对关键表执行 CHECKSUM TABLE 对比结果  \n  - 定期抽样查询高频数据  ',1916407199693844483,'2025-04-27 16:41:07','2025-04-27 16:41:07','2025-05-17 17:50:49',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916412400584667137,'MySQL高并发场景下如何优化数据库','### MySQL高并发场景下如何优化数据库？','[\"普通\",\"MySQL\",\"高并发\",\"MySQL并发\"]','\n1. **架构层**：  \n   - 读写分离：主库写，从库读  \n   - 引入缓存（Redis）减轻数据库压力  \n2. **SQL 层**：  \n   - 避免长事务，设置合理的事务超时时间  \n   - 批量操作代替逐条处理  \n3. **硬件层**：  \n   - 使用 SSD 提升磁盘 I/O 性能  \n   - 增加内存容量提升缓冲池命中率[4]()  \n ',1916407199693844483,'2025-04-27 16:41:36','2025-04-27 16:41:36','2025-05-17 17:50:49',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916412618139021314,'MySQL分库分表的常见策略','### MySQL分库分表的常见策略？','[\"普通\",\"MySQL\",\"MySQL策略\",\"分库分表\"]','\n- **垂直分表**：将大字段（如 TEXT）拆分到独立表  \n- **水平分库**：  \n  - 按哈希分片：均匀分布数据（如用户 ID % 8）  \n  - 按范围分片：按时间或 ID 区间划分（如2023年数据单独分库）  \n**工具支持**：ShardingSphere、MyCat 等中间件[4]()  \n ',1916407199693844483,'2025-04-27 16:42:28','2025-04-27 16:42:28','2025-05-17 17:50:49',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916449639993823233,'将二元查找树转换为排序双向链表','### 输入一棵二元查找树，要求不创建新节点，仅调整指针指向实现排序双向链表。  ','[\"普通\",\"数据结构\",\"算法\",\"排序\",\"链表\"]','  \n## 采用中序遍历递归实现：  \n1. 递归处理左子树，返回左子树最大节点  \n2. 将左子树最大节点的右指针指向当前根节点  \n3. 递归处理右子树，返回右子树最小节点  \n4. 将右子树最小节点的左指针指向当前根节点  \n时间复杂度：O(n)，空间复杂度：O(h)（h为树高度）[1]()',1916407199693844483,'2025-04-27 19:09:34','2025-04-27 19:09:34','2025-05-17 17:50:49',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916449833166688257,'设计包含min函数的栈  ','### 实现具有min函数（获取栈内最小值）的栈结构，要求所有操作时间复杂度O(1)。','[\"普通\",\"栈  \",\"min函数  \"]','### 双栈解法\n```python\nclass MinStack:\n    def __init__(self):\n        self.stack  = []\n        self.min_stack  = []\n \n    def push(self, val):\n        self.stack.append(val) \n        if not self.min_stack  or val <= self.min_stack[-1]: \n            self.min_stack.append(val) \n \n    def pop(self):\n        if self.stack.pop()  == self.min_stack[-1]: \n            self.min_stack.pop() \n \n    def top(self):\n        return self.stack[-1] \n \n    def get_min(self):\n        return self.min_stack[-1] \n```\n### 复杂度分析\n\n    所有操作时间复杂度：O(1)\n    空间复杂度：O(n)（最坏情况）\n### 优化方向\n\n    差值存储法（减少空间占用）\n    链表实现（支持多线程）2',1916407199693844483,'2025-04-27 19:10:20','2025-04-27 19:10:20','2025-05-17 17:50:49',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916450228760858626,'求子数组的最大和','### 给定含正负数的整型数组，求所有子数组和的最大值。','[\"普通\",\"子数组的最大和\",\"算法\"]','\n## 采用动态规划解法：\n\n``` python\ndef max_subarray(arr):\n    max_sum = curr_sum = arr[0]\n    for num in arr[1:]:\n        curr_sum = max(num, curr_sum + num)\n        max_sum = max(max_sum, curr_sum)\n    return max_sum \n```\n时间复杂度：O(n)，空间复杂度：O(1)',1916407199693844483,'2025-04-27 19:11:55','2025-04-27 19:11:55','2025-05-17 17:50:49',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916450491613696001,'二叉树路径和匹配','### 输入整数target和二叉树，打印所有从根节点到叶节点路径和为target的路径。','[\"普通\",\"二叉树\",\"数据结构\",\"搜索\",\"DFS\"]','### 前序遍历+回溯算法：\n\n1. 用栈记录当前路径\n2. 到达叶节点时计算路径和\n3. 匹配则输出路径\n   关键代码：\n\n```\njava复制void findPath(TreeNode root, int target) {\n    dfs(root, target, new ArrayList<>(), 0);\n}\nvoid dfs(TreeNode node, int target, List<Integer> path, int sum) {\n    if(node == null) return;\n    sum += node.val; \n    path.add(node.val); \n    if(node.left==null  && node.right==null  && sum==target)\n        System.out.println(path); \n    dfs(node.left,  target, path, sum);\n    dfs(node.right,  target, path, sum);\n    path.remove(path.size()-1); \n}\n```',1916407199693844483,'2025-04-27 19:12:57','2025-04-27 19:12:57','2025-05-17 17:50:49',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916450832900018177,'判断二叉搜索树的后序遍历','### 验证整数序列是否为某二叉搜索树的后序遍历结果。 ','[\"普通\",\"普通\",\"后序\",\"搜索\",\"二叉树\"]','\n### 递归分治法：\n\n1. 序列最后一个元素为根节点\n2. 找到第一个大于根节点的位置作为右子树起点\n3. 验证右子树所有节点大于根节点\n4. 递归验证左右子树\n   时间复杂度：O(n²)，最优解可通过单调栈优化到O(n)\n\n',1916407199693844483,'2025-04-27 19:14:19','2025-04-27 19:14:19','2025-05-17 17:50:49',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916452443781189634,'实现二叉树镜像（递归与非递归）','### 给定一棵二叉树的根节点，生成它的镜像（所有左右子节点交换）。','[\"普通\",\"二叉树镜像\",\"数据结构\",\"算法\"]','\n### 解法一：递归实现 \n```python \nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val  = val \n        self.left  = left \n        self.right  = right \n \ndef mirror_tree(root):\n    if not root:\n        return None \n    # 交换左右子树 \n    root.left,  root.right  = root.right,  root.left  \n    # 递归处理子树 \n    mirror_tree(root.left) \n    mirror_tree(root.right) \n    return root \n```\n**复杂度分析**\n\n- 时间复杂度：O(n)，每个节点访问一次\n- 空间复杂度：O(h)，h为树高（递归栈深度）\n\n### 解法二：非递归实现（队列层序遍历）\n\n```\npython复制from collections import deque \n \ndef mirror_tree_iterative(root):\n    if not root:\n        return None \n    queue = deque([root])\n    while queue:\n        node = queue.popleft() \n        node.left,  node.right  = node.right,  node.left  \n        if node.left: \n            queue.append(node.left) \n        if node.right: \n            queue.append(node.right) \n    return root \n```\n\n**复杂度分析**\n\n- 时间复杂度：O(n)，每个节点访问一次\n- 空间复杂度：O(n)，队列最大存储节点数\n\n**应用场景**\n\n- 图像处理中的对称变换\n- 二叉树结构对比（如判断两棵树是否互为镜像）',1916407199693844483,'2025-04-27 19:20:43','2025-04-27 19:20:43','2025-05-17 17:50:49',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916452612513845250,'反转单链表（迭代与递归）','### 给定单链表的头节点，返回反转后的链表头节点。','[\"普通\",\"数据结构\",\"算法\",\"单链表\"]','###  解法一：迭代法（三指针）\n\n```\npython复制class ListNode:\n    def __init__(self, val=0, next=None):\n        self.val  = val \n        self.next  = next \n \ndef reverse_list(head):\n    prev = None \n    curr = head \n    while curr:\n        next_temp = curr.next  \n        curr.next  = prev \n        prev = curr \n        curr = next_temp \n    return prev \n```\n\n**复杂度分析**\n\n- 时间复杂度：O(n)\n- 空间复杂度：O(1)\n\n### 解法二：递归法\n\n```\npython复制def reverse_list_recursive(head):\n    if not head or not head.next: \n        return head \n    new_head = reverse_list_recursive(head.next) \n    head.next.next  = head \n    head.next  = None \n    return new_head \n```\n\n**复杂度分析**\n\n- 时间复杂度：O(n)\n- 空间复杂度：O(n)（递归栈深度）\n\n**变体问题**\n\n- 反转链表的一部分（如第m到第n个节点）\n- K个一组反转链表',1916407199693844483,'2025-04-27 19:21:23','2025-04-27 19:21:23','2025-05-17 17:50:49',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916452792462069761,'求子数组最大和','### 给定整数数组（含负数），找出连续子数组的最大和。','[\"普通\",\"动态规划\",\"算法\"]','- \n\n### Kadane算法实现\n\n```\npython复制def max_subarray(nums):\n    max_current = max_global = nums[0]\n    for num in nums[1:]:\n        max_current = max(num, max_current + num)\n        max_global = max(max_global, max_current)\n    return max_global \n```\n\n**复杂度分析**\n\n- 时间复杂度：O(n)\n- 空间复杂度：O(1)\n\n**边界案例**\n\n- 全负数数组：返回最大的单个负数\n- 全正数数组：返回整个数组的和\n\n**扩展应用**\n\n- 股票买卖问题（最大利润计算）\n- 二维矩阵中的最大子矩阵和',1916407199693844483,'2025-04-27 19:22:06','2025-04-27 19:22:06','2025-05-17 17:50:49',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916453798956617730,'快速排序算法实现与优化','### 手写快速排序算法，并分析其优化策略。','[\"普通\",\"数据结构\",\"算法\",\"排序\"]','### 基础实现\n```python\ndef quick_sort(arr):\n    if len(arr) <= 1:\n        return arr \n    pivot = arr[len(arr)//2]\n    left = [x for x in arr if x < pivot]\n    middle = [x for x in arr if x == pivot]\n    right = [x for x in arr if x > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n```\n### 复杂度分析\n    平均时间复杂度：O(n log n)\n    最坏时间复杂度：O(n²)（已排序数组）\n### 优化策略\n    三数取中法：选择首、中、尾的中位数作为基准\n    尾递归优化：减少递归栈深度\n    插入排序混合：小数组切换为插入排序（阈值通常为5-15）\n### 双指针分区：减少内存占用\n```python\ndef partition(arr, low, high):\n    pivot = arr[high]\n    i = low - 1 \n    for j in range(low, high):\n        if arr[j] <= pivot:\n            i += 1 \n            arr[i], arr[j] = arr[j], arr[i]\n    arr[i+1], arr[high] = arr[high], arr[i+1]\n    return i+1 \n```\n### 应用场景\n\n    大规模数据排序\n    内存敏感场景（原地排序）',1916407199693844483,'2025-04-27 19:26:06','2025-04-27 19:26:06','2025-05-17 17:50:49',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916455222352400386,'TCP如何实现可靠传输','### TCP如何实现可靠传输？详细说明其核心机制 ','[\"普通\",\"TCP协议\",\"计算机网络\"]','\nTCP通过以下机制保障数据传输的可靠性（综合[3]()[4]()）：  \n1. **三次握手建立连接**：  \n   - 客户端发送SYN=1、seq=x报文  \n   - 服务端返回SYN=1、ACK=1、seq=y、ack=x+1报文  \n   - 客户端发送ACK=1、seq=x+1、ack=y+1报文  \n   - **意义**：确认双方收发能力正常，协商初始序列号防止历史连接混淆  \n \n2. **滑动窗口协议**：  \n   - 发送窗口管理待确认数据（动态调整大小）  \n   - 接收窗口通过ACK报文反馈可接收数据范围  \n   - **优势**：实现流量控制与连续发送的平衡  \n \n3. **超时重传机制**：  \n   - 每个数据包设置RTO（Retransmission Timeout）计时器  \n   - 未收到ACK时触发重传，采用指数退避策略（如初始RTO=1s，失败后翻倍）  \n   - **优化**：通过快重传机制（收到3个重复ACK立即重传）减少等待时间  \n \n4. **数据校验机制**：  \n   - 使用16位校验和字段验证数据完整性  \n   - 发现错误时直接丢弃报文，由发送端重传  \n \n5. **有序传输保证**：  \n   - 通过序列号（seq）和确认号（ack）确保数据按序到达  \n   - 接收端对乱序数据暂存缓冲区，等待缺失数据重传后重组  \n \n> **应用场景**：文件传输（FTP）、网页加载（HTTP）、邮件传输（SMTP）等需要完整数据交付的场景均依赖TCP可靠性[1]()。\n ',1916407199693844483,'2025-04-27 19:31:45','2025-04-27 19:31:45','2025-05-17 17:50:49',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916455406704644098,'HTTPS的完整握手过程','### HTTPS的完整握手过程包含哪些步骤？','[\"普通\",\"HTTPS\",\"计算机网络\",\"握手\"]','\nHTTPS握手过程分为以下阶段（基于TLS 1.2协议，参考[3]()[5]()）：  \n \n### 阶段一：TCP连接建立 \n客户端通过三次握手与服务器建立TCP连接（默认端口443）  \n \n### 阶段二：TLS握手协商 \n1. **Client Hello**：  \n   - 客户端发送支持的TLS版本、密码套件列表、随机数（Client Random）  \n   - 包含SNI（Server Name Indication）扩展指明目标域名  \n \n2. **Server Hello**：  \n   - 服务器选择TLS版本、密码套件，返回随机数（Server Random）  \n   - 发送数字证书链（包含CA签名的公钥）  \n \n3. **证书验证**：  \n   - 客户端用预置CA公钥验证证书合法性（有效期、域名匹配等）  \n   - 生成预备主密钥（Pre-Master Secret），用服务器公钥加密后发送  \n \n4. **密钥交换**：  \n   - 双方通过Client Random、Server Random、Pre-Master Secret生成会话密钥  \n   - 启用加密通信前发送Change Cipher Spec通知  ',1916407199693844483,'2025-04-27 19:32:29','2025-04-27 19:32:29','2025-05-17 17:50:49',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916455685705551873,'DNS解析的全过程','### 详细描述DNS解析的全过程（含递归与迭代查询）','[\"普通\",\"计算机网路\",\"DNS解析\"]','\nDNS解析流程如下（综合[3]()[4]()）：  \n \n### 递归查询过程（客户端→本地DNS）：\n1. 浏览器缓存查询 → 无结果则检查hosts文件  \n2. 向本地DNS服务器（如ISP提供）发起查询请求  \n3. 本地DNS服务器执行迭代查询：  \n   - 查询根域名服务器（返回顶级域.com的NS记录）  \n   - 查询.com顶级域服务器（返回权威域名服务器的NS记录）  \n   - 查询权威域名服务器（返回目标域名的A记录）  \n4. 本地DNS缓存结果并返回给客户端  \n \n### 迭代查询过程（本地DNS→外部服务器）：\n1. 根域名服务器仅返回下一级NS地址，不直接解析完整域名  \n2. 每级服务器只负责管辖域内的记录查询  \n \n### 记录类型说明：\n- **A记录**：域名→IPv4地址  \n- **AAAA记录**：域名→IPv6地址  \n- **CNAME**：域名别名映射  \n- **MX**：邮件服务器地址  \n \n> **优化机制**：  \n> - TTL（Time-To-Live）控制缓存有效期  \n> - DNS负载均衡（同一域名返回多个IP地址）[1]()',1916407199693844483,'2025-04-27 19:33:36','2025-04-27 19:33:36','2025-05-17 17:50:49',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916455842266337281,'解释TCP拥塞控制的四大核心算法 ','### 解释TCP拥塞控制的四大核心算法 ','[\"普通\",\"TCP拥塞控制\",\"TCP协议\",\"计算机网络\"]','\nTCP拥塞控制通过四个算法阶段实现（参考[3]()[4]()）：  \n \n| 阶段        | 触发条件               | 窗口调整策略                     |\n|-------------|------------------------|----------------------------------|\n| **慢启动**  | 连接建立/超时重传      | 窗口按指数增长（cwnd=1→2→4→8…） |\n| **拥塞避免**| cwnd≥ssthresh          | 窗口线性增长（每RTT增加1）       |\n| **快重传**  | 收到3个重复ACK         | 立即重传丢失包，不等待超时       |\n| **快恢复**  | 快重传后               | cwnd=ssthresh，进入拥塞避免阶段  |\n \n### 参数说明：\n- **cwnd（拥塞窗口）**：发送方可传输的最大未确认数据量  \n- **ssthresh（慢启动阈值）**：初始值通常为65535字节，超时后设为当前cwnd/2  \n \n### 典型场景：\n当网络出现丢包时：  \n1. 若因超时触发：判定为严重拥塞，ssthresh=cwnd/2，cwnd重置为1，重启慢启动  \n2. 若因重复ACK触发：执行快重传和快恢复，避免过度降低吞吐量  \n \n> **现代优化**：BBR算法基于带宽和延迟测量替代丢包反馈，更适用于高带宽网络[4]()。\n ',1916407199693844483,'2025-04-27 19:34:13','2025-04-27 19:34:13','2025-05-17 17:50:49',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916456069744414721,'HTTP/2的核心特性及与HTTP/1.1的主要区别','### HTTP/2的核心特性有哪些？与HTTP/1.1的主要区别是什么？','[\"普通\",\"HTTP2\",\"HTTP1.1\",\"计算机网络\",\"HTTP协议\"]','\nHTTP/2的革新特性如下（对比HTTP/1.1，参考[3]()[5]()）：  \n \n### 核心特性：\n1. **二进制分帧层**：  \n   - 将报文分解为HEADERS帧和DATA帧  \n   - 实现多路复用，解决队头阻塞问题  \n \n2. **头部压缩（HPACK）**：  \n   - 使用静态字典（61个常用头字段）和动态字典压缩头部大小  \n   - 典型请求头部从500+字节压缩到30字节  \n \n3. **服务器推送**：  \n   - 服务器可主动推送CSS/JS等依赖资源  \n   - 客户端通过PUSH_PROMISE帧确认是否需要  \n \n4. **流优先级**：  \n   - 支持给数据流设置1-256的优先级权重  \n   - 优化关键资源（如HTML）的加载顺序  \n \n### 与HTTP/1.1对比：\n| 特性         | HTTP/1.1                  | HTTP/2                     |\n|--------------|---------------------------|----------------------------|\n| 连接管理     | 每个域名6-8个TCP连接      | 单连接多路复用             |\n| 数据格式     | 文本格式                  | 二进制分帧                 |\n| 头部处理     | 重复发送完整头部          | HPACK压缩                 |\n| 资源加载     | 按顺序加载                | 优先级流控制              |\n| 服务器主动性 | 被动响应                  | 支持主动推送               |\n \n> **性能影响**：HTTP/2可使页面加载速度提升30%-50%，尤其在高延迟网络中效果显著[5]()。\n \n---',1916407199693844483,'2025-04-27 19:35:07','2025-04-27 19:35:07','2025-05-17 17:50:49',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916456730787696642,'冯·诺依曼体系结构的核心原理及其对现代计算机的影响','### 冯·诺依曼体系结构的核心原理及其对现代计算机的影响','[\"普通\",\"计算机组成原理\",\"冯·诺依曼\"]','\n### **冯·诺依曼体系结构是现代计算机设计的基石[1]()[2]()，其核心原理包括**：  \n1. **存储程序控制**：程序与数据以二进制形式存储在同一存储器中，CPU按顺序读取并执行指令[4]()[5]()。  \n2. **五大组件**：运算器、控制器、存储器、输入设备和输出设备协同工作，其中存储器为核心交互介质[5]()[6]()。  \n3. **顺序执行与指令控制**：指令按线性顺序处理，通过操作码和地址码实现流程控制[2]()[6]()。  \n \n### **对现代计算机的影响**：  \n- **硬件标准化**：统一了计算机基础架构，使不同厂商设备可兼容[1]()[6]()。  \n- **性能瓶颈突破**：通过缓存技术（如多级存储金字塔）缓解内存与CPU速度差异问题[5]()。  \n- **扩展性提升**：基于总线结构实现模块化扩展（如增加GPU、外设）[6]()。  ',1916407199693844483,'2025-04-27 19:37:45','2025-04-27 19:37:45','2025-05-17 17:50:49',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916456878821462018,' 计算机存储层次结构的设计意义与实现方式 ','###  计算机存储层次结构的设计意义与实现方式 ','[\"普通\",\"计算机组成原理\",\"存储层次结构\"]','\n### 存储层次结构通过多级存储介质平衡速度、容量和成本[5]()[6]()：  \n1. **层次划分**（由高到低）：  \n   - 寄存器 → 高速缓存（L1/L2/L3） → 主存（RAM） → 辅助存储（磁盘/SSD） → 离线存储（磁带/云存储）  \n2. **设计意义**：  \n   - **速度优化**：利用局部性原理（时间/空间局部性），高频数据存放于高速缓存[5]()。  \n   - **成本控制**：低速大容量存储承担冷数据保存，降低单位存储成本[6]()。  \n3. **实现技术**：  \n   - **缓存映射策略**：直接映射、组相联映射、全相联映射[5]()。  \n   - **预取算法**：预测并加载后续可能访问的数据[6]()。  ',1916407199693844483,'2025-04-27 19:38:20','2025-04-27 19:38:20','2025-05-17 17:50:49',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916457018852495361,'指令周期的详细流程与优化技术 ','### 指令周期（Fetch-Decode-Execute）的详细流程与优化技术 ','[\"普通\",\"指令周期\",\"Fetch-Decode-Execut\"]','\n**基础流程**[5]()[6]()：  \n1. **取指阶段（Fetch）**：  \n   - PC寄存器指向内存地址，读取下一条指令到指令寄存器（IR）。  \n   - PC值自动递增（或跳转指令修改）。  \n2. **译码阶段（Decode）**：  \n   - 控制器解析操作码和地址码，生成控制信号（如ALU操作类型）。  \n3. **执行阶段（Execute）**：  \n   - ALU执行运算，结果写入寄存器或内存（如ADD指令）。  \n \n**优化技术**：  \n- **流水线技术**：将指令周期拆分为更细粒度阶段（如5级流水线），并行处理多条指令[6]()。  \n- **分支预测**：通过历史记录预测跳转目标，减少流水线停顿[5]()。  \n- **超标量架构**：多执行单元并行处理指令（如Intel超线程）[6]()。  ',1916407199693844483,'2025-04-27 19:38:54','2025-04-27 19:38:54','2025-05-17 17:50:49',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916457201204056066,'计算机总线的作用与常见总线类型对比 ','### 计算机总线的作用与常见总线类型对比 ','[\"普通\",\"计算机总线\",\"计算机组成原理\"]','\n**总线作用**[5]()[6]()：  \n1. **数据通路**：传输指令、数据、控制信号。  \n2. **模块化设计**：标准化接口实现组件可替换性（如PCIe插槽）。  \n3. **性能调控**：总线带宽决定系统吞吐量上限。  \n \n**常见总线类型**：  \n| 总线类型 | 带宽 | 应用场景 | 特点 |  \n|----------|------|----------|------|  \n| **系统总线** | 高（如DDR5 51.2GB/s） | CPU与内存通信 | 低延迟、点对点连接[5]() |  \n| **I/O总线**（如USB 4） | 40Gbps | 外设连接 | 热插拔、协议兼容性强[6]() |  \n| **扩展总线**（如PCIe 5.0） | 128GB/s | GPU/SSD扩展 | 全双工、通道聚合[5]() |  ',1916407199693844483,'2025-04-27 19:39:37','2025-04-27 19:39:37','2025-05-17 17:50:49',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916457374667886593,'中断机制的工作原理及其在操作系统中的应用 ','### 中断机制的工作原理及其在操作系统中的应用 ','[\"普通\",\"计算机组成原理\",\"中断机制\",\"操作系统\"]','\n### **中断机制流程**[5]()[6]()：  \n1. **中断触发**：硬件（如键盘输入）或软件（系统调用）发出中断请求（IRQ）。  \n2. **现场保存**：CPU将当前程序计数器（PC）和寄存器值压入堆栈。  \n3. **中断处理**：  \n   - 查询中断向量表，跳转到对应的中断服务程序（ISR）。  \n   - 执行设备驱动或系统服务（如磁盘读写完成通知）。  \n4. **恢复现场**：从堆栈恢复寄存器值，继续原程序执行。  \n \n### **操作系统中的应用**：  \n- **多任务调度**：时钟中断触发进程切换（时间片轮转）[6]()。  \n- **异常处理**：除零错误、缺页中断触发保护模式处理[5]()。  \n- **设备管理**：DMA传输完成后通过中断通知CPU释放资源[6]()。  ',1916407199693844483,'2025-04-27 19:40:18','2025-04-27 19:40:18','2025-05-17 17:50:49',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916459725503975426,'Redis 的 核心数据结构及其典型应用场景','### Redis 的 核心数据结构及其典型应用场景是什么？','[\"普通\",\"Redis \",\"核心数据结构\"]','\nRedis 的核心数据结构包括 String、List、Hash、Set 和 Sorted Set（ZSet），每种结构对应不同的应用场景：\n \n1. **String**  \n   - **特性**：支持二进制安全数据，最大容量 512MB。  \n   - **应用场景**：  \n     - **缓存**：存储序列化的用户信息（如 `SET user:1001 \"{name:\'John\', age:28}\"`）[1]()。  \n     - **计数器**：通过 `INCR` 实现文章浏览量统计[3]()。  \n     - **分布式锁**：利用 `SETNX` + `EXPIRE` 实现互斥操作[5]()。\n \n2. **List**  \n   - **特性**：双向链表结构，支持阻塞操作。  \n   - **应用场景**：  \n     - **消息队列**：`LPUSH` + `BRPOP` 实现异步任务处理[3]()。  \n     - **最新动态**：固定长度列表存储用户动态（如 `LPUSH news:1001 \"新发布文章\"`，`LTRIM` 保持列表长度）[4]()。\n \n3. **Hash**  \n   - **特性**：键值对集合，适合存储对象。  \n   - **应用场景**：  \n     - **用户属性存储**：单条命令操作用户多字段（如 `HMSET user:1001 name John age 28`）[5]()。  \n     - **购物车**：商品ID为字段，数量为值（如 `HSET cart:1001 item_001 2`）[4]()。\n \n4. **Set**  \n   - **特性**：无序唯一集合，支持交并差运算。  \n   - **应用场景**：  \n     - **标签系统**：存储文章标签（如 `SADD article:2001 tags:tech`）[3]()。  \n     - **好友推荐**：通过 `SINTER` 计算共同好友[2]()。\n \n5. **Sorted Set**  \n   - **特性**：元素按分数排序，底层为跳跃列表。  \n   - **应用场景**：  \n     - **排行榜**：`ZADD` + `ZREVRANGE` 实现实时排名（如音乐播放量排行）[1]()。  \n     - **延迟队列**：用时间戳作分数，定时扫描过期任务[5]()。\n ',1916407199693844483,'2025-04-27 19:49:39','2025-04-27 19:49:39','2025-05-17 17:50:49',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916459890705027073,'Redis 持久化机制 RDB 和 AOF 的优劣对比及适用场景','### Redis 持久化机制 RDB 和 AOF 的优劣对比及适用场景？','[\"普通\",\"Redis\",\"Redis 持久化机制\",\"RDB \",\"AOF \"]','\nRedis 提供两种持久化方案，各有适用场景：\n \n1. **RDB（Redis Database）**  \n   - **原理**：定时生成内存快照（二进制文件），默认保存为 `dump.rdb` 。  \n   - **优点**：  \n     - 文件紧凑（压缩存储），适合备份与灾难恢复[1]()。  \n     - 重启加载速度快（直接载入二进制数据）。  \n   - **缺点**：  \n     - 可能丢失最后一次快照后的数据（如 5 分钟间隔时宕机）。  \n     - 大数据量时 `SAVE` 会阻塞主线程[5]()。  \n   - **适用场景**：对数据完整性要求不高，需快速恢复的缓存系统。\n \n2. **AOF（Append-Only File）**  \n   - **原理**：记录所有写操作命令（文本日志），支持 `fsync` 策略（每秒/每次写入）。  \n   - **优点**：  \n     - 数据丢失风险低（如 `appendfsync always` 模式零丢失）。  \n     - 可读性强（日志文件可人工分析）[2]()。  \n   - **缺点**：  \n     - 文件体积大（需定期 `BGREWRITEAOF` 压缩）。  \n     - 恢复速度慢（需重新执行所有命令）[4]()。  \n   - **适用场景**：金融交易等对数据一致性要求高的场景。\n \n**混合模式建议**：生产环境通常同时开启 RDB 和 AOF，利用 RDB 快速恢复 + AOF 保证数据完整性。\n ',1916407199693844483,'2025-04-27 19:50:18','2025-04-27 19:50:18','2025-05-17 17:50:49',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916460086386085890,'Redis 集群方案（Cluster/Sentinel）','### Redis 集群方案（Cluster/Sentinel）如何实现高可用？','[\"普通\",\"Redis\",\"Redis 集群方案\",\"Cluster/Sentinel\"]','\nRedis 高可用方案主要有哨兵模式和集群模式：\n \n1. **哨兵模式（Sentinel）**  \n   - **架构**：由 3+ Sentinel 节点监控主从节点，自动故障转移。  \n   - **核心功能**：  \n     - **监控**：定期检查节点健康状态。  \n     - **自动故障转移**：主节点宕机时选举新主，更新客户端连接。  \n     - **配置中心**：客户端通过 Sentinel 获取最新主节点地址[2]()。  \n   - **缺点**：  \n     - 数据分片需客户端实现（如一致性哈希）。  \n     - 扩容复杂（需手动迁移数据）[5]()。\n \n2. **集群模式（Cluster）**  \n   - **架构**：16384 个哈希槽分片，每个节点负责部分槽位。  \n   - **核心机制**：  \n     - **数据分片**：`CRC16(key) % 16384` 计算槽位，支持跨节点操作（需 `ASK` 重定向）。  \n     - **故障恢复**：主节点宕机时，从节点自动升级为主[1]()。  \n     - **Gossip 协议**：节点间通信维护拓扑状态。  \n   - **优点**：  \n     - 水平扩展能力（支持动态增删节点）。  \n     - 无单点故障（数据分片 + 主从复制）[4]()。\n \n**选型建议**：中小规模用 Sentinel，超 100GB 数据量用 Cluster。',1916407199693844483,'2025-04-27 19:51:05','2025-04-27 19:51:05','2025-05-17 17:50:49',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916460227167899649,'Redis 内存优化策略','### Redis 内存优化策略有哪些？','[\"普通\",\"Redis\",\"Redis 内存优化\",\"Redis优化\"]','Redis 内存优化需结合数据结构与配置策略：\n \n1. **数据结构优化**  \n   - **压缩列表（ziplist）**：对小规模 Hash/List 使用连续内存存储（如 `hash-max-ziplist-entries 512`）[4]()。  \n   - **整数集合（intset）**：当 Set 元素全为整数时启用（如 `SADD set:1001 1 2 3`）[3]()。  \n   - **短结构存储**：String 长度 ≤44 字节时使用 embstr 编码（减少内存碎片）[5]()。\n \n2. **内存回收策略**  \n   - **过期键管理**：主动删除（定期采样） + 惰性删除（访问时检查）。  \n   - **淘汰策略**：根据场景选择：  \n     - `volatile-lru`：淘汰最近最少使用的过期键。  \n     - `allkeys-lfu`：淘汰全库访问频率最低的键[2]()。\n \n3. **共享对象池**  \n   - 复用 0~9999 的整数对象（通过 `redisObject` 的 `refcount` 计数）[1]()。\n \n4. **分片与分库**  \n   - **业务分库**：不同业务使用不同 DB（如用户数据存 DB0，商品数据存 DB1）。  \n   - **集群分片**：Cluster 模式自动分散数据[5]()。\n ',1916407199693844483,'2025-04-27 19:51:38','2025-04-27 19:51:38','2025-05-17 17:50:49',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916460490901540866,' Redis 实现电商场景下的秒杀系统的思路','### 如何用 Redis 实现电商场景下的秒杀系统？','[\"普通\",\" Redis \",\"秒杀系统\",\"秒杀系统缓存\",\"热点数据缓存\",\"异步订单处理\"]','\n电商秒杀系统需解决高并发、库存精准扣减问题，Redis 核心应用如下：\n \n1. **库存预扣减**  \n   - **原子操作**：使用 `DECR` 或 Lua 脚本保证原子性（避免超卖）：  \n     ```lua \n     local stock = redis.call(\'GET\',  KEYS[1])\n     if stock <= 0 then return 0 end \n     redis.call(\'DECR\',  KEYS[1])\n     return 1 \n     ```  \n   - **库存预热**：活动前通过 `SET seckill:1001 500` 初始化库存[3]()。\n \n2. **请求限流**  \n   - **令牌桶算法**：`INCR` + `EXPIRE` 控制每秒请求量。  \n   - **黑名单**：对恶意 IP 使用 `SADD blacklist 192.168.1.1`[1]()。\n \n3. **分布式锁**  \n   - **防止重复下单**：用户 ID 作为锁键，`SETNX user_lock:1001 true` 确保单用户一次请求[5]()。\n \n4. **异步订单处理**  \n   - **消息队列**：秒杀成功订单通过 `LPUSH order_queue \"{user:1001, item:2001}\"` 进入队列，由后台服务消费[4]()。\n \n5. **热点数据缓存**  \n   - **商品详情**：`EXPIRE` 设置短过期时间（如 30 秒），防止缓存击穿。  \n   - **本地缓存**：结合 Guava Cache 减少 Redis 访问压力[2]()。\n ',1916407199693844483,'2025-04-27 19:52:41','2025-04-27 19:52:41','2025-05-17 17:50:49',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916463279354531841,'Vue3 响应式系统如何基于 Proxy 实现？对比 Vue2 的 Object.defineProperty  有哪些突破？','### Vue3 响应式系统如何基于 Proxy 实现？对比 Vue2 的 Object.defineProperty  有哪些突破？','[\"普通\",\"Vue3\",\"Vue2\",\"Proxy \",\"响应式系统\",\"defineProperty \"]','### 1.1 代理对象创建 \n```javascript \nconst handler = {\n  get(target, key, receiver) {\n    track(target, key)  // 依赖收集 \n    return Reflect.get(...arguments) \n  },\n  set(target, key, value, receiver) {\n    trigger(target, key)  // 触发更新 \n    return Reflect.set(...arguments) \n  }\n}\nconst reactive = (obj) => new Proxy(obj, handler)\n```\n通过 `Proxy` 拦截对象属性的 **读取（get）** 和 **写入（set）** 操作，配合 `Reflect` 保证操作原子性[1](https://blog.csdn.net/Rverdoser/article/details/141866783)[5](https://blog.csdn.net/caihuayuan4/article/details/145461650)。\n\n### 1.2 突破性改进\n\n| **维度**         | Vue2（Object.defineProperty ） | Vue3（Proxy）                  |\n| ---------------- | ------------------------------ | ------------------------------ |\n| **嵌套对象监听** | 需递归初始化属性               | 惰性监听（访问时动态代理）     |\n| **数组操作支持** | 无法检测索引/长度变化          | 支持 push/pop/splice 等操作    |\n| **动态属性增删** | 需 set/*se**t*/delete 特殊处理 | 直接响应属性增删               |\n| **数据结构支持** | 仅支持 Object/Array            | 支持 Map/Set/WeakMap 等        |\n| **内存占用**     | 初始化时全量遍历               | 按需代理（首次访问时生成代理） |\n\n### 1.3 性能优化\n\n- **惰性代理**：仅在属性被访问时创建代理，减少初始化开销[3](https://blog.csdn.net/qq_47027106/article/details/119960649)\n- **批量更新**：通过调度器合并多次数据变更，避免重复渲染[5](https://blog.csdn.net/caihuayuan4/article/details/145461650)',1916407199693844483,'2025-04-27 20:03:46','2025-04-27 20:03:46','2025-05-17 17:50:49',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916463507793104898,'Composition API 解决了 Options API 的痛点','### Composition API 解决了 Options API 哪些痛点？请结合代码示例说明','[\"普通\",\"Composition API\",\"Options API\",\"VUE3\"]','Composition API 的核心价值在于 **逻辑关注点聚合**，对比 Options API 有三大优势：\n\n### 2.1 逻辑复用能力提升\n\n```\njavascript复制// 复用逻辑封装（用户权限检查）\nfunction usePermission() {\n  const hasPermission = ref(false)\n  const check = async (role) => { \n    /* 异步验证逻辑 */ \n  }\n  return { hasPermission, check }\n}\n \n// 组件使用 \nexport default {\n  setup() {\n    const { hasPermission, check } = usePermission()\n    return { hasPermission, check }\n  }\n}\n```\n\n通过自定义 Hook 实现跨组件逻辑复用，避免 Mixin 的命名冲突问题[3](https://blog.csdn.net/qq_47027106/article/details/119960649)。\n\n### 2.2 代码组织优化\n\n```\njavascript复制// Options API：相同功能代码分散 \nexport default {\n  data() { return { count: 0 } },\n  methods: { increment() { this.count++  } },\n  mounted() { console.log(this.count)  }\n}\n \n// Composition API：按功能聚合 \nsetup() {\n  const count = ref(0)\n  const increment = () => count.value++ \n  onMounted(() => console.log(count.value)) \n  return { count, increment }\n}\n```\n\n同一功能的响应式数据、方法与生命周期集中在同一代码块[3](https://blog.csdn.net/qq_47027106/article/details/119960649)。\n\n### 2.3 TypeScript 支持强化\n\n- **类型推断**：基于函数参数和返回值的类型推导更精准\n- **泛型支持**：可定义带泛型的组合式函数，如 `useFetch<T>()`',1916407199693844483,'2025-04-27 20:04:41','2025-04-27 20:04:41','2025-05-17 17:50:49',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916463770960515073,' Vue3 的虚拟 DOM 优化包含的关键技术？如何提升渲染性能？','###  Vue3 的虚拟 DOM 优化包含哪些关键技术？如何提升渲染性能？','[\"普通\",\"Vue3\",\"虚拟 DOM 优化\",\"DOM\"]','- \n\n### 3.1 静态提升（Static Hoisting）\n\n```\nhtml复制<div>\n  <h1>Static Title</h1>  <!-- 静态节点 -->\n  <p>{{ dynamicText }}</p>\n</div>\n```\n\n- **优化原理**：将静态节点转换为常量，避免重复创建 VNode[5](https://blog.csdn.net/caihuayuan4/article/details/145461650)\n- **性能收益**：减少 40% 的虚拟 DOM 生成时间[3](https://blog.csdn.net/qq_47027106/article/details/119960649)\n\n### 3.2 补丁标志（Patch Flags）\n\n```\njavascript复制// 动态节点标记 \nconst vnode = {\n  type: \'div\',\n  children: [\n    { type: \'p\', props: { class: _ctx.dynamicClass  }, patchFlag: 1 /* CLASS */ }\n  ]\n}\n```\n\n- **优化原理**：标记动态属性类型，diff 时跳过静态内容比对[5](https://blog.csdn.net/caihuayuan4/article/details/145461650)\n- **性能收益**：复杂组件 diff 速度提升 200%[1](https://blog.csdn.net/Rverdoser/article/details/141866783)\n\n### 3.3 事件缓存（Event Cache）\n\n```\njavascript复制// 内联事件缓存 \nconst render = () => h(\'button\', { \n  onClick: _cache[1] || (_cache[1] = e => _ctx.handleClick(e))  \n})\n```\n\n- **优化原理**：避免每次渲染重新生成事件处理函数[5](https://blog.csdn.net/caihuayuan4/article/details/145461650)\n- **性能收益**：高频事件组件渲染速度提升 30%',1916407199693844483,'2025-04-27 20:05:43','2025-04-27 20:05:43','2025-05-17 17:50:49',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916464134023663618,'Vue Router 的动态路由匹配机制如何实现？导航守卫有哪些类型？','### Vue Router 的动态路由匹配机制如何实现？导航守卫有哪些类型？','[\"普通\",\"Vue Router\",\"动态路由\",\"路由匹配机制\",\"导航守卫\"]','### 4.1 动态路由实现原理\n\n```\njavascript复制const routes = [\n  { path: \'/user/:id\', component: User }\n]\n \n// 路由参数获取 \nimport { useRoute } from \'vue-router\'\nsetup() {\n  const route = useRoute()\n  console.log(route.params.id)   // 输出动态ID \n}\n```\n\n- **路径解析**：将 `/user/123` 映射为 `{ path: \'/user/:id\', params: { id: 123 } }`\n- **组件复用**：相同路由不同参数时触发 `beforeRouteUpdate` 守卫[3](https://blog.csdn.net/qq_47027106/article/details/119960649)\n\n### 4.2 导航守卫类型\n\n| **类型**     | 触发时机                     | 典型应用场景           |\n| ------------ | ---------------------------- | ---------------------- |\n| 全局前置守卫 | 路由跳转前（异步）           | 权限校验、登录状态检查 |\n| 路由独享守卫 | 特定路由配置中定义           | 页面访问频率限制       |\n| 组件内守卫   | 在组件中通过选项/函数定义    | 数据预加载、表单防丢失 |\n| 全局解析守卫 | 所有组件守卫和异步组件解析后 | 确保资源加载完成的跳转 |\n\n------',1916407199693844483,'2025-04-27 20:07:10','2025-04-27 20:07:10','2025-05-17 17:50:49',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916464313040752642,'Vuex 与 Pinia 的核心差异是什么？在 Vue3 项目中如何选择？','### Vuex 与 Pinia 的核心差异是什么？在 Vue3 项目中如何选择？','[\"普通\",\"Pinia\",\"Vuex \",\"VUE3\"]','###  5.1 架构对比\n\n| **特性**        | Vuex                    | Pinia                 |\n| --------------- | ----------------------- | --------------------- |\n| 模块系统        | 基于 modules 的嵌套结构 | 扁平化 store 独立管理 |\n| TypeScript 支持 | 需额外类型声明          | 原生支持类型推导      |\n| Composition API | 需通过 mapHelpers 混入  | 直接使用 setup 语法   |\n| 插件机制        | 支持中间件              | 更简洁的插件 API      |\n| 体积            | 23KB (gzip)             | 8KB (gzip)            |\n\n### 5.2 选型建议\n\n- **新项目优先 Pinia**：更简洁的 API 设计和更好的 TS 支持[3](https://blog.csdn.net/qq_47027106/article/details/119960649)\n- **存量 Vuex 项目**：可通过 `pinia-plugin-vuex` 渐进迁移\n- **复杂状态管理**：Vuex 的严格模式（strict mode）更适合大型协作项目',1916407199693844483,'2025-04-27 20:07:53','2025-04-27 20:07:53','2025-05-17 17:50:49',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916707786532704258,'请你自我介绍一下你自己','### 请你自我介绍一下你自己（一般为面试第一个问题，很好的破冰方式）','[\"普通\",\"自我介绍\"]','# 回答思路：  \n要体现里程碑性质的成就，一般人回答这个问题过于平常，只说姓名、年龄、爱好、工作经验，这些在简历上都有，其实，企业最希望知道的是求职者能否胜任工作，包括:最强的技能、最深入研究的知识领域、个性中最积极的部分、做过的最成功的事、主要的成就等。\n这些都可以和学习无关，也可以和学习有关，但要突出积极的个性和做事的能力，符合事实并且体现里程碑性质的成就。\n\n# 公式：\n自我介绍 = 我是谁 + 为什么我胜任 + 为什么我来面试\n\n    具体如何应用可以看看之前发布的热帖 ：\n    秋招提前批开始，你准备好面试的自我介绍了吗？\n    https://www.nowcoder.com/discuss/961641\n\n# 样例回答\n你好，我叫周星星，我本科毕业于深圳大学，读的是信息技术专业。\n我有三年的互联网产品经验，曾深度参与教育类App从零到一的开发，也负责过百万用户级别的产品。\n我很喜欢产品经理这个工作，在互联网干了3年之后我还是充满了激情，但是我觉得现在是一个很好的时机去接受更大的挑战，可以去接触一些不一样的用户。我看了一下公司的产品，主要的用户都是年轻人，我觉得这块很有前景，我之前的经验也能让我做出很好的产品去服务他们。\n\n    作者：学长Yellow\n    链接：https://www.nowcoder.com/discuss/364011316049125376\n    来源：牛客网',1916407199693844483,'2025-04-28 12:15:21','2025-04-28 12:15:21','2025-05-17 17:50:49',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916708802133086210,'说说你最大的缺点','### 说说你最大的缺点?（不要回答在工作上有消极影响的缺点）','[\"普通\",\"自我认知\",\"缺点\"]','### 回答思路\n这个问题企业问的概率很大，通常不希望听到直接回答的缺点是什么等，如果求职者说自己小心眼、爱忌妒人、非常懒、脾气大、工作效率低，企业肯定不会录用你。绝对不要自作聪明地回答“我最大的缺点是过干追求完美”有的人以为这样回答会显得自己比较出色，但事实上，他已经岌岌可危了。企业喜欢求职者从自己的优点说起，中间加一些小缺点，最后再把问题转回到优点上，突出优点的部分。企业喜欢聪明的求职者。\n不影响核心评价的缺点+改进方法\n\n### 示例回答\n我认为我比较大的缺点是我会容易焦虑，如果我写的这个方案没有完全确定下来的话，我就会不停的去想新的方案，直到确定下来，是处于一种不自信的焦虑，自己也在慢慢改掉这个缺点。\n\n    作者：学长Yellow\n    链接：https://www.nowcoder.com/discuss/364011316049125376\n    来源：牛客网',1916407199693844483,'2025-04-28 12:19:23','2025-04-28 12:19:23','2025-05-17 17:50:49',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916709526904623105,'你对于我们公司了解多少','### 你对于我们公司了解多少？（面试前一定要提前查询该公司主营业务）','[\"普通\",\"求职动机\"]','### 回答思路\n这是问题是想了解面试者是随意投递的，还是有所准备的；所以当拿到一家公司的面试邀请时，一定要去网上查一下该公司主营业务。\n\n### 样例回答\n我了解到我们公司主要是做...业务的，主要面向...国家/群体等，提供...服务的，近期公司的品牌在...发展等等（根据公司的实际情况来回答）\n\n\n    作者：学长Yellow\n    链接：https://www.nowcoder.com/discuss/364011316049125376\n    来源：牛客网',1916407199693844483,'2025-04-28 12:22:16','2025-04-28 12:22:16','2025-05-17 17:50:49',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916709727719510017,'请说出你选择这份工作的动机','### 请说出你选择这份工作的动机？（展示你对工作的理解度和渴求度）','[\"普通\",\"求职动机\"]','### 回答提示\n这是想知道面试者对这份工作的理解度和渴求度，并筛选因一时兴起而来应试的人，相关经验者，列举关联的技能及相关经历，而如果是无经验者，可以强调“就算职种不同，也希望有机会发挥之前的经验”。\n\n### 样例回答\n（无经验者）虽然之前从事的不是这个职业，但是我对这个职业已经有过一段时间的了解了，是经过慎重考虑并且想要在这个行业中长期发展才选择贵公司的，也希望曾经的工作经验可以在这里得到运用。\n（应届生）首先我的专业是对口的，其次我自己对这个行业就有浓厚的兴趣，在选择这个专业之前我就已经开始在学习相关的技能，例如...\n\n    作者：学长Yellow\n    链接：https://www.nowcoder.com/discuss/364011316049125376\n    来源：牛客网',1916407199693844483,'2025-04-28 12:23:04','2025-04-28 12:23:04','2025-05-17 17:50:49',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916710020809084929,'在五年的时间内你的职业规划','### 在五年的时间内，你的职业规划？（这是一个让求职者比较困扰的问题，HR其实是想知道你是否会踏实的在这个行业里发展，还是只是过渡一下）','[\"普通\",\"求职动机\",\"自我认知\",\"临场应变\"]','### 回答提示\n这是每一个应聘者都不希望被问到的问题，但是几乎每个人都会被问到。比较多的答案是“管理者”。但是近几年来，许多公司都已经建立了专门的技术途径。这些工作地位往往被称作“顾问”、“参议技师”或“高级软件工程师”等等。当然，说出其他一些你感兴趣的职位也是可以的，比如产品销售部经理，生产部经理等一些与你的专业有相关背景的工作。要知道，考官总是喜欢有进取心的应聘者，此时如果说“不知道”，或许就会使你丧失一个好机会。最普通的回答应该是“我准备在技术领域有所作为”或“我希望能按照公司的管理思路发展”。\n\n### 样例回答\n我是数媒专业出身，我的专业技能也相对贴合新媒体的行业，所以我是准备在这个行业长期发展下去的。我想从普通的新媒体运营岗位做起，慢慢积累经验，大概两三年左右，希望能够更进一步，做到更高的职位。（新媒体岗位）\n\n\n    作者：学长Yellow\n    链接：https://www.nowcoder.com/discuss/364011316049125376\n    来源：牛客网',1916407199693844483,'2025-04-28 12:24:14','2025-04-28 12:24:14','2025-05-17 17:50:49',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916710255434256385,'你还有什么问题要问吗','### 你还有什么问题要问吗？（⚠️看似可有可无，其实很关键）','[\"普通\",\"临场应变\",\"自我认知\",\"求职动机\"]','### 回答提示\n这个问题几乎每个HR都会问，也是许多人面试失败的原因，企业不喜欢说“没有问题”的人。因为其很注重员工的个性和创新能力。企业也不喜欢求职者问薪资或者个人福利之类的问题，多往公司方面带，企业将很欢迎，因为体现出你对学习的热情和对公司的忠诚度以及你的上进心。\n\n### 样例回答\n您认为优秀员工的标准是什么？贵公司的培训机制会面向实习生吗？贵公司的企业文化具体是什么呢？\n\n    作者：学长Yellow\n    链接：https://www.nowcoder.com/discuss/364011316049125376\n    来源：牛客网',1916407199693844483,'2025-04-28 12:25:10','2025-04-28 12:25:10','2025-05-17 17:50:49',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916711366689935362,'Git 分布式版本控制与 SVN 等集中式系统的核心区别是什么？其优势体现在哪些场景？','### Git 分布式版本控制与 SVN 等集中式系统的核心区别是什么？其优势体现在哪些场景？','[\"普通\",\"Git\",\"Git 分布式\",\"版本控制\",\"SVN\",\"集中式系统\"]','\nGit 的分布式架构与 SVN 的集中式系统存在以下本质区别：\n \n1. **存储结构差异**  \n   - **Git**：每个开发者本地都有完整的仓库副本（包含所有历史记录），可独立提交代码[1]()[6]()。  \n   - **SVN**：仅中央服务器存储完整历史，本地只有最新版本文件[6]()。\n \n2. **网络依赖程度**  \n   - **Git**：支持离线提交、分支创建等操作，仅在同步时需网络连接[3]()。  \n   - **SVN**：提交、查看历史等操作必须连接服务器[1]()。\n \n3. **分支管理机制**  \n   - **Git**：分支创建/切换速度快（仅修改指针），适合高频次特性分支开发[1]()[6]()。  \n   - **SVN**：分支实质是目录拷贝，操作耗时长且易产生冗余文件[6]()。\n \n4. **数据完整性保障**  \n   - **Git**：通过 SHA-1 哈希算法确保每个提交的唯一性，防止数据篡改[3]()。  \n   - **SVN**：依赖服务器权限控制，本地文件无完整性校验[1]()。\n \n**核心优势场景**：  \n- **远程协作开发**：Git 支持多副本并行修改，适合开源社区和跨地域团队[6]()。  \n- **大规模项目**：本地操作减少服务器压力，提升响应速度（如 Linux 内核开发）[3]()。  \n- **灾难恢复**：每个开发者本地都有完整备份，服务器故障可快速重建[3]()。\n ',1916407199693844483,'2025-04-28 12:29:35','2025-04-28 12:29:35','2025-05-17 17:50:49',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916711974440390657,'详细说明 Git 工作区、暂存区和版本库的关系，并解析 git add/git commit/git push 的作用域','### 详细说明 Git 工作区、暂存区和版本库的关系，并解析 `git add`/`git commit`/`git push` 的作用域','[\"普通\",\"Git\",\"Git语法\",\"工作区\",\"暂存区\",\"版本库\"]','### 三区关系图解 \n工作区（Working Directory）\n↓ 修改文件\n暂存区（Staging Area）\n↓ 生成提交\n版本库（Repository）\n\n\n### 核心命令作用域 \n\n1. **`git add`**  \n   - 作用域：工作区 → 暂存区  \n   - 功能：将文件修改添加到暂存区（`.git/index`），支持通配符（如 `git add *.js`）[3]()[6]()。\n \n2. **`git commit`**  \n   - 作用域：暂存区 → 版本库  \n   - 功能：生成新提交对象（包含作者、时间戳、快照指针），本地仓库历史更新[1]()[3]()。\n \n3. **`git push`**  \n   - 作用域：本地版本库 → 远程仓库  \n   - 功能：将本地提交同步到远程服务器（如 GitHub/GitLab），需权限验证[6]()。\n \n### 典型工作流示例 \n```bash \n# 修改工作区文件 \necho \"test\" >> file.txt   \n# 提交到暂存区 \ngit add file.txt   \n# 提交到本地仓库 \ngit commit -m \"Add test content\"  \n# 推送至远程仓库 \ngit push origin main \n```',1916407199693844483,'2025-04-28 12:32:00','2025-04-28 12:32:00','2025-05-17 17:50:49',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916712194989477889,'Git 合并冲突的产生原因及系统化解决方案','### Git 合并冲突的产生原因及系统化解决方案','[\"普通\",\"Git 冲突\",\"Git\",\"Git语法\"]','### 冲突触发场景\n\n- **并行修改同一文件**：两个分支对同一文件的相同位置进行了不同修改[1](https://blog.csdn.net/ForEver_bird/article/details/131392019)[4](https://blog.csdn.net/yiwai6998/article/details/109639365)。\n- **二进制文件冲突**：如图片、PDF等无法自动合并的文件类型被同时修改[3](https://blog.csdn.net/linweidong/article/details/139539236)。\n\n### 解决流程\n\n1. **定位冲突文件**\n   运行 `git status` 查看标记为 \"Unmerged paths\" 的文件[4](https://blog.csdn.net/yiwai6998/article/details/109639365)。\n\n2. **手动编辑冲突**\n   打开文件，Git 会标注冲突区域：\n\n   ```\n   text复制<<<<<<< HEAD  \n   本地修改内容  \n   =======  \n   远程修改内容  \n   >>>>>>> branch-name \n   ```\n\n   保留所需内容并删除标记[4](https://blog.csdn.net/yiwai6998/article/details/109639365)[6](https://blog.csdn.net/weixin_30429201/article/details/96324132)。\n\n3. **标记冲突已解决**\n\n   ```\n   bash\n   \n   复制\n   git add resolved-file.txt  \n   ```\n\n4. **完成合并**\n\n   ```\n   bash\n   \n   复制\n   git commit -m \"Merge conflict resolved\"\n   ```\n\n### 高级工具推荐\n\n- **IDE集成工具**：VSCode/GitKraken 提供可视化冲突对比[4](https://blog.csdn.net/yiwai6998/article/details/109639365)。\n- **第三方对比工具**：Beyond Compare/Meld 支持三向合并[6](https://blog.csdn.net/weixin_30429201/article/details/96324132)。',1916407199693844483,'2025-04-28 12:32:52','2025-04-28 12:32:52','2025-05-17 17:50:49',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916712393845624833,'Git Flow 工作流的核心分支模型及其适用场景','### Git Flow 工作流的核心分支模型及其适用场景','[\"普通\",\"Git\",\"Git Flow\",\"工作流\",\"核心分支模型\"]','### 分支结构\n\n```\nmain（主分支，对应生产环境）  \n↑  \nrelease（预发布分支）  \n↑  \ndevelop（开发主分支）  \n↑  \nfeature/*（特性分支）  \nhotfix/*（紧急修复分支）\n```\n\n### 各分支职责\n\n1. feature 分支\n   - 用途：开发新功能（如 `feature/login-module`）\n   - 生命周期：从 develop 分支创建，合并回 develop[6](https://blog.csdn.net/weixin_30429201/article/details/96324132)。\n2. release 分支\n   - 用途：版本测试与预发布\n   - 操作：从 develop 创建，测试通过后合并到 main 和 develop[3](https://blog.csdn.net/linweidong/article/details/139539236)。\n3. hotfix 分支\n   - 用途：紧急修复生产环境 Bug\n   - 特点：从 main 创建，修复后同步到 main 和 develop[1](https://blog.csdn.net/ForEver_bird/article/details/131392019)。\n\n### 适用场景\n\n- **中大型产品团队**：需要严格区分开发阶段和发布流程[6](https://blog.csdn.net/weixin_30429201/article/details/96324132)。\n- **长期维护项目**：支持多版本并行开发和紧急修复[3](https://blog.csdn.net/linweidong/article/details/139539236)。\n- **企业级 DevOps**：与 CI/CD 流水线集成，实现自动化构建测试[1](https://blog.csdn.net/ForEver_bird/article/details/131392019)。',1916407199693844483,'2025-04-28 12:33:40','2025-04-28 12:33:40','2025-06-02 17:01:43',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916712582006296577,'如何优化 Git 仓库性能并处理超大型仓库','### 如何优化 Git 仓库性能并处理超大型仓库？','[\"普通\",\" Git \",\"Git仓库性能优化\"]','###  性能瓶颈场景\n\n- **历史记录过大**：十年以上项目可能包含数百万个对象[3](https://blog.csdn.net/linweidong/article/details/139539236)。\n- **二进制文件泛滥**：未使用 LFS 管理的媒体文件导致仓库膨胀[6](https://blog.csdn.net/weixin_30429201/article/details/96324132)。\n\n### 优化策略\n\n1. **仓库瘦身**\n\n   ```\n   bash复制# 清除历史无用大文件 \n   git filter-branch --tree-filter \'rm -f big-file.zip\'   \n   # 重构仓库 \n   git reflog expire --expire=now --all  \n   git gc --prune=now --aggressive \n   ```\n\n2. **使用 Git LFS**\n\n   - 将大型二进制文件存储在专用服务器，仓库内仅保留指针[3](https://blog.csdn.net/linweidong/article/details/139539236)。\n\n3. **浅克隆（Shallow Clone）**\n\n   ```\n   bash\n   \n   复制\n   git clone --depth 1 https://repo.url   # 仅克隆最近一次提交 \n   ```\n\n4. **子模块拆分**\n\n   ```\n   bash复制# 将公共组件拆分为独立仓库 \n   git submodule add https://submodule.url  \n   ```\n\n### 企业级方案\n\n- **VFS for Git**：微软开发的虚拟文件系统，按需加载文件[3](https://blog.csdn.net/linweidong/article/details/139539236)。\n- **Partial Clone**：Git 2.17+ 支持按需获取对象[6](https://blog.csdn.net/weixin_30429201/article/details/96324132)。',1916407199693844483,'2025-04-28 12:34:25','2025-04-28 12:34:25','2025-05-17 17:50:49',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916714122926477314,'Kafka Producer 的工作原理与优化策略 ','### Kafka Producer 的工作原理与优化策略 ','[\"普通\",\"Kafka\",\" Kafka Producer\"]','\nKafka Producer 的核心工作流程包含六个阶段：  \n1. **消息序列化**：通过 `key.serializer`  和 `value.serializer`  配置的序列化器（如 StringSerializer、ByteArraySerializer）将数据转换为字节流[1]()。  \n2. **分区策略**：  \n   - 显式指定分区：直接写入目标分区  \n   - Key哈希算法：相同Key的消息分配到同一分区（保证顺序性）  \n   - 轮询策略：无Key时按分区顺序轮询写入[2]()  \n3. **批次压缩**：消息按 `batch.size` （默认16KB）和 `linger.ms` （延迟时间）参数分批压缩，减少网络I/O开销[1]()。  \n4. **网络传输**：通过 `Sender线程` 异步发送数据到Broker，采用非阻塞IO模型提升吞吐量[4]()。  \n5. **ACK确认机制**：  \n   - `acks=0`：不等待Broker确认  \n   - `acks=1`：Leader副本写入即确认  \n   - `acks=all`：所有ISR副本同步完成才确认[2]()  \n6. **错误重试**：通过 `retries` 参数配置重试次数，结合幂等性（`enable.idempotence=true` ）避免重复消息[3]()。  \n \n**优化策略**：  \n- 增大 `buffer.memory` （缓冲区内存）和 `batch.size`  提升批量处理能力  \n- 使用 Snappy/LZ4 压缩算法减少网络带宽消耗  \n- 启用 `transactional.id`  实现跨分区原子写入[1]()。\n ',1916407199693844483,'2025-04-28 12:40:32','2025-04-28 12:40:32','2025-05-17 17:50:49',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916714301461221377,'Kafka Consumer 群组的分区分配策略与再均衡问题 ','### Consumer 群组的分区分配策略与再均衡问题 ','[\"普通\",\"Kafka\"]','### Kafka 支持三种分区分配策略：  \n1. **RangeAssignor（默认）**：  \n   - 按分区号范围分配给消费者，可能导致负载不均（如6分区3消费者时分配为2-2-2）[2]()。  \n2. **RoundRobinAssignor**：  \n   - 轮询分配所有分区，适用于消费者处理能力相近的场景  \n3. **StickyAssignor**：  \n   - 尽量保留原有分配结果，减少再均衡时的分区迁移量[3]()。  \n \n**再均衡触发条件**：  \n- 新消费者加入群组  \n- 消费者崩溃或长时间未发送心跳（`session.timeout.ms`  默认45秒）  \n- 消费者处理超时（`max.poll.interval.ms`  默认5分钟）[4]()。  \n \n**解决方案**：  \n- 缩短 `max.poll.records`  减少单次拉取量  \n- 异步处理消息避免阻塞poll循环  \n- 使用静态成员资格（`group.instance.id` ）减少非必要再均衡[1]()。\n ',1916407199693844483,'2025-04-28 12:41:14','2025-04-28 12:41:14','2025-05-17 17:50:49',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916714489819025410,'Kafka ISR 机制的设计原理与数据一致性保障 ','### ISR 机制的设计原理与数据一致性保障 ','[\"普通\",\"ISR机制\",\"In-Sync Replicas\",\"Kafka\"]','**ISR（In-Sync Replicas）机制** 是 Kafka 实现高可用的核心设计：  \n \n**工作流程**：  \n1. Leader 副本接收生产者消息后，同步复制到所有 Follower 副本  \n2. Follower 定期向 Leader 发送 FETCH 请求同步数据  \n3. 若 Follower 在 `replica.lag.time.max.ms` （默认30秒）内未完成同步，则移出 ISR[1]()。  \n \n**数据一致性保障**：  \n- **HW（High Watermark）**：标识已成功复制到所有 ISR 的消息偏移量，消费者只能读取 HW 之前的消息  \n- **Leader Epoch**：解决副本数据冲突问题，确保故障切换后数据不丢失[3]()。  \n \n**设计考量**：  \n- 提高 `min.insync.replicas` （最小ISR数量）增强数据持久性  \n- 监控 `UnderReplicatedPartitions` 指标预警副本同步异常[2]()。\n ',1916407199693844483,'2025-04-28 12:41:59','2025-04-28 12:41:59','2025-05-17 17:50:49',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916714617334255618,'Kafka 零拷贝（Zero-Copy）技术的实现原理 ','### Kafka 零拷贝（Zero-Copy）技术的实现原理 ','[\"普通\",\"Kafka\",\"Kafka 零拷贝\",\"Zero-Copy\"]','\n**传统数据拷贝流程**（4次拷贝+4次上下文切换）：  \n1. 磁盘 → 内核缓冲区  \n2. 内核缓冲区 → 用户缓冲区  \n3. 用户缓冲区 → 内核Socket缓冲区  \n4. Socket缓冲区 → 网卡[1]()。  \n \n**Kafka 零拷贝优化**：  \n- 通过 `sendfile()` 系统调用实现：  \n  ```c \n  sendfile(out_fd, in_fd, offset, count);',1916407199693844483,'2025-04-28 12:42:30','2025-04-28 12:42:30','2025-05-17 17:50:49',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916716369991290881,'Vue 中vue.cli项目中src目录每个文件夹和文件的用法？','###  Vue 中 vue.cli项目中src目录每个文件夹和文件的用法？','[\"普通\",\"Vue\"]','    assets文件夹是放静态资源；\n    components是放组件；\n    router是定义路由相关的配置;\n    view视图；\n    app.vue是一个应用主组件；\n    main.js是入口文件\n\n',1916407199693844483,'2025-04-28 12:49:28','2025-04-28 12:49:28','2025-05-17 17:50:49',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916716576934055938,'Vue中计算属性和watch的区别','### Vue中计算属性和watch的区别','[\"普通\",\"Vue\",\"watch\"]','```\n在我们运用vue的时候一定少不了用计算属性computed和watch\ncomputed计算属性是用来声明式的描述一个值依赖了其它的值。当你在模板里把数据绑定到一个计算属性上时，Vue 会在其依赖的任何值导致该计算属性改变时更新 DOM。这个功能非常强大，它可以让你的代码更加声明式、数据驱动并且易于维护。\nwatch监听的是你定义的变量,当你定义的变量的值发生变化时，调用对应的方法。就好在div写一个表达式name，data里写入num和lastname,firstname,在watch里当num的值发生变化时，就会调用num的方法，方法里面的形参对应的是num的新值和旧值，而计算属性computed,计算的是Name依赖的值,它不能计算在data中已经定义过的变量。\n```',1916407199693844483,'2025-04-28 12:50:17','2025-04-28 12:50:17','2025-05-17 17:50:49',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916717025208684546,'Vue 中prop 验证和默认值','### Vue 中prop 验证和默认值是什么？请简单阐述一下。','[\"普通\",\"Vue\",\"prop 验证\"]','我们在父组件给子组件传值得时候，为了避免不必要的错误，可以给prop的值进行类型设定，让父组件给子组件传值得时候，更加准确，prop可以传一个数字，一个布尔值，一个数组，一个对象，以及一个对象的所有属性。组件可以为 props 指定验证要求。如果未指定验证要求，Vue 会发出警告比如传一个number类型的数据，用defalt设置它的默认值，如果验证失败的话就会发出警告。\n\n   ```javascript\n   props: {\n   	visible: {\n       	default: true,\n       	type: Boolean,\n       	required: true\n   	},\n   },\n   ```',1916407199693844483,'2025-04-28 12:52:04','2025-04-28 12:52:04','2025-05-17 17:50:49',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916717280947982338,'vue 组件通信机制','### 简单阐述 vue 组件通信机制','[\"普通\",\"Vue\",\"Vue通信\"]','- 父传递子\n  父：自定义属性名 + 数据（要传递）=> :value=“数据”\n  子：props [\"父组件上的自定义属性名“] =>进行数据接收)\n- 子传递父\n  在父组件中注册子组件并在子组件标签上绑定自定义事件的监听。\n  子：this.$emit(‘自定义事件名称’, 数据) 子组件标签上绑定@自定义事件名称=’回调函数’\n  父：methods: {自定义事件() {//逻辑处理} }\n- 兄弟组件\n  通过中央通信 let bus = new Vue()\n  A：methods :{ 函数{bus.KaTeX parse error: Expected \'EOF\', got \'}\' at position 18: …it(\'自定义事件名’，数据)}̲ 发送 B：created （…on(\'A发送过来的自定义事件名’，函数)} 进行数据接收',1916407199693844483,'2025-04-28 12:53:05','2025-04-28 12:53:05','2025-05-17 17:50:49',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916717391027490817,'vuex 是什么？ 有哪几种属性？','### vuex 是什么？ 有哪几种属性？','[\"普通\",\"Vuex\"]','Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。\n有 5 种，分别是 state、getter、mutation、action、module',1916407199693844483,'2025-04-28 12:53:31','2025-04-28 12:53:31','2025-05-17 17:50:49',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916717461936394242,'vuex 的 store 是什么？','### vuex 的 store 是什么？','[\"普通\",\"Vuex\"]','vuex 就是一个仓库，仓库里放了很多对象。其中 state 就是数据源存放地，对应于一般 vue 对象里面的 datastate 里面存放的数据是响应式的，vue 组件从 store 读取数据，若是 store 中的数据发生改变，依赖这相数据的组件也会发生更新它通过 mapState 把全局的 state 和 getters 映射到当前组件的 computed 计算属性',1916407199693844483,'2025-04-28 12:53:48','2025-04-28 12:53:48','2025-05-17 17:50:49',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916717654111014913,'Vue 中 v-show 和 v-if 指令的共同点和不同点？','### Vue 中 v-show 和 v-if 指令的共同点和不同点？','[\"普通\",\"Vue语法\"]','    v-show指令是通过修改元素的displayCSS属性让其显示或者隐藏\n\n\n    v-if指令是直接销毁和重建DOM达到让元素显示和隐藏的效果\n\n',1916407199693844483,'2025-04-28 12:54:34','2025-04-28 12:54:34','2025-05-17 17:50:49',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916718663134728194,'使用 Redis 有哪些好处？','### 使用 Redis 有哪些好处？','[\"普通\",\"Redis\"]','- \n\n- 速度快，因为数据存在内存中，类似于 HashMap，HashMap 的优势就是查找和操作的时间复杂度都是 O1)\n- 支持丰富数据类型，支持 string，list，set，Zset，hash 等\n- 支持事务，操作都是原子性，所谓的原子性就是对数据的更改要么全部执行，要么全部不执行\n- 丰富的特性，可用于缓存，消息，按 key 设置过期时间，过期后将会自动删除',1916407199693844483,'2025-04-28 12:58:34','2025-04-28 12:58:34','2025-05-17 17:50:49',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916718753945604097,'Redis 相比 Memcached 有哪些优势？','### Redis 相比 Memcached 有哪些优势？','[\"普通\",\"Redis\"]','- Memcached 所有的值均是简单的字符串，Redis 作为其替代者，支持更为丰富的数据类\n- Redis 的速度比 Memcached 快很多\n- Redis 可以持久化其数据',1916407199693844483,'2025-04-28 12:58:56','2025-04-28 12:58:56','2025-05-17 17:50:49',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916718847751213058,'Memcache 与 Redis 的区别都有哪些？','### Memcache 与 Redis 的区别都有哪些？','[\"普通\",\"Redis\"]','- 存储方式 Memecache 把数据全部存在内存之中，断电后会挂掉，数据不能超过内存大小。Redis 有部分存在硬盘上，这样能保证数据的持久性。\n- 数据支持类型 Memcache 对数据类型支持相对简单。Redis 有复杂的数据类型。\n- 使用底层模型不同 它们之间底层实现方式 以及与客户端之间通信的应用协议不一样。Redis 直接自己构建了 VM 机制 ，因为一般的系统调用系统函数的话，会浪费一定的时间去移动和请求。',1916407199693844483,'2025-04-28 12:59:18','2025-04-28 12:59:18','2025-05-17 17:50:49',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916718967427289089,'Redis 的持久化机制是什么？各自的优缺点？','### Redis 的持久化机制是什么？各自的优缺点？','[\"普通\",\"Redis\",\"Redis持久化\"]','Redis提供两种持久化机制 RDB 和 AOF 机制：\n\nRDB（Redis DataBase）持久化方式：是指用数据集快照的方式半持久化模式记录 Redis 数据库的所有键值对，在某个时间点将数据写入一个临时文件，持久化结束后，用这个临时文件替换上次持久化的文件，达到数据恢复。\n\n优点：\n\n- 只有一个文件 dump.rdb，方便持久化。\n- 容灾性好，一个文件可以保存到安全的磁盘。\n- 性能最大化，fork 子进程来完成写操作，让主进程继续处理命令，所以是 IO 最大化。使用单独子进程来进行持久化，主进程不会进行任何 IO 操作，保证了 Redis的高性能。\n- 相对于数据集大时，比 AOF 的启动效率更高。\n\n\n\n缺点：数据安全性低。RDB 是间隔一段时间进行持久化，如果持久化之间 Redis 发生故障，会发生数据丢失。所以这种方式更适合数据要求不严谨的时候AOF（Append-only file）持久化方式：是指所有的命令行记录以 Redis 命令请求协议的格式完全持久化存储保存为 aof 文件。\n\n优点：\n\n- 数据安全，aof 持久化可以配置 appendfsync 属性，有 always，每进行一次命令操作就记录到 aof 文件中一次。\n- 通过 append 模式写文件，即使中途服务器宕机，可以通过 redis-check-aof 工具解决数据一致性问题。\n- AOF 机制的 rewrite 模式。AOF 文件没被 rewrite 之前（文件过大时会对命令进行合并重写），可以删除其中的某些命令（比如误操作的 flushall）\n\n\n\n缺点：\n\n- AOF 文件比 RDB 文件大，且恢复速度慢。\n- 数据集大的时候，比 RDB 启动效率低。',1916407199693844483,'2025-04-28 12:59:47','2025-04-28 12:59:47','2025-05-17 17:50:49',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916719066412863490,'Redis 常见性能问题和解决方案','### Redis 常见性能问题和解决方案','[\"普通\",\"Redis\",\"Redis解决方案\"]','- Master 最好不要写内存快照，如果 Master 写内存快照，save 命令调度 rdbSave函数，会阻塞主线程的工作，当快照比较大时对性能影响是非常大的，会间断性暂停服务。\n- 如果数据比较重要，某个 Slave 开启 AOF 备份数据，策略设置为每秒同步一。\n- 为了主从复制的速度和连接的稳定性，Master 和 Slave 最好在同一个局域网。\n- 尽量避免在压力很大的主库上增加从。\n- 主从复制不要用图状结构，用单向链表结构更为稳定，即：Master <- Slave1<- Slave2 <- Slave3……这样的结构方便解决单点故障问题，实现 Slave 对 Master 的替换。如果 Master 挂了，可以立刻启用 Slave1 做 Master，其他不变。',1916407199693844483,'2025-04-28 13:00:11','2025-04-28 13:00:11','2025-05-17 17:50:49',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916719172121907202,'Redis 过期键的删除策略？','### Redis 过期键的删除策略？','[\"普通\",\"Redis\"]','- 定时删除：在设置键的过期时间的同时，创建一个定时器 timer。让定时器在键的过期时间来临时，立即执行对键的删除操作。\n- 惰性删除：放任键过期不管，但是每次从键空间中获取键时，都检查取得的键是否过期，如果过期的话，就删除该键;如果没有过期，就返回该键。\n- 定期删除：每隔一段时间程序就对数据库进行一次检查，删除里面的过期键。至于要删除多少过期键，以及要检查多少个数据库，则由算法决定。',1916407199693844483,'2025-04-28 13:00:36','2025-04-28 13:00:36','2025-05-17 17:50:49',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916719294234873857,'Redis 的回收策略（淘汰策略）？','### Redis 的回收策略（淘汰策略）？','[\"普通\",\"Redis\",\"回收策略\"]','- volatile-lru：从已设置过期时间的数据集（server.db[i].expires）中挑选最近最少使用的数据淘汰\n- volatile-ttl：从已设置过期时间的数据集（server.db[i].expires）中挑选将要过期的数据淘汰\n- volatile-random：从已设置过期时间的数据集（server.db[i].expires）中任意选择数据淘汰\n- allkeys-lru：从数据集（server.db[i].dict）中挑选最近最少使用的数据淘汰\n- allkeys-random：从数据集（server.db[i].dict）中任意选择数据淘汰\n- no-enviction（驱逐）：禁止驱逐数据\n\n\n\n注意这里的 6 种机制，volatile 和 allkeys 规定了是对已设置过期时间的数据集淘汰数据还是从全部数据集淘汰数据，后面的 lru、ttl 以及 random 是三种不同的淘汰策略，再加上一种 no-enviction 永不回收的策略。\n\n使用策略规则：\n\n- 如果数据呈现幂律分布，也就是一部分数据访问频率高，一部分数据访问频率低，则使用 allkeys-lru\n- 如果数据呈现平等分布，也就是所有的数据访问频率都相同，则使用 allkeys-random',1916407199693844483,'2025-04-28 13:01:05','2025-04-28 13:01:05','2025-05-17 17:50:49',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916719542768357377,'为什么 Redis 需要把所有数据放到内存中？','### 为什么 Redis 需要把所有数据放到内存中？','[\"普通\",\"Redis\"]','Redis 为了达到最快的读写速度将数据都读到内存中，并通过异步的方式将数据写入磁盘。所以 Redis 具有快速和数据持久化的特征。如果不将数据放在内存中，磁盘 I/O 速度为严重影响 Redis 的性能。在内存越来越便宜的今天，Redis 将会越来越受欢迎。如果设置了最大使用的内存，则数据已有记录数达到内存限值后不能继续插入新值。',1916407199693844483,'2025-04-28 13:02:04','2025-04-28 13:02:04','2025-05-17 17:50:49',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916719679301341185,'Redis 支持的 Java 客户端都有哪些？官方推荐用哪个？','### Redis 支持的 Java 客户端都有哪些？官方推荐用哪个？','[\"普通\",\"Redis\",\"java\"]','### Redisson、Jedis、lettuce 等等，官方推荐使用 Redisson。',1916407199693844483,'2025-04-28 13:02:37','2025-04-28 13:02:37','2025-05-17 17:53:51',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916720481411649538,'存储器的层次结构','### 存储器的层次结构','[\"普通\",\"计算机组成原理\"]','寄存器->Cache->主存->辅存->外存\n\nCache-主存：解决了主存与CPU速度不匹配的问题。\n\n主存-辅存：实现虚拟存储系统，解决了主存容量不够的问题。\n\n※辅存中的数据要调入到主存才能被CPU访问',1916407199693844483,'2025-04-28 13:05:48','2025-04-28 13:05:48','2025-05-17 17:53:51',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916720578308460546,'存储器的分类','### 存储器的分类','[\"普通\",\"计算机组成原理\"]','\nⅠ、按照存取方式：分为随机存取存储器（RAM），如内存；顺序存取存储器（SAM），如磁带；直接存取存储器（DAM），如磁盘；相联存储器（可按内容访问的存储器，CAM），如快表。\n\nⅡ、按信息是否可改：分为读/写存储器和只读存储器（ROM）\n\nⅢ、断电后是否消失：分为易失性存储器，如内存、Cache；非易失性存储器，如磁盘、光盘\n\n三、存储器的性能指标\n\n1.存储容量：存储字数×字长\n\n2.单位成本：每位价格=总成本/总容量\n\n3.存储速度：数据传输率=数据的宽带/存储周期\n\n存储周期=存取时间+恢复时间\n————————————————\n\n                            版权声明：本文为博主原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接和本声明。\n                        \n原文链接：https://blog.csdn.net/weixin_66137383/article/details/135721503',1916407199693844483,'2025-04-28 13:06:11','2025-04-28 13:06:11','2025-05-17 17:53:51',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916720809213284353,'SRAM和DRAM的区别','### SRAM和DRAM的区别是什么？请简单阐述。','[\"普通\",\"计算机组成原理\"]','一个静态RAM，一个动态RAM。动态的用于主存，静态的用于Cache\n\nSRAM和DRAM的差别\n\n类型特点	SRAM	DRAM\n存储信息	触发器	电容\n破坏性读出	非	是\n读出后是否需要重写	不用	需要\n运行速度	快	慢\n集成度	低	高\n发热量	大	小\n存储成本	高	低\n是否易失	易失	易失\n是否需要刷新	不需要	需要\n作用	常用作Cache	常用作主存\n————————————————',1916407199693844483,'2025-04-28 13:07:06','2025-04-28 13:07:06','2025-05-17 17:53:51',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916720956529823745,'ROM只读存储器特点','### ROM只读存储器特点','[\"普通\",\"计算机组成原理\"]','RAM芯片——易失性，断电后数据消失\n\nROM芯片——非易失性，断电后数据不会消失\n\n①MROM——掩模式只读存储器：任何人都不可重写\n\n②PROM——可编程只读存储器：写一次后就不可更改\n\n③EPROM——可擦除可编程只读存储器：可进行多次重写，写入时间很长\n\n④Flash Memory——闪速存储器：可进行多次快速擦除重写，但写的速度比读的速度慢\n\n⑤SSD——固态硬盘：可进行多次快速擦除重写，目前个人电脑大都市这种。速度快，功耗低，价格高\n————————————————\n\n                            版权声明：本文为博主原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接和本声明。\n                        \n原文链接：https://blog.csdn.net/weixin_66137383/article/details/135721503',1916407199693844483,'2025-04-28 13:07:41','2025-04-28 13:07:41','2025-05-17 17:53:51',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916721238638710786,'主存储器与CPU的连接','### 主存储器与CPU的连接相关知识','[\"普通\",\"计算机组成原理\"]','一、单块存储器与CPU连接\n\nⅠ、连接原理：主存器通过数据总线，地址总线和控制总线与CPU连接。\n\n地址总线的位数决定了可寻址的最大内存空间。\n\n控制总线指出总线周期类型和本次输入输出操作完成的时刻。\n\n\n\n主存储器的线路\n\n二、多块存储器与CPU连接\n\nⅠ、位扩展法\n\n原理：CPU的数据线与存储芯片的数据位数不相等，此时必须使用多个存储器件对字长进行扩位。每个存储器的数据线都并行连接在CPU的数据总线上，而地址位数是串行相连。那CPU传一个地址过来，怎么知道是使用哪个存储芯片呢，此时就要WE来控制使用哪个存储芯片。\n\n\n\nⅡ、字扩展法\n\n原理：当主存储器位数不足，字数足够时，我们会通过位扩展的方法来扩展主存储器，将多个字数相同的存储芯片并联起来，增加位数，并且存储空间是连续的。里面还会涉及译码器，主要功能就是增加控制存储器的个数，如有两位地址线连接了译码器，那么译码器可以控制 22 个存储器。\n\n\n\n线选法	译码片选法\nn条线n个片选信号	n条线2的n次方个片选信号\n电路简单	电路复杂\n地址不连续（两位举例，00和11的地址用不到）	地址连续（00和11的地址也都用到了）\nⅢ、字位同时扩展\n\n原理：而当字数和位数都不足时，我们会通过字位同时扩展的方法来扩展存储器，将多个字数和位数都相同的存储芯片连接起来，同时增加字数和位数。\n\nⅣ、三者比较\n\n字扩展方法只能增加主存储器的容量，存取速度没有提升。而位扩展方法不光可以增加主存储器的容量，同时还可以让多个存储芯片同时工作，同时做读写操作，增加了存取速度。字位同时扩展的方法又可以增加主存储器的容量，又可以让多个存储芯片同时工作，那么是不是只用字位同时扩展这一种方法就可以了呢？任何事情都是有利弊两面性的，在能力增强的同时，他的成本，功耗和体积都会增加，所以我们还是要根据实际的系统需求来判断具体使用的主存储器扩展方法。\n\nⅤ、题目总结\n\n【2018统考真题】假定DRAM芯片中存储阵列的行数为r、列数为c,对于一个2K×1位的DRAM芯片，为保证其地址引脚数最少，并尽量减少刷新开销，则r、c的取值分别是()。\n\n解：r是行，c是列，为了保证地址引脚数最少，就要求，行列相差小，并且减少刷新开销，则要求行数越小越好。故最终行数位32，列数位64。\n————————————————\n\n                            版权声明：本文为博主原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接和本声明。\n\n原文链接：https://blog.csdn.net/weixin_66137383/article/details/135721503',1916407199693844483,'2025-04-28 13:08:48','2025-04-28 13:08:48','2025-05-17 17:53:51',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916741270924021762,'Kafka是如何保障数据不丢失的','### 该问题已经成为了Kafka面试的惯例，如同Java的HashMap，属于高频出现的面试问题。那么，我们该怎么理解这个问题呢？问题是Kafka如何保障数据不丢失，即Kafka的Broker提供了什么机制保证数据不丢失的。','[\"普通\",\"Kafuka\"]','其实对于Kafka的Broker而言，Kafka 的**复制机制**和**分区的多副本**架构是Kafka 可靠性保证的核心。把消息写入多个副本可以使Kafka 在发生崩溃时仍能保证消息的持久性。\n\n搞清楚了问题的核心，再来看一下该怎么回答这个问题：主要包括三个方面\n\n> 1.Topic 副本因子个数：replication.factor >= 3\n> 2.同步副本列表(ISR)：min.insync.replicas = 2\n> 3.禁用unclean选举：unclean.leader.election.enable=false\n\n下面将会逐步分析上面的三个配置：\n\n- **副本因子**\n\nKafka的topic是可以分区的，并且可以为分区配置多个副本，该配置可以通过`replication.factor`参数实现。Kafka中的分区副本包括两种类型：领导者副本（Leader Replica）和追随者副本（Follower Replica)，每个分区在创建时都要选举一个副本作为领导者副本，其余的副本自动变为追随者副本。在 Kafka 中，追随者副本是不对外提供服务的，也就是说，任何一个追随者副本都不能响应消费者和生产者的读写请求。所有的请求都必须由领导者副本来处理。换句话说，所有的读写请求都必须发往领导者副本所在的 Broker，由该 Broker 负责处理。追随者副本不处理客户端请求，它唯一的任务就是从领导者副本**异步拉取**消息，并写入到自己的提交日志中，从而实现与领导者副本的同步。\n\n一般来说，副本设为3可以满足大部分的使用场景，也有可能是5个副本(比如银行)。如果副本因子为N，那么在N-1个broker 失效的情况下，仍然能够从主题读取数据或向主题写入数据。所以，更高的[副本因子](https://zhida.zhihu.com/search?content_id=140934648&content_type=Article&match_order=4&q=副本因子&zhida_source=entity)会带来更高的可用性、可靠性和更少的故障。另一方面，副本因子N需要至少N个broker ，而且会有N个数据副本，也就是说它们会占用N倍的磁盘空间。实际生产环境中一般会在可用性和[存储硬件](https://zhida.zhihu.com/search?content_id=140934648&content_type=Article&match_order=1&q=存储硬件&zhida_source=entity)之间作出权衡。\n\n除此之外，副本的分布同样也会影响可用性。默认情况下，Kafka会确保分区的每个副本分布在不同的Broker上，但是如果这些Broker在同一个机架上，一旦机架的[交换机](https://zhida.zhihu.com/search?content_id=140934648&content_type=Article&match_order=1&q=交换机&zhida_source=entity)发生故障，分区就会不可用。所以建议把Broker分布在不同的机架上，可以使用**broker.rack**参数配置Broker所在机架的名称。\n\n- **同步副本列表**\n\nIn-sync replica(ISR)称之为同步副本，ISR中的副本都是与Leader进行同步的副本，所以不在该列表的follower会被认为与Leader是不同步的。那么，ISR中[存在是什么](https://zhida.zhihu.com/search?content_id=140934648&content_type=Article&match_order=1&q=存在是什么&zhida_source=entity)副本呢？首先可以明确的是：Leader副本总是存在于ISR中。而follower副本是否在ISR中，取决于该follower副本是否与Leader副本保持了“同步”。\n\nKafka的broker端有一个参数**replica.lag.time.max.ms**, 该参数表示follower副本滞后与Leader副本的最长时间间隔，默认是10秒。这就意味着，只要follower副本落后于leader副本的时间间隔不超过10秒，就可以认为该follower副本与leader副本是同步的，所以哪怕当前follower副本落后于Leader副本几条消息，只要在10秒之内赶上Leader副本，就不会被踢出出局。\n\n可以看出ISR是一个动态的，所以即便是为分区配置了3个副本，还是会出现[同步副本](https://zhida.zhihu.com/search?content_id=140934648&content_type=Article&match_order=4&q=同步副本&zhida_source=entity)列表中只有一个副本的情况(其他副本由于不能够与leader及时保持同步，被移出ISR列表)。如果这个同步副本变为不可用，我们必须在**可用性**和**一致性**之间作出选择(CAP理论)。\n\n根据Kafka 对可靠性保证的定义，消息只有在被写入到所有同步副本之后才被认为是已提交的。但如果这里的“所有副本”只包含一个同步副本，那么在这个副本变为不可用时，数据就会丢失。如果要确保已提交的数据被写入不止一个副本，就需要把最小同步副本数量设置为大一点的值。对于一个包含3 个副本的主题分区，如果**min.insync.replicas=2** ，那么至少要存在两个同步副本才能向分区写入数据。\n\n如果进行了上面的配置，此时必须要保证ISR中至少存在两个副本，如果ISR中的副本个数小于2，那么Broker就会停止接受生产者的请求。尝试发送数据的生产者会收到**NotEnoughReplicasException**异常，消费者仍然可以继续读取已有的数据。\n\n- **禁用unclean选举**\n\n选择一个同步副本列表中的分区作为leader 分区的过程称为**clean leader election**。注意，这里要与在非同步副本中选一个分区作为leader分区的过程区分开，在非同步副本中选一个分区作为leader的过程称之为**unclean leader election**。由于ISR是动态调整的，所以会存在ISR列表为空的情况，通常来说，非同步副本落后 Leader 太多，因此，如果选择这些副本作为新 Leader，就可能出现数据的丢失。毕竟，这些副本中保存的消息远远落后于老 Leader 中的消息。在 Kafka 中，选举这种副本的过程可以通过Broker 端参数 **unclean.leader.election.enable**控制是否允许 Unclean 领导者选举。开启 Unclean 领导者选举可能会造成数据丢失，但好处是，它使得分区 Leader 副本一直存在，不至于停止对外提供服务，因此提升了高可用性。反之，禁止 Unclean Leader 选举的好处在于维护了数据的一致性，避免了消息丢失，但牺牲了高可用性。[分布式系统](https://zhida.zhihu.com/search?content_id=140934648&content_type=Article&match_order=1&q=分布式系统&zhida_source=entity)的CAP理论说的就是这种情况。\n\n不幸的是，**unclean leader election**的选举过程仍可能会造成数据的不一致，因为同步副本并不是**完全**同步的。由于复制是**异步**完成的，因此无法保证follower可以获取最新消息。比如Leader分区的最后一条消息的[offset](https://zhida.zhihu.com/search?content_id=140934648&content_type=Article&match_order=1&q=offset&zhida_source=entity)是100，此时副本的offset可能不是100，这受到两个参数的影响：\n\n> **replica.lag.time.max.ms**：同步副本滞后与leader副本的时间\n> **zookeeper.session.timeout.ms**：与[zookeeper](https://zhida.zhihu.com/search?content_id=140934648&content_type=Article&match_order=2&q=zookeeper&zhida_source=entity)会话超时时间\n\n简而言之，如果我们允许不同步的副本成为leader，那么就要承担丢失数据和出现数据不一致的风险。如果不允许它们成为leader，那么就要接受较低的可用性，因为我们必须等待原先的首领恢复到可用状态。\n\n关于unclean选举，不同的场景有不同的配置方式。对**数据质量和数据一致性**要求较高的系统会禁用这种unclean的leader选举(比如银行)。如果在**可用性**要求较高的系统里，比如实时[点击流](https://zhida.zhihu.com/search?content_id=140934648&content_type=Article&match_order=1&q=点击流&zhida_source=entity)分析系统， 一般不会禁用unclean的leader选举。',1916407199693844483,'2025-04-28 14:28:24','2025-04-28 14:28:24','2025-05-17 17:53:51',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916741544950484994,'如何解决Kafka数据丢失问题','### 如何解决Kafka数据丢失问题？从Kafka的生产者与消费者的角度来看待数据丢失的问题。','[\"普通\",\"Kafuka\",\"数据丢失\"]','先来看一下如何回答这个问题：主要包括两个方面：\n\n> **Producer**\n> retries=Long.MAX_VALUE\n> 设置 retries 为一个较大的值。这里的 retries 同样是 Producer 的参数，对应前面提到的 Producer 自动重试。当出现网络的瞬时抖动时，消息发送可能会失败，此时配置了 retries > 0 的 Producer 能够自动重试消息发送，避免消息丢失。\n> acks=all\n> 设置 acks = all。acks 是 Producer 的一个参数，代表了你对“已提交”消息的定义。如果设置成 all，则表明所有副本 Broker 都要接收到消息，该消息才算是“已提交”。这是最高等级的“已提交”定义。\n> max.in.flight.requests.per.connections=1\n> 该参数指定了生产者在收到服务器晌应之前可以发送多少个消息。它的值越高，就会占用越多的内存，不过也会提升吞吐量。把它设为1 可以保证消息是按照发送的顺序写入服务器的，即使发生了重试。\n> Producer要使用带有回调通知的API，也就是说不要使用 producer.send(msg)，而要使用 producer.send(msg, callback)。\n> 其他错误处理\n> 使用生产者内置的[重试机制](https://zhida.zhihu.com/search?content_id=140934648&content_type=Article&match_order=1&q=重试机制&zhida_source=entity)，可以在不造成消息丢失的情况下轻松地处理大部分错误，不过\n> 仍然需要处理其他类型的错误，例如消息大小错误、序列化错误等等。\n> **Consumer**\n> 禁用自动提交：enable.auto.commit=false\n> 消费者处理完消息之后再提交offset\n> 配置auto.offset.reset\n> 这个参数指定了在没有偏移量可提交时(比如消费者第l次启动时)或者请求的偏移量在broker上不存在时(比如数据被删了)，消费者会做些什么。\n> 这个参数有两种配置。一种是**earliest**：消费者会从分区的开始位置读取数据，不管[偏移量](https://zhida.zhihu.com/search?content_id=140934648&content_type=Article&match_order=3&q=偏移量&zhida_source=entity)是否有效，这样会导致消费者读取大量的重复数据，但可以保证最少的数据丢失。一种是**latest(默认)**，如果选择了这种配置， 消费者会从分区的末尾开始读取数据，这样可以减少重复处理消息，但很有可能会错过一些消息。',1916407199693844483,'2025-04-28 14:29:30','2025-04-28 14:29:30','2025-05-17 17:53:51',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916741642258337794,'Kafka可以保障永久不丢失数据吗','### Kafka可以保障永久不丢失数据吗？','[\"普通\",\"Kafka\"]','> \n\n上面分析了一些保障数据不丢失的措施，在一定程度上可以避免数据的丢失。但是请注意：**Kafka 只对“已提交”的消息（committed message）做有限度的持久化保证**。所以说，Kafka不能够完全保证数据不丢失，需要做出一些权衡。\n\n首先，要理解什么是**已提交的消息**，当 Kafka 的若干个 Broker 成功地接收到一条消息并写入到[日志文件](https://zhida.zhihu.com/search?content_id=140934648&content_type=Article&match_order=1&q=日志文件&zhida_source=entity)后，它们会告诉生产者程序这条消息已成功提交。此时，这条消息在 Kafka 看来就正式变为**已提交**消息了。所以说无论是ack=all，还是ack=1,不论哪种情况，Kafka 只对已提交的消息做持久化保证这件事情是不变的。\n\n其次，要理解**有限度的持久化保证**，也就是说 Kafka 不可能保证在任何情况下都做到不丢失消息。必须保证Kafka的Broker是可用的，换句话说，假如消息保存在 N 个 Kafka Broker 上，那么这个前提条件就是这 N 个 Broker 中至少有 1 个存活。只要这个条件成立，Kafka 就能保证你的这条消息永远不会丢失。\n\n总结一下，Kafka 是能做到不丢失消息的，**只不过这些消息必须是已提交的消息**，而且还要满足一定的条件。',1916407199693844483,'2025-04-28 14:29:53','2025-04-28 14:29:53','2025-05-17 17:53:51',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916741733278928897,'如何保障Kafka中的消息是有序的','### 如何保障Kafka中的消息是有序的？','[\"普通\",\"Kafuka\"]','> \n\n首先需要明确的是：**Kafka的主题是分区有序的**，如果一个主题有多个分区，那么Kafka会按照key将其发送到对应的分区中，所以，对于给定的key，与其对应的record在分区内是有序的。\n\nKafka可以保证同一个分区里的消息是有序的，即生产者按照一定的顺序发送消息，Broker就会按照这个顺序将他们写入对应的分区中，同理，消费者也会按照这个顺序来消费他们。\n\n在一些场景下，消息的顺序是非常重要的。比如，**先存钱再取钱**与**先取钱再存钱**是截然不同的两种结果。\n\n上面的问题中提到一个参数**max.in.flight.requests.per.connections=1**,该参数的作用是在重试次数大于等于1时，保证数据写入的顺序。如果该参数不为1，那么当第一个批次写入失败时，第二个批次写入成功，Broker会重试写入第一个批次，如果此时第一个批次重试写入成功，那么这两个批次消息的顺序就反过来了。\n\n一般来说，如果对消息的顺序有要求，那么在为了保障数据不丢失，需要先设置发送重试次数retries>0,同时需要把**max.in.flight.requests.per.connections**参数设为1，这样在生产者尝试发送第一批消息时，就不会有其他的消息发送给broker，虽然会影响吞吐量，但是可以保证消息的顺序。\n\n除此之外，还可以使用单分区的Topic，但是会严重影响吞吐量。',1916407199693844483,'2025-04-28 14:30:15','2025-04-28 14:30:15','2025-05-17 17:53:51',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916742054080270338,'如何确定合适的Kafka主题的分区数量','### 如何确定合适的Kafka主题的分区数量？','[\"普通\",\"Kafuka\"]','选择合适的分区数量可以达到高度并行读写和负载均衡的目的，在分区上达到均衡负载是实现吞吐量的关键。需要根据每个分区的生产者和消费者的期望吞吐量进行估计。\n\n举个栗子：假设期望读取数据的速率(吞吐量)为1GB/Sec，而一个消费者的读取速率为50MB/Sec，此时至少需要20个分区以及20个消费者(一个消费者组)。同理，如果期望生产数据的速率为1GB/Sec，而每个生产者的生产速率为100MB/Sec，此时就需要有10个分区。在这种情况下，如果设置20个分区，既可以保障1GB/Sec的生产速率，也可以保障消费者的吞吐量。通常需要将分区的数量调整为消费者或者生产者的数量，只有这样才可以同时实现生产者和消费者的吞吐量。\n\n一个简单的计算公式为：分区数 = max(生产者数量，消费者数量)\n\n生产者数量=整体生产吞吐量/每个生产者对单个分区的最大生产吞吐量\n消费者数量=整体消费吞吐量/每个消费者从单个分区消费的最大吞吐量',1916407199693844483,'2025-04-28 14:31:31','2025-04-28 14:31:31','2025-05-17 17:53:51',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916742179481571330,'如何调整生产环境中Kafka主题的分区数量','### 如何调整生产环境中Kafka主题的分区数量？','[\"普通\",\"Kafuka\"]','### 需要注意的是\n当我们增加主题的分区数量时，会违背**同一个key进行同一个分区**的事实。我们可以创建一个新的主题，使得该主题有更多的[分区数](https://zhida.zhihu.com/search?content_id=140934648&content_type=Article&match_order=8&q=分区数&zhida_source=entity)，然后暂停生产者，将旧的主题中的数据复制到新的主题中，然后将消费者和生产者切换到新的主题，操作起来会非常棘手。',1916407199693844483,'2025-04-28 14:32:01','2025-04-28 14:32:01','2025-05-17 17:53:51',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916742275937980418,'如何重平衡Kafka集群？','### 如何重平衡Kafka集群？','[\"普通\",\"Kafuka\"]','### 在下面情况发生时，需要重平衡集群：\n\n- 主题分区在整个[集群](https://zhida.zhihu.com/search?content_id=140934648&content_type=Article&match_order=4&q=集群&zhida_source=entity)里的不均衡分布造成了集群负载的不均衡。\n- broker离线造成分区不同步。\n- 新加入的broker 需要从集群里获得负载。\n\n使用**kafka-reassign-partitions.sh**命令进行重平衡',1916407199693844483,'2025-04-28 14:32:24','2025-04-28 14:32:24','2025-05-17 17:53:51',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916742373677846529,'Kafka 如何查看消费者组是否存在滞后消费','### 如何查看消费者组是否存在滞后消费？','[\"普通\",\"Kafuka\"]','我们可以使用**kafka-consumer-groups.sh**命令进行查看，比如：\n\n```text\n$ bin/kafka-consumer-groups.sh --bootstrap-server cdh02:9092 --describe --group my-group\n## 会显示下面的一些指标信息\nTOPIC PARTITION CURRENT-OFFSET LOG-END-OFFSET   LAG          CONSUMER-ID HOST CLIENT-ID\n主题   分区       当前offset      LEO           滞后消息数       消费者id     主机   客户端id\n```\n\n一般情况下，如果运行良好，**CURRENT-OFFSET**的值会与**LOG-END-OFFSET**的值非常接近。通过这个命令可以查看哪个分区的消费出现了滞后。',1916407199693844483,'2025-04-28 14:32:47','2025-04-28 14:32:47','2025-05-17 17:53:51',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916743174831853569,'列举工作中常用的几个git命令','### 列举工作中常用的几个git命令？','[\"普通\",\"git\",\"git指令\"]','新增文件的命令：git add file或者git add .\n提交文件的命令：git commit –m或者git commit –a\n查看工作区状况：git status –s\n拉取合并远程分支的操作：git fetch/git merge或者git pull\n查看提交记录命令：git reflog\n————————————————',1916407199693844483,'2025-04-28 14:35:58','2025-04-28 14:35:58','2025-05-17 17:53:51',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916743288740761601,'git 提交时发生冲突，你能解释冲突是如何产生的吗？你是如何解决的？','### 开发中，git 提交时发生冲突，你能解释冲突是如何产生的吗？你是如何解决的？','[\"普通\",\"git\"]','> \n\n开发过程中，我们都有自己的特性分支，所以冲突发生的并不多，但也碰到过。诸如公共类的公共方法，我和别人同时修改同一个文件，他提交后我再提交就会报冲突的错误。\n发生冲突，在IDE里面一般都是对比本地文件和远程分支的文件，然后把远程分支上文件的内容手工修改到本地文件，然后再提交冲突的文件使其保证与远程分支的文件一致，这样才会消除冲突，然后再提交自己修改的部分。特别要注意下，修改本地冲突文件使其与远程仓库的文件保持一致后，需要提交后才能消除冲突，否则无法继续提交。必要时可与同事交流，消除冲突。\n发生冲突，也可以使用命令。\n\n通过git stash命令，把工作区的修改提交到栈区，目的是保存工作区的修改；\n通过git pull命令，拉取远程分支上的代码并合并到本地分支，目的是消除冲突；\n通过git stash pop命令，把保存在栈区的修改部分合并到最新的工作空间中；\n————————————————\n',1916407199693844483,'2025-04-28 14:36:26','2025-04-28 14:36:26','2025-05-17 17:53:51',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916743384383475714,'git 中如果本次提交误操作，如何撤销？','### git中，如果本次提交误操作，那么如何撤销？','[\"普通\",\"git\"]','如果想撤销提交到索引区的文件，可以通过git reset HEAD file；如果想撤销提交到本地仓库的文件，可以通过git reset –soft HEAD^n恢复当前分支的版本库至上一次提交的状态，索引区和工作空间不变更；可以通过git reset –mixed HEAD^n恢复当前分支的版本库和索引区至上一次提交的状态，工作区不变更；可以通过git reset –hard HEAD^n恢复当前分支的版本库、索引区和工作空间至上一次提交的状态。\n———————————————',1916407199693844483,'2025-04-28 14:36:48','2025-04-28 14:36:48','2025-05-17 17:53:51',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916744169716568065,'git中如果我想修改提交的历史信息，应该用什么命令？','### git中如果我想修改提交的历史信息，应该用什么命令？','[\"普通\",\"git\"]','如果修改最近一次提交的历史记录，就可以用git commit –amend命令；vim编辑的方式；\n如果修改之前提交的历史记录，就需要按照下面的步骤：\n\n第一步：首先查看前三次的提交历史记录：\n\n$ git log -3\ncommit a762fcafecbd92bbde088054644e1b0586589c4b (HEAD -> slave)\nAuthor: 18073638 <18073638@cnsuning.com>\nDate:   Sat Mar 30 10:58:44 2019 +0800\n\n    four commit\n\ncommit eedbc93d58780f63dd47f8388f8217892096e89a\nAuthor: 18073638 <18073638@cnsuning.com>\nDate:   Thu Mar 28 17:19:52 2019 +0800\n\n    third commit third commit\n\ncommit 05396135eba85140602107e01e5c211d74f6c739\nAuthor: 18073638 <18073638@cnsuning.com>\nDate:   Thu Mar 28 16:56:19 2019 +0800\n\n    second commit注意：这里我们想把053961的committer对象信息修改为“second commit second commit”.\n\n第二步：执行命令git rebase –i HEAD~3，会把前3次的提交记录按照倒叙列出来；\n\npick 0539613 second commit\npick eedbc93 third commit third commit\npick a762fca four commit\n\n这里把第一行的‘pick’修改为‘edit’，然后esc + :wq退出vim编辑器；\n\n$ git rebase -i HEAD~3\nStopped at 0539613...  second commit\nYou can amend the commit now, with\n\n  git commit --amend\n\nOnce you are satisfied with your changes, run\n\n  git rebase --continue\n\n第三步：根据提示，执行git commit –amend命令，进入vim编辑器并修改提交信息。\n\n$ git commit --amend\n[detached HEAD 20fe643] second commit second commit\n Date: Thu Mar 28 16:56:19 2019 +0800\n 1 file changed, 1 insertion(+)\n第四步：然后执行git rebase –continue命令\n\n$ git rebase --continue\nSuccessfully rebased and updated refs/heads/slave.\n查看修改结果\n\n$ git log -3\ncommit 9024049ef990e79fa61295d5c2b64d70017cf412 (HEAD -> slave)\nAuthor: 18073638 <18073638@cnsuning.com>\nDate:   Sat Mar 30 10:58:44 2019 +0800\n\n    four commit\n\ncommit 79cb4e26dd300591e6352d0488802f43b65c8ba2\nAuthor: 18073638 <18073638@cnsuning.com>\nDate:   Thu Mar 28 17:19:52 2019 +0800\n\n    third commit third commit\n\ncommit 20fe643cbf80cdcc649d732065e8ebf4caf773c7\nAuthor: 18073638 <18073638@cnsuning.com>\nDate:   Thu Mar 28 16:56:19 2019 +0800\n\n    second commit second commit\n    修改成功。\n    ————————————————\n\n                            版权声明：本文为博主原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接和本声明。\n\n原文链接：https://blog.csdn.net/nobody_1/article/details/88956315',1916407199693844483,'2025-04-28 14:39:56','2025-04-28 14:39:56','2025-05-17 17:53:51',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916744273630449665,'Git中如何查看分支提交的历史记录？查看某个文件的历史记录呢？','### 如何查看分支提交的历史记录？查看某个文件的历史记录呢？','[\"普通\",\"git\"]','查看分支的提交历史记录：\n\n命令git log –number：表示查看当前分支前number个详细的提交历史记录；\n命令git log –number –pretty=oneline：在上个命令的基础上进行简化，只显示sha-1码和提交信息；\n命令git reflog –number: 表示查看所有分支前number个简化的提交历史记录；\n命令git reflog –number –pretty=oneline：显示简化的信息历史信息；\n如果要查看某文件的提交历史记录，直接在上面命令后面加上文件名即可。\n注意：如果没有number则显示全部提交次数。\n————————————————',1916407199693844483,'2025-04-28 14:40:20','2025-04-28 14:40:20','2025-05-17 17:53:51',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916744368874704898,'能不能说一下git fetch和git pull命令之间的区别？','### 能不能说一下git fetch和git pull命令之间的区别？','[\"普通\",\"git\"]','简单来说：git fetch branch是把名为branch的远程分支拉取到本地；而git pull branch是在fetch的基础上，把branch分支与当前分支进行merge；因此pull = fetch + merge。',1916407199693844483,'2025-04-28 14:40:43','2025-04-28 14:40:43','2025-05-17 17:53:51',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916744506192023554,'使用过git merge和git rebase吗？它们之间有什么区别？','### 使用过git merge和git rebase吗？它们之间有什么区别？','[\"普通\",\"git\"]','简单的说，git merge和git rebase都是合并分支的命令。\ngit merge branch会把branch分支的差异内容pull到本地，然后与本地分支的内容一并形成一个committer对象提交到主分支上，合并后的分支与主分支一致；\ngit rebase branch会把branch分支优先合并到主分支，然后把本地分支的commit放到主分支后面，合并后的分支就好像从合并后主分支又拉了一个分支一样，本地分支本身不会保留提交历史。',1916407199693844483,'2025-04-28 14:41:16','2025-04-28 14:41:16','2025-05-17 17:53:51',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916744710500765698,'能说一下git系统中HEAD、工作树和索引之间的区别吗？','### 能说一下git系统中HEAD、工作树和索引之间的区别吗？','[\"普通\",\"git\"]','**HEAD文件**  \n包含当前分支的引用（指针）；   \n**工作树**    \n是把当前分支检出到工作空间后形成的目录树，一般的开发工作都会基于工作树进行；     \n**索引index文件**    \n是对工作树进行代码修改后，通过add命令更新索引文件；GIT系统通过索引index文件生成tree对象；',1916407199693844483,'2025-04-28 14:42:05','2025-04-28 14:42:05','2025-05-17 17:53:51',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916744814947323906,'之前项目中是使用的GitFlow工作流程吗？它有什么好处？','### 之前项目中是使用的GitFlow工作流程吗？它有什么好处？','[\"普通\",\"git\"]','GitFlow可以用来管理分支。GitFlow工作流中常用的分支有下面几类：\n\n- master分支：最为稳定功能比较完整的随时可发布的代码，即代码开发完成，经过测试，没有明显的bug，才能合并到 master 中。请注意永远不要在 master 分支上直接开发和提交代码，以确保 master 上的代码一直可用；\n- develop分支；用作平时开发的主分支，并一直存在，永远是功能最新最全的分支，包含所有要发布 到下一个 release 的代码，主要用于合并其他分支，比如 feature 分支； 如果修改代码，新建 feature 分支修改完再合并到 develop 分支。所有的 feature、release 分支都是从 develop 分支上拉的。\n- feature分支；这个分支主要是用来开发新的功能，一旦开发完成，通过测试没问题（这个测试，测试新功能没问题），我们合并回develop 分支进入下一个 release\n- release分支；用于发布准备的专门分支。当开发进行到一定程度，或者说快到了既定的发布日，可以发布时，建立一个 release 分支并指定版本号(可以在 finish 的时候添加)。开发人员可以对 release 分支上的代码进行集中测试和修改bug。（这个测试，测试新功能与已有的功能是否有冲突，兼容性）全部完成经过测试没有问题后，将 release 分支上的代码合并到 master 分支和 develop 分支\n- hotfix分支；用于修复线上代码的bug。**从 master 分支上拉。**完成 hotfix 后，打上 tag 我们合并回 master 和 develop 分支。\n  GitFlow主要工作流程\n- 1.初始化项目为gitflow , 默认创建master分支 , 然后从master拉取第一个develop分支\n- 2.从develop拉取feature分支进行编码开发(多个开发人员拉取多个feature同时进行并行开发 , 互不影响)\n- 3.feature分支完成后 , 合并到develop(不推送 , feature功能完成还未提测 , 推送后会影响其他功能分支的开发)；合并feature到develop , 可以选择删除当前feature , 也可以不删除。但当前feature就不可更改了，必须从release分支继续编码修改\n\n4.从develop拉取release分支进行提测 , 提测过程中在release分支上修改BUG\n5.release分支上线后 , 合并release分支到develop/master并推送；合并之后，可选删除当前release分支，若不删除，则当前release不可修改。线上有问题也必须从master拉取hotfix分支进行修改；\n6.上线之后若发现线上BUG , 从master拉取hotfix进行BUG修改；\n7.hotfix通过测试上线后，合并hotfix分支到develop/master并推送；合并之后，可选删除当前hotfix ，若不删除，则当前hotfix不可修改，若补丁未修复，需要从master拉取新的hotfix继续修改；\n8.当进行一个feature时 , 若develop分支有变动 , 如其他开发人员完成功能并上线 , 则需要将完成的功能合并到自己分支上，即合并develop到当前feature分支；\n9.当进行一个release分支时 , 若develop分支有变动 , 如其他开发人员完成功能并上线 , 则需要将完成的功能合并到自己分支上，即合并develop到当前release分支 (!!! 因为当前release分支通过测试后会发布到线上 , 如果不合并最新的develop分支 , 就会发生丢代码的情况)；\nGitFlow的好处\n为不同的分支分配一个明确的角色，并定义分支之间如何交互以及什么时间交互；可以帮助大型项目理清分支之间的关系，简化分支的复杂度。\n————————————————\n\n                            版权声明：本文为博主原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接和本声明。\n\n原文链接：https://blog.csdn.net/nobody_1/article/details/88956315',1916407199693844483,'2025-04-28 14:42:29','2025-04-28 14:42:29','2025-05-17 17:53:51',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916745563206963202,'链表，队列和栈的区别','### 链表，队列和栈的区别','[\"普通\",\"数据结构与算法\"]','链表是一种物理存储单元上非连续的一种数据结构，看名字我们就知道他是一种链式的结构，就像一群人手牵着手一样。链表有单向的，双向的，还有环形的。\n\n队列是一种特殊的线性表，他的特殊性在于我们只能操作他头部和尾部的元素，中间的元素我们操作不了，我们只能在他的头部进行删除，尾部进行添加。就像大家排队到银行取钱一样，先来的肯定要排到前面，后来的只能排在队尾，所有元素都要遵守这个操作，没有VIP会员，所以走后门插队的现象是不可能存在的，他是一种先进先出的数据结构。我们来看一下队列的数据结构是什么样的。\n\n栈也是一种特殊的线性表，他只能对栈顶进行添加和删除元素。栈有入栈和出栈两种操作，他就好像我们把书一本本的摞起来，最先放的书肯定是摞在下边，最后放的书肯定是摞在了最上面，摞的时候不允许从中间放进去，拿书的时候也是先从最上面开始拿，不允许从下边或中间抽出来。\n————————————————\n\n                            版权声明：本文为博主原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接和本声明。\n\n原文链接：https://blog.csdn.net/mengchuan6666/article/details/119516407',1916407199693844483,'2025-04-28 14:45:28','2025-04-28 14:45:28','2025-05-17 17:53:51',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916746646339833857,'什么是 AVL 树？','### 简述什么是 AVL 树？','[\"普通\",\"数据结构与算法\",\" AVL 树\"]',' AVL 树 是平衡⼆叉查找树，增加和删除节点后通过树形旋转重新达到平衡。右旋是以某个节点为中⼼， 将它沉⼊当前右⼦节点的位置，⽽让当前的左⼦节点作为新树的根节点，也称为顺时针旋转。同理左旋     是以某个节点为中⼼，将它沉⼊当前左⼦节点的位置，⽽让当前的右⼦节点作为新树的根节点，也称为    逆时针旋转。\n————————————————\n\n                            版权声明：本文为博主原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接和本声明。\n                        \n原文链接：https://blog.csdn.net/mengchuan6666/article/details/119516407',1916407199693844483,'2025-04-28 14:49:46','2025-04-28 14:49:46','2025-05-17 17:53:51',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916746801751379970,'什么是红⿊树？','### 什么是红⿊树？','[\"普通\",\"数据结构与算法\"]','红⿊树 是 1972 年发明的，称为对称⼆叉 B 树，1978 年正式命名红⿊树。主要特征是在每个节点上增加⼀个属性表示节点颜⾊，可以红⾊或⿊⾊。\n\n红⿊树和 AVL 树 类似，都是在进⾏插⼊和删除时通过旋转保持⾃身平衡，从⽽获得较⾼的查找性能。与 AVL 树 相⽐，红⿊树不追求所有递归⼦树的⾼度差不超过 1，保证从根节点到叶尾的最⻓路径不超过最短路径的 2 倍，所以最差时间复杂度是 O(logn)。\n\n红⿊树通过重新着⾊和左右旋转，更加⾼效地完成了插⼊和删除之后的⾃平衡调整。红⿊树在本质上还是⼆叉查找树，它额外引⼊了 5 个约束条件： ① 节点只能是红⾊或⿊⾊。 ② 根节点必须是⿊⾊。 ③ 所有 NIL 节点都是⿊⾊的。 ④ ⼀条路径上不能出现相邻的两个红⾊节点。 ⑤ 在任何递归⼦树中，根节点到叶⼦节点的所有路径上包含相同数⽬的⿊⾊节点。\n\n\n这五个约束条件保证了红⿊树的新增、删除、查找的最坏时间复杂度均为    O(logn)。如果⼀个树的左⼦节点或右⼦节点不存在，则均认定为⿊⾊。红⿊树的任何旋转在 3 次之内均可完成。\n\n \n————————————————\n原文链接：https://blog.csdn.net/mengchuan6666/article/details/119516407',1916407199693844483,'2025-04-28 14:50:23','2025-04-28 14:50:23','2025-05-17 17:53:51',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916746886530846721,'AVL 树和红⿊树的区别？','### AVL 树和红⿊树的区别？','[\"普通\",\"数据结构与算法\"]','红⿊树的平衡性不如 AVL 树，它维持的只是⼀种⼤致的平衡，不严格保证左右⼦树的⾼度差不超过 1。这导致节点数相同的情况下，红⿊树的⾼度可能更⾼，也就是说平均查找次数会⾼于相同情况的 AVL 树。\n\n\n在插⼊时，红⿊树和 AVL 树都能在⾄多两次旋转内恢复平衡，在删除时由于红⿊树只追求⼤致平衡，因此红⿊树⾄多三次旋转可以恢复平衡，⽽ AVL 树最多需要 O(logn) 次。AVL 树在插⼊和删除时，将向上回溯确定是否需要旋转，这个回溯的时间成本最差为 O(logn)，⽽红⿊树每次向上回溯的步⻓为 2，回溯成本低。因此⾯对频繁地插⼊与删除红⿊树更加合适。\n\n\n————————————————\n\n                            版权声明：本文为博主原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接和本声明。\n                        \n原文链接：https://blog.csdn.net/mengchuan6666/article/details/119516407',1916407199693844483,'2025-04-28 14:50:43','2025-04-28 14:50:43','2025-05-17 17:53:51',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916747055976534018,'B 树和B+ 树的区别？','### B 树和B+ 树的区别？','[\"普通\",\"数据结构与算法\"]','B 树中每个节点同时存储 key 和 data，⽽ B+ 树中只有叶⼦节点才存储 data，⾮叶⼦节点只存储 key。InnoDB 对 B+ 树进⾏了优化，在每个叶⼦节点上增加了⼀个指向相邻叶⼦节点的链表指针，形成了带有顺序指针的 B+ 树，提⾼区间访问的性能。\n\n\nB+ 树的优点在于： ① 由于 B+ 树在⾮叶⼦节点上不含数据信息，因此在内存⻚中能够存放更多的key，数据存放得更加紧密，具有更好的空间利⽤率，访问叶⼦节点上关联的数据也具有更好的缓存命     中率。 ② B+树的叶⼦结点都是相连的，因此对整棵树的遍历只需要⼀次线性遍历叶⼦节点即可。⽽ B 树则需要进⾏每⼀层的递归遍历，相邻的元素可能在内存中不相邻，所以缓存命中性没有 B+树好。但是 B 树也有优点，由于每个节点都包含 key 和 value，因此经常访问的元素可能离根节点更近，访问也更迅速。\n————————————————\n原文链接：https://blog.csdn.net/mengchuan6666/article/details/119516407',1916407199693844483,'2025-04-28 14:51:24','2025-04-28 14:51:24','2025-05-23 21:36:17',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916747153611542530,'排序有哪些分类？','### 排序有哪些分类？','[\"普通\",\"数据结构与算法\"]','排序可以分为内部排序和外部排序，在内存中进⾏的称为内部排序，当数据量很⼤时⽆法全部拷⻉到内存需要使⽤外存，称为外部排序。\n\n\n内部排序包括⽐较排序和⾮⽐较排序，⽐较排序包括插⼊/选择/交换/归并排序，⾮⽐较排序包括计数/  基数/桶排序。\n \n插⼊排序包括直接插⼊/希尔排序，选择排序包括直接选择/堆排序，交换排序包括冒泡/快速排序。\n————————————————\n           \n原文链接：https://blog.csdn.net/mengchuan6666/article/details/119516407',1916407199693844483,'2025-04-28 14:51:47','2025-04-28 14:51:47','2025-05-17 17:53:51',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916747320960077826,'直接插⼊排序的原理？','### 直接插⼊排序的原理？','[\"普通\",\"数据结构与算法\",\"直接插⼊排序\"]',' 稳定，平均/最差时间复杂度 O(n²)，元素基本有序时最好时间复杂度 O(n)，空间复杂度 O(1)。\n每⼀趟将⼀个待排序记录按其关键字的⼤⼩插⼊到已排好序的⼀组记录的适当位置上，直到所有待排序 记录全部插⼊为⽌。\n\n\n直接插⼊没有利⽤到要插⼊的序列已有序的特点，插⼊第 i 个元素时可以通过⼆分查找找到插⼊位置insertIndex，再把 i~insertIndex 之间的所有元素后移⼀位，把第 i 个元素放在插⼊位置上。\n————————————————',1916407199693844483,'2025-04-28 14:52:27','2025-04-28 14:52:27','2025-05-17 17:53:51',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916747964974485505,'从浏览器地址栏输入 url 到显示主页的过程？','### 从浏览器地址栏输入 url 到显示主页的过程？','[\"普通\",\"计算机网络\"]','### 这道题，大概的过程比较简单，但是有很多点可以细挖：DNS解析、TCP三次握手、HTTP报文格式、TCP四次挥手等等。\n\nDNS 解析：将域名解析成对应的 IP 地址。\nTCP连接：与服务器通过三次握手，建立 TCP 连接\n向服务器发送 HTTP 请求\n服务器处理请求，返回HTTp响应\n浏览器解析并渲染页面\n断开连接：TCP 四次挥手，连接结束\n————————————————\n原文链接：https://blog.csdn.net/weixin_45483322/article/details/133621948',1916407199693844483,'2025-04-28 14:55:00','2025-04-28 14:55:00','2025-05-17 17:53:51',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916748395188441089,'说说 WebSocket 与 Socket 的区别？','### 说说 WebSocket 与 Socket 的区别？','[\"普通\",\"计算机网络\"]','Socket 其实就是等于 IP 地址 + 端口 + 协议。\n具体来说，Socket 是一套标准，它完成了对 TCP/IP 的高度封装，屏蔽网络细节，以方便开发者更好地进行网络编程。\n\nWebSocket 是一个持久化的协议，它是伴随 H5 而出的协议，用来解决 http 不支持持久化连接的问题。\nSocket 一个是网编编程的标准接口，而 WebSocket 则是应用层通信协议。\n',1916407199693844483,'2025-04-28 14:56:43','2025-04-28 14:56:43','2025-05-17 17:53:51',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916748828757839873,'说⼀下 GET 和 POST 的区别？','### 说⼀下 GET 和 POST 的区别？','[\"普通\",\"计算机网络\"]','从 HTTP 报文层面来看，GET 请求将信息放在 URL，POST 将请求信息放在请求体中。这一点使得 GET 请求携带的数据量有限，因为 URL 本身是有长度限制的，而 POST 请求的数据存放在报文体中，因此对大小没有限制。而且从形式上看，GET 请求把数据放 URL 上不太安全，而 POST 请求把数据放在请求体里想比较而言安全一些。\n从数据库层面来看，GET 符合幂等性和安全性，而 POST 请求不符合。这个其实和 GET/POST 请求的作用有关。按照 HTTP 的约定，GET 请求用于查看信息，不会改变服务器上的信息；而 POST 请求用来改变服务器上的信息。正因为 GET 请求只查看信息，不改变信息，对数据库的一次或多次操作获得的结果是一致的，认为它符合幂等性。安全性是指对数据库操作没有改变数据库中的数据。\n从其他层面来看，GET 请求能够被缓存，GET 请求能够保存在浏览器的浏览记录里，GET 请求的 URL 能够保存为浏览器书签。这些都是 POST 请求所不具备的。缓存是 GET 请求被广泛应用的根本，他能够被缓存也是因为它的幂等性和安全性，除了返回结果没有其他多余的动作，因此绝大部分的 GET 请求都被 CDN 缓存起来了，大大减少了 Web 服务器的负担。\nCDN (Content Delivery Network，内容分发网络）指基于部署在各地的机房服务器，通过中心平台的负载均衡、内容分发、调度的能力，使用户就近获取所需内容，降低网络延迟，提高用户访问的响应速度和体验度。\n————————————————\n\n原文链接：https://blog.csdn.net/weixin_45483322/article/details/133621948\n\n',1916407199693844483,'2025-04-28 14:58:26','2025-04-28 14:58:26','2025-05-17 17:53:51',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916749065362722818,'GET 的长度限制是多少？','### GET 的长度限制是多少？','[\"普通\",\"计算机网络\",\"GET\"]','HTTP中的GET方法是通过URL传递数据的，但是URL本身其实并没有对数据的长度进行限制，真正限制GET长度的是浏览器。\n\n例如IE浏览器对URL的最大限制是2000多个字符，大概2kb左右，像Chrome、Firefox等浏览器支持的URL字符数更多，其中FireFox中URL的最大长度限制是65536个字符，Chrome则是8182个字符。\n\n这个长度限制也不是针对数据部分，而是针对整个URL。',1916407199693844483,'2025-04-28 14:59:23','2025-04-28 14:59:23','2025-05-17 17:53:51',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916749255532466178,'HTTP 请求的过程与原理？','### HTTP 请求的过程与原理？','[\"普通\",\"计算机网络\",\"HTTP\"]','HTTP协议定义了浏览器怎么向服务器请求文档，以及服务器怎么把文档传给浏览器。\n\n每个服务器都有一个进程，它不断监听TCP的端口80，以便发现是否有浏览器向它发出连接建立请求\n监听到连接请求，就会建立TCP连接\n浏览器向服务器发出浏览某个页面的请求，服务器接着就返回所请求的页面作为响应\n最后，释放TCP连接\n在浏览器和服务器之间的请求和响应的交互，必须按照规定的格式和遵循一定的规则，这些格式和规则就是超文本传输协议HTTP。\n\nPS:这道题和上面浏览器输入网址发生了什么那道题大差不差。\n\n',1916407199693844483,'2025-04-28 15:00:08','2025-04-28 15:00:08','2025-05-17 17:53:51',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0);
/*!40000 ALTER TABLE `question` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `question_bank`
--

DROP TABLE IF EXISTS `question_bank`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `question_bank` (
  `id` bigint NOT NULL AUTO_INCREMENT COMMENT 'id',
  `title` varchar(256) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT '标题',
  `description` text CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci COMMENT '描述',
  `picture` varchar(2048) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT '图片',
  `userId` bigint NOT NULL COMMENT '创建用户 id',
  `editTime` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '编辑时间',
  `createTime` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `updateTime` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '更新时间',
  `isDelete` tinyint NOT NULL DEFAULT '0' COMMENT '是否删除',
  `reviewStatus` int NOT NULL DEFAULT '0' COMMENT '状态：0-待审核, 1-通过, 2-拒绝',
  `reviewMessage` varchar(512) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT '审核信息',
  `reviewerId` bigint DEFAULT NULL COMMENT '审核人 id',
  `reviewTime` datetime DEFAULT NULL COMMENT '审核时间',
  `priority` int NOT NULL DEFAULT '0' COMMENT '优先级',
  `viewNum` int NOT NULL DEFAULT '0' COMMENT '浏览量',
  PRIMARY KEY (`id`),
  KEY `idx_title` (`title`)
) ENGINE=InnoDB AUTO_INCREMENT=1916713800728432643 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci COMMENT='题库';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `question_bank`
--

LOCK TABLES `question_bank` WRITE;
/*!40000 ALTER TABLE `question_bank` DISABLE KEYS */;
INSERT INTO `question_bank` VALUES (1916344439735889921,'HTML语言','HTML语言相关表题库，包括元素、属性、区块、布局、框架、脚本等等。','https://rich-tams.oss-cn-beijing.aliyuncs.com/RichInterview/683901e8fb55d1d5977c73e4.png',1916407199693844483,'2025-04-27 12:11:33','2025-04-27 12:11:33','2025-05-30 08:55:06',0,0,NULL,NULL,NULL,0,0),(1916354082939908097,'React前端框架','React前端框架相关','https://rich-tams.oss-cn-beijing.aliyuncs.com/RichInterview/68270d49e4b00cebfed6d8b0.png',1916407199693844483,'2025-04-27 12:49:52','2025-04-27 12:49:52','2025-05-16 18:02:51',0,0,NULL,NULL,NULL,0,0),(1916359022726918145,'Spring Boot 框架相关','Spring Boot 框架相关的特性、底层逻辑、原理性问题','https://rich-tams.oss-cn-beijing.aliyuncs.com/RichInterview/683901dffb55d1d5977c73e3.png',1916407199693844483,'2025-04-27 13:09:29','2025-04-27 13:09:29','2025-05-30 08:54:57',0,0,NULL,NULL,NULL,0,0),(1916365992301211649,'JavaScript 语言','JavaScript 语言特性、运行机制','https://rich-tams.oss-cn-beijing.aliyuncs.com/RichInterview/68270e05e4b00cebfed6d8b4.png',1916407199693844483,'2025-04-27 13:37:11','2025-04-27 13:37:11','2025-05-16 18:05:58',0,0,NULL,NULL,NULL,0,0),(1916370321087180802,'MySQL 相关','MySQL 相关语法、特性、部署等','https://rich-tams.oss-cn-beijing.aliyuncs.com/RichInterview/68270f7ae4b00cebfed6d8be.png',1916407199693844483,'2025-04-27 13:54:23','2025-04-27 13:54:23','2025-05-16 18:12:14',0,0,NULL,NULL,NULL,0,0),(1916370715666329601,'Elastic Stack 相关','Elasticsearch 的相关生态下的知识，包括语法、特性、部署等','https://rich-tams.oss-cn-beijing.aliyuncs.com/RichInterview/680dc773e4b03512b901f06c.png',1916407199693844483,'2025-04-27 13:55:57','2025-04-27 13:55:57','2025-04-27 16:30:39',1,0,NULL,NULL,NULL,0,0),(1916372469078339585,'CSS 相关','CSS 相关的语言、特性、生态等','https://rich-tams.oss-cn-beijing.aliyuncs.com/RichInterview/68270e2ce4b00cebfed6d8b5.png',1916407199693844483,'2025-04-27 14:02:55','2025-04-27 14:02:55','2025-05-16 18:06:37',0,0,NULL,NULL,NULL,0,0),(1916376999794880514,'Elasticsearch 相关','Elasticsearch 的相关生态下的知识，包括语法、特性、部署等','https://rich-tams.oss-cn-beijing.aliyuncs.com/RichInterview/68270fb6e4b00cebfed6d8bf.png',1916407199693844483,'2025-04-27 14:20:55','2025-04-27 14:20:55','2025-05-16 18:13:12',0,0,NULL,NULL,NULL,0,0),(1916449283243102210,'数据结构与算法','数据结构与算法相关面试题','https://rich-tams.oss-cn-beijing.aliyuncs.com/RichInterview/68270e63e4b00cebfed6d8b6.png',1916407199693844483,'2025-04-27 19:08:09','2025-04-27 19:08:09','2025-05-16 18:07:33',0,0,NULL,NULL,NULL,0,0),(1916454085138173954,'计算机网络相关','计算机网络相关知识','https://rich-tams.oss-cn-beijing.aliyuncs.com/RichInterview/68270dbae4b00cebfed6d8b1.png',1916407199693844483,'2025-04-27 19:27:14','2025-04-27 19:27:14','2025-05-16 18:04:49',0,0,NULL,NULL,NULL,0,0),(1916454314218475521,'计算机组成原理','计算机组成原理相关知识','https://rich-tams.oss-cn-beijing.aliyuncs.com/RichInterview/68270de5e4b00cebfed6d8b3.png',1916407199693844483,'2025-04-27 19:28:09','2025-04-27 19:28:09','2025-05-16 18:05:27',0,0,NULL,NULL,NULL,0,0),(1916459456988827650,'Redis 相关','Redis 相关','https://rich-tams.oss-cn-beijing.aliyuncs.com/RichInterview/68270f58e4b00cebfed6d8bd.png',1916407199693844483,'2025-04-27 19:48:35','2025-04-27 19:48:35','2025-05-16 18:11:36',0,0,NULL,NULL,NULL,0,0),(1916462821806297089,'VUE 相关','VUE 相关知识','https://rich-tams.oss-cn-beijing.aliyuncs.com/RichInterview/68270d2fe4b00cebfed6d8af.png',1916407199693844483,'2025-04-27 20:01:57','2025-04-27 20:01:57','2025-05-16 18:02:24',0,0,NULL,NULL,NULL,0,0),(1916706414055772161,'自我认知与求职动机','自我认知与求职动机类面试题','https://rich-tams.oss-cn-beijing.aliyuncs.com/RichInterview/68270ef4e4b00cebfed6d8bb.png',1916407199693844483,'2025-04-28 12:09:54','2025-04-28 12:09:54','2025-05-16 18:09:57',0,0,NULL,NULL,NULL,0,0),(1916712642605600769,'Git 相关','Git 相关面试题','https://rich-tams.oss-cn-beijing.aliyuncs.com/RichInterview/68270e96e4b00cebfed6d8b9.png',1916407199693844483,'2025-04-28 12:34:39','2025-04-28 12:34:39','2025-05-16 18:08:23',0,0,NULL,NULL,NULL,0,0),(1916713800728432642,'Kafka 相关','Kafka 相关面试题','https://rich-tams.oss-cn-beijing.aliyuncs.com/RichInterview/68270f3ae4b00cebfed6d8bc.png',1916407199693844483,'2025-04-28 12:39:15','2025-04-28 12:39:15','2025-05-16 18:11:07',0,0,NULL,NULL,NULL,0,0);
/*!40000 ALTER TABLE `question_bank` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `question_bank_hotspot`
--

DROP TABLE IF EXISTS `question_bank_hotspot`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `question_bank_hotspot` (
  `id` bigint NOT NULL AUTO_INCREMENT COMMENT 'id',
  `questionBankId` bigint NOT NULL COMMENT '题目 id',
  `viewNum` int NOT NULL DEFAULT '0' COMMENT '浏览量',
  `starNum` int NOT NULL DEFAULT '0' COMMENT '点赞量',
  `forwardNum` int NOT NULL DEFAULT '0' COMMENT '转发量',
  `collectNum` int NOT NULL DEFAULT '0' COMMENT '收藏量',
  `commentNum` int NOT NULL DEFAULT '0' COMMENT '评论量',
  `createTime` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `updateTime` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '更新时间',
  PRIMARY KEY (`id`),
  UNIQUE KEY `question_bank_id` (`questionBankId`)
) ENGINE=InnoDB AUTO_INCREMENT=1929448270568882179 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci COMMENT='题库热点表';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `question_bank_hotspot`
--

LOCK TABLES `question_bank_hotspot` WRITE;
/*!40000 ALTER TABLE `question_bank_hotspot` DISABLE KEYS */;
INSERT INTO `question_bank_hotspot` VALUES (1926489634448101378,1916344439735889921,29,15,0,0,0,'2025-05-25 12:04:55','2025-06-02 14:12:21'),(1926506002400780289,1916712642605600769,20,25,0,0,0,'2025-05-25 13:09:58','2025-06-02 17:57:16'),(1926513944915189762,1916706414055772161,14,17,0,0,0,'2025-05-25 13:41:32','2025-06-02 14:12:21'),(1926514418301116418,1916459456988827650,5,17,0,0,0,'2025-05-25 13:43:24','2025-06-02 14:12:21'),(1926533927602855938,1916370321087180802,6,16,0,0,0,'2025-05-25 15:00:56','2025-06-02 16:01:26'),(1926533960641388545,1916372469078339585,4,15,0,0,0,'2025-05-25 15:01:04','2025-06-02 14:12:21'),(1926533969738833921,1916376999794880514,5,15,0,0,0,'2025-05-25 15:01:06','2025-06-02 14:12:21'),(1926533998453039106,1916462821806297089,5,16,0,0,0,'2025-05-25 15:01:13','2025-06-02 14:12:21'),(1926534594132287489,1916365992301211649,7,15,0,0,0,'2025-05-25 15:03:35','2025-06-02 14:12:21'),(1926534643436331009,1916454314218475521,10,17,0,0,0,'2025-05-25 15:03:46','2025-06-02 14:12:21'),(1926534656216375297,1916454085138173954,1,15,0,0,0,'2025-05-25 15:03:49','2025-06-02 14:12:21'),(1927714044257599490,1916713800728432642,3,16,0,0,0,'2025-05-28 21:10:18','2025-06-02 14:12:21'),(1929448270568882178,1916354082939908097,1,1,0,0,0,'2025-06-02 16:01:29','2025-06-02 16:01:31');
/*!40000 ALTER TABLE `question_bank_hotspot` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `question_bank_question`
--

DROP TABLE IF EXISTS `question_bank_question`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `question_bank_question` (
  `id` bigint NOT NULL AUTO_INCREMENT COMMENT 'id',
  `questionBankId` bigint NOT NULL COMMENT '题库 id',
  `questionId` bigint NOT NULL COMMENT '题目 id',
  `userId` bigint NOT NULL COMMENT '创建用户 id',
  `createTime` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `updateTime` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '更新时间',
  `questionOrder` int NOT NULL DEFAULT '0' COMMENT '题目顺序（题号）',
  PRIMARY KEY (`id`),
  UNIQUE KEY `questionBankId` (`questionBankId`,`questionId`)
) ENGINE=InnoDB AUTO_INCREMENT=1929463426648637442 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci COMMENT='题库题目';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `question_bank_question`
--

LOCK TABLES `question_bank_question` WRITE;
/*!40000 ALTER TABLE `question_bank_question` DISABLE KEYS */;
INSERT INTO `question_bank_question`
/*!40000 ALTER TABLE `question_bank_question` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `question_hotspot`
--

DROP TABLE IF EXISTS `question_hotspot`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `question_hotspot` (
  `id` bigint NOT NULL AUTO_INCREMENT COMMENT 'id',
  `questionId` bigint NOT NULL COMMENT '题目 id',
  `viewNum` int NOT NULL DEFAULT '0' COMMENT '浏览量',
  `starNum` int NOT NULL DEFAULT '0' COMMENT '点赞量',
  `forwardNum` int NOT NULL DEFAULT '0' COMMENT '转发量',
  `collectNum` int NOT NULL DEFAULT '0' COMMENT '收藏量',
  `commentNum` int NOT NULL DEFAULT '0' COMMENT '评论量',
  `createTime` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `updateTime` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '更新时间',
  PRIMARY KEY (`id`),
  UNIQUE KEY `idx_question_id` (`questionId`)
) ENGINE=InnoDB AUTO_INCREMENT=1931253671555788802 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci COMMENT='题目热点表';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `question_hotspot`
--

LOCK TABLES `question_hotspot` WRITE;
/*!40000 ALTER TABLE `question_hotspot` DISABLE KEYS */;
INSERT INTO `question_hotspot` VALUES (1925831834214629377,1916718663134728194,22,25,0,0,0,'2025-05-23 16:31:04','2025-06-02 14:13:12'),(1925831839289737217,1916460490901540866,27,35,0,0,0,'2025-05-23 16:31:05','2025-06-02 14:13:12'),(1925831851981701122,1916718967427289089,7,52,0,0,0,'2025-05-23 16:31:08','2025-06-02 14:13:12'),(1925831859703414786,1916718847751213058,11,38,0,0,0,'2025-05-23 16:31:10','2025-06-02 14:13:12'),(1925831866116505602,1916718753945604097,20,59,0,0,0,'2025-05-23 16:31:11','2025-06-02 14:13:12'),(1925832312382062595,1916459725503975426,37,33,0,0,0,'2025-05-23 16:32:58','2025-06-02 14:13:12'),(1925832317448781826,1916459890705027073,59,101,0,0,0,'2025-05-23 16:32:59','2025-06-02 14:13:12'),(1925832365595197441,1916460086386085890,46,49,0,0,0,'2025-05-23 16:33:10','2025-06-02 14:13:12'),(1925901047373611009,1916460227167899649,33,31,0,0,0,'2025-05-23 21:06:05','2025-06-02 14:13:12'),(1925905177223741442,1916719172121907202,80,88,0,0,0,'2025-05-23 21:22:30','2025-06-02 14:13:12'),(1925908138310090753,1916748828757839873,52,68,0,0,0,'2025-05-23 21:34:16','2025-06-02 14:13:12'),(1925908148183482370,1916748395188441089,73,82,0,0,0,'2025-05-23 21:34:18','2025-06-02 14:13:12'),(1925908425150152706,1916747055976534018,18,30,0,0,0,'2025-05-23 21:35:24','2025-06-02 14:48:13'),(1925910181431066626,1916746801751379970,53,61,0,0,0,'2025-05-23 21:42:23','2025-06-02 14:13:12'),(1925910199642734593,1916449833166688257,3,91,0,0,0,'2025-05-23 21:42:27','2025-06-02 14:13:12'),(1926256267752390657,1916719294234873857,32,41,0,0,0,'2025-05-24 20:37:37','2025-06-02 14:13:12'),(1926264561841750018,1916711974440390657,4,16,0,0,0,'2025-05-24 21:10:34','2025-06-02 14:13:12'),(1926264576047857665,1916712194989477889,76,57,0,0,0,'2025-05-24 21:10:37','2025-06-07 16:37:44'),(1926265454704214017,1916712393845624833,15,51,0,0,0,'2025-05-24 21:14:07','2025-06-07 16:37:04'),(1926266296010293249,1916712582006296577,18,31,0,0,0,'2025-05-24 21:17:27','2025-06-07 16:36:58'),(1926490501616324610,1916350704595808257,49,49,0,0,0,'2025-05-25 12:08:22','2025-06-07 16:55:55'),(1926491721307344898,1916743174831853569,13,16,0,0,0,'2025-05-25 12:13:13','2025-06-07 16:37:56'),(1926493888315478017,1916744169716568065,64,38,0,0,0,'2025-05-25 12:21:50','2025-06-07 16:40:43'),(1926493898667020290,1916744506192023554,55,46,0,0,0,'2025-05-25 12:21:52','2025-06-07 16:35:49'),(1926493919869227009,1916744368874704898,79,37,0,0,0,'2025-05-25 12:21:57','2025-06-02 17:27:54'),(1926513153169006594,1916711366689935362,6,47,0,0,0,'2025-05-25 13:38:23','2025-06-02 17:02:49'),(1926513955862323201,1916708802133086210,43,18,0,0,0,'2025-05-25 13:41:34','2025-06-02 14:13:12'),(1926514009377447937,1916709526904623105,20,20,0,0,0,'2025-05-25 13:41:47','2025-06-02 14:13:12'),(1926514042667638785,1916709727719510017,10,21,0,0,0,'2025-05-25 13:41:55','2025-06-02 14:13:12'),(1926514051144327171,1916710020809084929,73,27,0,0,0,'2025-05-25 13:41:57','2025-06-02 14:13:12'),(1926514077346144257,1916710255434256385,42,27,0,0,0,'2025-05-25 13:42:03','2025-06-02 14:13:12'),(1926514575390384130,1916719066412863490,28,24,0,0,0,'2025-05-25 13:44:02','2025-06-02 14:13:12'),(1926517192698994690,1916746646339833857,86,52,0,0,0,'2025-05-25 13:54:26','2025-06-02 14:13:12'),(1926517217000792066,1916747964974485505,17,26,0,0,0,'2025-05-25 13:54:32','2025-06-02 14:13:12'),(1926546971485642753,1916457374667886593,53,28,0,0,0,'2025-05-25 15:52:46','2025-06-02 14:13:12'),(1927193488206643202,1916378340617400322,19,17,0,0,0,'2025-05-27 10:41:47','2025-06-06 21:47:39'),(1927193513154363393,1916401120159248386,86,40,0,0,0,'2025-05-27 10:41:53','2025-06-06 21:46:55'),(1927193516782436353,1916402006881251329,15,16,0,0,0,'2025-05-27 10:41:54','2025-06-06 21:46:54'),(1927272766587908097,1916743288740761601,19,19,0,0,0,'2025-05-27 15:56:49','2025-06-07 16:40:55'),(1927272770408919042,1916743384383475714,86,43,0,0,0,'2025-05-27 15:56:50','2025-06-07 16:40:55'),(1927272772011143170,1916744273630449665,97,52,0,0,0,'2025-05-27 15:56:50','2025-06-07 16:40:39'),(1927563200757350402,1916352548336349186,54,46,0,0,0,'2025-05-28 11:10:54','2025-06-07 16:56:09'),(1927563672260034562,1916354548981608450,49,50,0,0,0,'2025-05-28 11:12:46','2025-06-02 16:52:11'),(1927563683446243330,1916356203420626945,25,19,0,0,0,'2025-05-28 11:12:49','2025-06-02 16:11:23'),(1927563802577059842,1916464134023663618,41,46,0,0,0,'2025-05-28 11:13:17','2025-06-02 14:13:12'),(1927563813306089474,1916717280947982338,45,39,0,0,0,'2025-05-28 11:13:20','2025-06-02 14:13:12'),(1927563825524097026,1916717025208684546,35,18,0,0,0,'2025-05-28 11:13:23','2025-06-02 14:13:12'),(1927714076444688385,1916714122926477314,21,17,0,0,0,'2025-05-28 21:10:25','2025-06-02 14:13:12'),(1927714098880020481,1916741544950484994,34,45,0,0,0,'2025-05-28 21:10:31','2025-06-02 14:13:12'),(1927714116181524482,1916742275937980418,10,24,0,0,0,'2025-05-28 21:10:35','2025-06-02 14:13:12'),(1928247276824694785,1916747153611542530,2,17,0,0,0,'2025-05-30 08:29:10','2025-06-02 14:13:12'),(1928247285246857218,1916747320960077826,1,16,0,0,0,'2025-05-30 08:29:12','2025-06-02 14:13:12'),(1928763239336787971,1916746886530846721,2,15,0,0,0,'2025-05-31 18:39:25','2025-06-02 14:13:12'),(1929416249083785218,1916449639993823233,3,16,0,0,0,'2025-06-02 13:54:15','2025-06-02 14:13:12'),(1929416260370657281,1916450491613696001,1,15,0,0,0,'2025-06-02 13:54:17','2025-06-02 14:13:12'),(1929420378409627650,1916453798956617730,1,16,0,0,0,'2025-06-02 14:10:39','2025-06-02 14:13:12'),(1929429930194599939,1916452612513845250,1,1,0,0,0,'2025-06-02 14:48:37','2025-06-02 14:48:38'),(1929441950750998531,1916744710500765698,2,0,0,0,0,'2025-06-02 15:36:23','2025-06-02 16:00:49'),(1929443310225588226,1916744814947323906,3,1,0,0,0,'2025-06-02 15:41:47','2025-06-07 16:36:48'),(1929448293918572546,1916354837247733761,4,1,0,0,0,'2025-06-02 16:01:35','2025-06-02 16:55:18'),(1929452191702056962,1916356962170220545,1,1,0,0,0,'2025-06-02 16:17:04','2025-06-02 16:19:40'),(1929453816772558851,1916357337950498818,1,1,0,0,0,'2025-06-02 16:23:32','2025-06-02 16:24:48'),(1929456106002710529,1916358212882313218,11,3,0,0,0,'2025-06-02 16:32:37','2025-06-02 16:51:54'),(1929460965045174274,1916355617795125250,2,0,0,0,0,'2025-06-02 16:51:56','2025-06-02 16:52:12'),(1929461066488610818,1916348763044098049,6,1,0,0,0,'2025-06-02 16:52:20','2025-06-07 16:56:03'),(1929461320676016130,1916349763737923586,11,3,0,0,0,'2025-06-02 16:53:21','2025-06-07 16:56:02'),(1929461629091577858,1916355314983153666,1,1,0,0,0,'2025-06-02 16:54:34','2025-06-02 16:54:35'),(1930984018795319298,1916402693220380673,5,0,0,0,0,'2025-06-06 21:44:00','2025-06-06 21:46:53'),(1930984198747738113,1916402873424457730,2,0,0,0,0,'2025-06-06 21:44:43','2025-06-06 21:46:53'),(1931247639618150401,1916353575588507649,3,2,0,0,0,'2025-06-07 15:11:32','2025-06-07 16:14:17'),(1931253671555788801,1916351710326992898,4,0,0,0,0,'2025-06-07 15:35:30','2025-06-07 16:56:10');
/*!40000 ALTER TABLE `question_hotspot` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `user`
--

DROP TABLE IF EXISTS `user`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `user` (
  `id` bigint NOT NULL AUTO_INCREMENT COMMENT 'id',
  `userAccount` varchar(256) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL COMMENT '账号',
  `userPassword` varchar(512) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL COMMENT '密码',
  `unionId` varchar(256) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT '微信开放平台id',
  `mpOpenId` varchar(256) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT '公众号openId',
  `userName` varchar(256) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT '用户昵称',
  `userAvatar` varchar(1024) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT '用户头像',
  `userProfile` varchar(512) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT '用户简介',
  `userRole` varchar(256) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT 'user' COMMENT '用户角色：user/admin/ban',
  `editTime` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '编辑时间',
  `createTime` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `updateTime` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '更新时间',
  `isDelete` tinyint NOT NULL DEFAULT '0' COMMENT '是否删除',
  `vipExpireTime` datetime DEFAULT NULL COMMENT '会员过期时间',
  `vipCode` varchar(128) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT '会员兑换码',
  `vipNumber` bigint DEFAULT NULL COMMENT '会员编号',
  `shareCode` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT '分享码',
  `inviteUser` bigint DEFAULT NULL COMMENT '邀请用户 id',
  `previousQuestionID` bigint DEFAULT NULL COMMENT '最近刷题ID',
  `phoneNumber` varchar(20) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT '手机号',
  `email` varchar(256) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT '邮箱',
  `grade` varchar(50) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT '年级',
  `workExperience` varchar(512) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT '工作经验',
  `expertiseDirection` varchar(512) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT '擅长方向',
  PRIMARY KEY (`id`),
  KEY `idx_unionId` (`unionId`)
) ENGINE=InnoDB AUTO_INCREMENT=1931919206299779075 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci COMMENT='用户';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `user`
--

LOCK TABLES `user` WRITE;
/*!40000 ALTER TABLE `user` DISABLE KEYS */;
INSERT INTO `user` VALUES (1916407199693844482,'user1','9665755c5e91617ffd8b936710dc243f',NULL,NULL,'普通用户1','https://rich-tams.oss-cn-beijing.aliyuncs.com/RichInterview/6827132be4b00cebfed6d8c2.jpg','用于测试的普通用户，权限为普通用户权限。','user','2025-04-27 16:20:56','2025-04-27 16:20:56','2025-06-07 16:59:33',0,NULL,NULL,NULL,NULL,NULL,1916743384383475714,NULL,NULL,NULL,NULL,NULL),(1916407199693844483,'MOJIE','921e10c6021a6d62dd5bfd58b1a7c8ce',NULL,NULL,'管理员用户','https://rich-tams.oss-cn-beijing.aliyuncs.com/RichInterview/68287d91edb5c5b7e1d9ad29.png','管理员账户','admin','2025-04-23 00:01:42','2025-04-23 00:01:42','2025-06-09 13:01:28',0,NULL,NULL,NULL,NULL,NULL,1916743288740761601,'18888888888','DRC9941@outlook.com','毕业在职','三年JAVA全栈','全栈开发'),(1916407258225356802,'user2','9665755c5e91617ffd8b936710dc243f',NULL,NULL,'普通用户2','https://rich-tams.oss-cn-beijing.aliyuncs.com/RichInterview/682712fee4b00cebfed6d8c1.jpg','用于测试的普通用户，权限为普通用户权限。','user','2025-04-27 16:21:10','2025-04-27 16:21:10','2025-06-09 12:08:46',0,NULL,NULL,NULL,NULL,NULL,NULL,'15966279907',NULL,NULL,NULL,NULL),(1916408111602642946,'user3','9665755c5e91617ffd8b936710dc243f',NULL,NULL,'普通用户3','https://rich-tams.oss-cn-beijing.aliyuncs.com/RichInterview/682712fee4b00cebfed6d8c1.jpg','当前用户很懒，什么都没留下','user','2025-04-27 16:24:33','2025-04-27 16:24:33','2025-06-09 12:21:19',0,NULL,NULL,NULL,NULL,NULL,1916351710326992898,'15966666666',NULL,NULL,NULL,NULL),(1916408111602642947,'user4','9665755c5e91617ffd8b936710dc243f',NULL,NULL,'普通用户4','https://rich-tams.oss-cn-beijing.aliyuncs.com/RichInterview/682712fee4b00cebfed6d8c1.jpg','当前用户很懒，什么都没留下','user','2025-04-27 19:44:24','2025-04-27 19:44:24','2025-05-16 18:27:17',0,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1916408111602642948,'user5','9665755c5e91617ffd8b936710dc243f',NULL,NULL,'普通用户5','https://rich-tams.oss-cn-beijing.aliyuncs.com/RichInterview/682712fee4b00cebfed6d8c1.jpg','当前用户很懒，什么都没留下','user','2025-04-27 19:44:24','2025-04-27 19:44:24','2025-05-16 18:27:21',0,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1916408111602642949,'user6','9665755c5e91617ffd8b936710dc243f',NULL,NULL,'普通用户6','https://rich-tams.oss-cn-beijing.aliyuncs.com/RichInterview/682712fee4b00cebfed6d8c1.jpg','当前用户很懒，什么都没留下','user','2025-04-27 19:44:24','2025-04-27 19:44:24','2025-05-16 18:27:22',0,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1916408111602642950,'user7','9665755c5e91617ffd8b936710dc243f',NULL,NULL,'普通用户7','https://rich-tams.oss-cn-beijing.aliyuncs.com/RichInterview/682712fee4b00cebfed6d8c1.jpg','当前用户很懒，什么都没留下','user','2025-04-27 19:44:24','2025-04-27 19:44:24','2025-05-16 18:27:23',0,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1916408111602642951,'user8','9665755c5e91617ffd8b936710dc243f',NULL,NULL,'普通用户8','https://rich-tams.oss-cn-beijing.aliyuncs.com/RichInterview/682712fee4b00cebfed6d8c1.jpg','当前用户很懒，什么都没留下','user','2025-04-27 19:44:24','2025-04-27 19:44:24','2025-05-16 18:27:25',0,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1916408111602642952,'user9','9665755c5e91617ffd8b936710dc243f',NULL,NULL,'普通用户9','https://rich-tams.oss-cn-beijing.aliyuncs.com/RichInterview/682712fee4b00cebfed6d8c1.jpg','当前用户很懒，什么都没留下','user','2025-04-27 19:44:24','2025-04-27 19:44:24','2025-05-16 18:27:26',0,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1916408111602642953,'user10','9665755c5e91617ffd8b936710dc243f',NULL,NULL,'普通用户10','https://rich-tams.oss-cn-beijing.aliyuncs.com/RichInterview/682712fee4b00cebfed6d8c1.jpg','当前用户很懒，什么都没留下','user','2025-04-27 19:44:24','2025-04-27 19:44:24','2025-05-16 18:27:29',0,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1916408111602642959,'user11','9665755c5e91617ffd8b936710dc243f',NULL,NULL,'普通用户11','https://rich-tams.oss-cn-beijing.aliyuncs.com/RichInterview/682712fee4b00cebfed6d8c1.jpg','当前用户很懒，什么都没留下','user','2025-04-27 19:44:24','2025-04-27 19:44:24','2025-05-16 18:27:28',0,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1917456377496850434,'123456','921e10c6021a6d62dd5bfd58b1a7c8ce',NULL,NULL,'123456','https://rich-tams.oss-cn-beijing.aliyuncs.com/RichInterview/682712fee4b00cebfed6d8c1.jpg','当前用户很懒，什么都没留下','user','2025-04-30 13:49:59','2025-04-30 13:49:59','2025-05-16 18:27:30',0,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1921129119718895618,'abc12345','167f4d766eb5ead1b9dadd67351142da',NULL,NULL,'abc12345','https://rich-tams.oss-cn-beijing.aliyuncs.com/RichInterview/682712fee4b00cebfed6d8c1.jpg','当前用户很懒，什么都没留下','user','2025-05-10 17:04:09','2025-05-10 17:04:09','2025-05-16 18:27:31',0,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1921129314200383490,'abc123456','167f4d766eb5ead1b9dadd67351142da',NULL,NULL,'abc123456','https://rich-tams.oss-cn-beijing.aliyuncs.com/RichInterview/682712fee4b00cebfed6d8c1.jpg','当前用户很懒，什么都没留下','user','2025-05-10 17:04:56','2025-05-10 17:04:56','2025-05-16 18:27:32',0,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1931594955231457281,'123123123','283e09eec80f77d7fc758a48021cdba3',NULL,NULL,'asfasgqawsfgsagf','https://rich-tams.oss-cn-beijing.aliyuncs.com/LOGO.jpg','当前用户很懒，什么都没留下','user','2025-06-08 14:11:39','2025-06-08 14:11:39','2025-06-08 14:31:31',0,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'safasf',NULL,NULL,NULL),(1931605315250307074,'MooJieTest','b4e17a9d99954c8b93f1f4a3f21b7bdc',NULL,NULL,'莫桀','https://rich-tams.oss-cn-beijing.aliyuncs.com/LOGO.jpg','当前用户很懒，什么都没留下','user','2025-06-08 14:52:49','2025-06-08 14:52:49','2025-06-08 14:52:49',0,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1931611416838553602,'asfasgasgg','b4e17a9d99954c8b93f1f4a3f21b7bdc',NULL,NULL,'莫桀','https://rich-tams.oss-cn-beijing.aliyuncs.com/LOGO.jpg','当前用户很懒，什么都没留下','user','2025-06-08 15:17:04','2025-06-08 15:17:04','2025-06-08 15:17:04',0,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1931612201521590273,'asffasf','b4e17a9d99954c8b93f1f4a3f21b7bdc',NULL,NULL,'莫桀','https://rich-tams.oss-cn-beijing.aliyuncs.com/LOGO.jpg','当前用户很懒，什么都没留下','user','2025-06-08 15:20:11','2025-06-08 15:20:11','2025-06-08 15:20:11',0,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),(1931612408556679170,'asffasff','921e10c6021a6d62dd5bfd58b1a7c8ce',NULL,NULL,'莫桀','https://rich-tams.oss-cn-beijing.aliyuncs.com/LOGO.jpg','当前用户很懒，什么都没留下','user','2025-06-08 15:21:00','2025-06-08 15:21:00','2025-06-08 15:21:39',0,NULL,NULL,NULL,NULL,NULL,NULL,'15966279908','DRC9941@163.com','asf','asd','待完善'),(1931617734760677377,'111111111','27ef2ae4a9d9667615d26c69dadef022',NULL,NULL,'案说法爱是付出','https://rich-tams.oss-cn-beijing.aliyuncs.com/LOGO.jpg','当前用户很懒，什么都没留下','user','2025-06-08 15:42:10','2025-06-08 15:42:10','2025-06-08 15:42:10',0,NULL,NULL,NULL,NULL,NULL,NULL,'15699995555','待完善','待完善','待完善','待完善'),(1931629428937412609,'455644asd','921e10c6021a6d62dd5bfd58b1a7c8ce',NULL,NULL,'MOJIE','https://rich-tams.oss-cn-beijing.aliyuncs.com/LOGO.jpg','当前用户很懒，什么都没留下','user','2025-06-08 16:28:38','2025-06-08 16:28:38','2025-06-08 16:28:38',0,NULL,NULL,NULL,NULL,NULL,NULL,'15966259999','待完善','大学三年级','待完善','后端开发'),(1931919206299779074,'MOJIE2','9665755c5e91617ffd8b936710dc243f',NULL,NULL,'MOJIE2','https://rich-tams.oss-cn-beijing.aliyuncs.com/LOGO.jpg','当前用户很懒，什么都没留下','user','2025-06-09 11:40:06','2025-06-09 11:40:06','2025-06-09 11:40:32',0,NULL,NULL,NULL,NULL,NULL,NULL,'15966279907','DRC9941@163.com','大学','','全栈开发');
/*!40000 ALTER TABLE `user` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2025-06-09 13:38:21
