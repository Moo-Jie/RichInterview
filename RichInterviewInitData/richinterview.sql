-- MySQL dump 10.13  Distrib 8.0.35, for Win64 (x86_64)
--
-- Host: 49.233.207.238    Database: richinterview
-- ------------------------------------------------------
-- Server version	5.7.44-log

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!50503 SET NAMES utf8mb4 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `question`
--

DROP TABLE IF EXISTS `question`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `question` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'id',
  `title` varchar(256) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT '标题',
  `content` text COLLATE utf8mb4_unicode_ci COMMENT '内容',
  `tags` varchar(1024) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT '标签列表（json 数组）',
  `answer` text COLLATE utf8mb4_unicode_ci COMMENT '推荐答案',
  `userId` bigint(20) NOT NULL COMMENT '创建用户 id',
  `editTime` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '编辑时间',
  `createTime` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `updateTime` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '更新时间',
  `isDelete` tinyint(4) NOT NULL DEFAULT '0' COMMENT '是否删除',
  `reviewStatus` int(11) NOT NULL DEFAULT '0' COMMENT '状态：0-待审核, 1-通过, 2-拒绝',
  `reviewMessage` varchar(512) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT '审核信息',
  `reviewerId` bigint(20) DEFAULT NULL COMMENT '审核人 id',
  `reviewTime` datetime DEFAULT NULL COMMENT '审核时间',
  `viewNum` int(11) NOT NULL DEFAULT '0' COMMENT '浏览量',
  `thumbNum` int(11) NOT NULL DEFAULT '0' COMMENT '点赞数',
  `favourNum` int(11) NOT NULL DEFAULT '0' COMMENT '收藏数',
  `priority` int(11) NOT NULL DEFAULT '0' COMMENT '优先级',
  `source` varchar(512) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT '题目来源',
  `needVip` tinyint(4) NOT NULL DEFAULT '0' COMMENT '仅会员可见（1 表示仅会员可见）',
  PRIMARY KEY (`id`),
  KEY `idx_title` (`title`),
  KEY `idx_userId` (`userId`)
) ENGINE=InnoDB AUTO_INCREMENT=1916464313040752643 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci COMMENT='题目';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `question`
--

LOCK TABLES `question` WRITE;
/*!40000 ALTER TABLE `question` DISABLE KEYS */;
INSERT INTO `question` VALUES (1916348763044098049,'请你简单介绍一下HTML语言','### 请你简单介绍一下HTML语言的基本概念 、特性 。','[\"HTML\",\"HTML特性\",\"HTML发展\"]','# HTML 语言简介\n\n## 一、什么是 HTML\n\nHTML（Hyper - Text Markup Language），即超文本标记语言，是一种用于创建网页的标准标记语言。它并非一种编程语言，而是一种标记语言，用于定义网页内容的结构和呈现方式，通过在普通文本中添加各种标记标签来指示文本应该以何种方式显示。\n\n## 二、HTML 的基本结构\n\n一个最简单的 HTML 文档结构如下：\n\n\n\n复制\n\n```\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset = \"UTF - 8\">\n    <title>页面标题</title>\n</head>\n<body>\n    <!-- 页面主体内容 -->\n</body>\n</html>\n```\n\n- `<!DOCTYPE html>` ：文档声明，用来告诉浏览器这个文档使用的是 HTML5 标准。\n- `<html>` ：根元素，它是 HTML 文档的最外层元素，所有其他 HTML 元素都必须包含在这个元素之内。\n- `<head>` ：头部元素，包含了文档的元数据，如字符编码设置（`<meta charset = \"UTF - 8\">`）、页面标题（`<title>`）等，这些信息不会在网页正文中显示。\n- `<body>` ：主体元素，网页上可见的内容，如文本、图像、链接、表格、列表等都放置在这个元素内。\n\n## 三、常见的 HTML 标签\n\n1. **文本标签**\n   - `<h1>` 到 `<h6>` ：标题标签，用于定义不同级别的标题，`<h1>` 字体最大，`<h6>` 字体最小。\n   - `<p>` ：段落标签，用于定义一段文本内容。\n   - `<br>` ：换行标签，用于强制文本换行。\n   - `<strong>` ：加粗标签，使文本以加粗形式显示。\n   - `<em>` ：斜体标签，使文本以斜体形式显示。\n2. **链接标签**\n   - `<a>` ：超链接标签，用于创建从一个页面到另一个页面或页面内不同位置的链接。其语法为 `<a href = \"链接地址\">链接显示文本</a>`，`href` 属性指定了链接的目标 URL。\n3. **图像标签**\n   - `<img>` ：图像标签，用于在网页中插入图像。其主要属性有 `src`（指定图像文件的路径或 URL）、`alt`（为图像提供替代文本，当图像无法显示时，浏览器会显示这个替代文本）。\n4. **列表标签**\n   - `<ul>` ：无序列表标签，列表项前会自动添加圆点或其他装饰符号。\n   - `<ol>` ：有序列表标签，列表项前会自动添加编号。\n   - `<li>` ：列表项标签，用于定义列表中的一个项目，在 `<ul>` 或 `<ol>` 中使用。\n5. **表格标签**\n   - `<table>` ：表格标签，用于创建表格。\n   - `<tr>` ：表格行标签，定义表格中的一行。\n   - `<td>` ：表格单元格标签，定义表格中的一个单元格，用于放置数据。\n   - `<th>` ：表头单元格标签，通常用于定义表格的表头部分，其内容会以加粗居中的方式显示。\n\n## 四、HTML 的特点\n\n1. **简单易学** ：HTML 语法相对简单，容易上手，对于初学者来说，通过学习基础的标签和属性，就可以快速创建出简单的网页。\n2. **跨平台** ：HTML 是一种跨平台的语言，可以在各种操作系统和设备上运行，如 Windows、Mac、Linux、移动设备等，只要安装了浏览器，就可以查看 HTML 页面。\n3. **与 CSS 和 JavaScript 配合良好** ：HTML 可以与 CSS（层叠样式表）结合，用于控制网页的样式和布局，使页面更加美观；同时，也可以与 JavaScript 脚本语言配合，为网页添加交互功能，如表单验证、动态效果等。\n\n## 五、HTML 的发展\n\nHTML 自诞生以来，经历了多个版本的更新和演变。HTML5 是目前最新的版本，它在前一版本的基础上进行了大量的改进和扩展，引入了许多新的特性，如新的语义化标签（如 `<header>`、`<nav>`、`<footer>`、`<section>`、`<article>` 等，使网页结构更加清晰）、音频和视频标签（`<audio>` 和 `<video>`，用于直接在网页中播放多媒体文件）、画布标签（`<canvas>`，用于绘制图形和图像）等，为开发者提供了更强大的功能和更丰富的用户体验。\n\n总之，HTML 作为网页开发的基础语言，为互联网的发展和信息的传播提供了重要的支持，通过学习和掌握 HTML，可以为深入学习网页前端开发打下坚实的基础。',1916407199693844483,'2025-04-27 12:28:43','2025-04-27 12:28:43','2025-04-27 16:29:05',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916349763737923586,'阐述什么是HTML语法中的属性','### 请你阐述什么是HTML语法中的属性','[\"HTML属性\",\"HTML语法\",\"HTML特性\"]','# HTML 语法中的属性\n\n在 HTML 语法中，属性是 HTML 元素的重要组成部分，它为元素提供了附加信息，用于定义元素的行为、样式、内容或其他特性。\n\n属性通常出现在 HTML 标签的开始标签中，紧跟在元素名称后面，以 name=\"value\" 的形式写在标签内。其中，name 是属性的名称，用于标识这个属性所代表的特定功能或特性；value 是属性的值，它为这个属性提供了具体的设置或参数，通常用引号（可以是单引号或双引号）将值括起来。例如，在 `<img src=\"image.jpg\" alt=\"描述文字\">` 中，“src” 是属性名称，表示图像文件的路径或 URL，“image.jpg” 是该属性的值，告诉浏览器要加载哪个图像文件；“alt” 属性用于为图像提供替代文本，“描述文字” 是它的值，在图像无法显示时，浏览器会呈现这个替代文本。\n\n属性种类繁多，根据其功能可以分为以下几类：\n\n- **内容属性** ：如前文提到的 `<img>` 标签的 `src` 和 `alt` 属性，它们直接关系到元素所要展示或引用的内容，还有 `<a>` 标签的 `href` 属性，指定了超链接的目标 URL，决定了链接指向的页面或资源位置。\n- **行为属性** ：这类属性影响元素的交互行为。例如，`<input>` 标签的 `type` 属性，它可以取多种值，像 “text” 表示文本输入框、“submit” 表示提交按钮、“checkbox” 表示复选框等，不同的值决定了输入框的类型和行为表现；还有 `<button>` 标签的 `onclick` 属性，用于指定当按钮被点击时要执行的 JavaScript 代码，从而实现交互功能。\n- **样式属性** ：直接与元素的外观样式相关，比如 `<font>` 标签（虽然在现代 HTML5 中不推荐使用）的 `color` 属性可以设置文本颜色，`face` 属性可以指定文本的字体样式。不过，在实际网页开发中，我们更倾向于使用 CSS（层叠样式表）来控制样式，但在某些情况下，HTML 标签的样式属性也能起到快速简单的样式定义作用，如 `<div>` 标签的 `style` 属性，可以直接在 HTML 中定义 CSS 样式规则来改变元素的宽、高、背景颜色等外观特性。\n- **关联属性** ：用于建立元素之间的关联或引用关系。例如，`<label>` 标签的 `for` 属性，它与 `<input>` 标签的 `id` 属性相配合，当用户点击 `<label>` 时，与之关联的 `<input>` 元素会自动获得焦点，这增强了表单元素的可用性和交互性。\n\n在使用属性时，有以下一些规则和注意事项：\n\n- 属性值对于 HTML 元素来说是可选的，但有些属性必须带有值才能正常发挥作用。例如，`<input>` 标签的 `required` 属性，它本身就是一个布尔属性，可以只写属性名而不赋值（但在实际书写时，为了兼容性，通常会写成 `required=\"required\"` 的形式），用于指定该输入框是必填项，在表单提交时会对这个输入框的内容进行验证。\n- 多个属性在标签中可以按任意顺序排列，只要它们之间用空格分隔开即可。例如，`<input type=\"text\" id=\"nameInput\" name=\"username\">`，这里的 `type`、`id` 和 `name` 属性顺序可以调换，不会影响元素的功能。\n- 属性值中如果包含空格、引号等特殊字符，需要用特殊的方式来处理。推荐的做法是使用单引号或双引号将属性值完整地括起来，避免因特殊字符导致的解析错误。例如，如果一个属性值中包含双引号，那么可以将该属性用单引号包围，如 `value=\'He said \"Hello\"\'>`。\n\n总之，HTML 属性是丰富 HTML 元素功能和特性的重要工具，通过合理地使用各种属性，开发者可以精确地控制网页元素的行为、样式和内容展示方式，从而构建出功能多样、美观实用的网页界面。',1916407199693844483,'2025-04-27 12:32:42','2025-04-27 12:32:42','2025-04-27 16:29:05',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916350704595808257,'HTML中文本格式化的细节和进阶操作','### 请你阐述HTML中文本格式化的细节和进阶操作','[\"HTML特性\",\"HTML语法\",\"HTML文本格式化\",\"格式化\",\"文本操作\"]','# HTML 中文本格式化细节与进阶操作\n\n## 一、HTML 基本文本格式化标签\n\nHTML 提供了一系列基本的文本格式化标签，用于快速改变文本的显示样式。\n\n### （一）字体样式标签\n\n  * **加粗文本**\n    * 使用 `<strong>` 标签或 `<b>` 标签。`<strong>` 标签表示强调重要的文本内容，对屏幕阅读器等辅助设备有语义意义；`<b>` 标签则仅仅是从视觉上使文本加粗，没有强调的语义。例如：\n\n```html\n<strong>这是一个强调的重要文本</strong>\n<b>这是一个加粗文本</b>\n```\n\n  * **斜体文本**\n    * 可以使用 `<em>` 标签或 `<i>` 标签。`<em>` 标签用于表示强调的文本，在语义上表示文本有重音或强调的语气；`<i>` 标签只是单纯地将文本以斜体形式显示。例如：\n\n```html\n<em>这是一段带有强调语气的文本</em>\n<i>这是一段斜体文本</i>\n```\n\n  * **下划线文本**\n    * 使用 `<u>` 标签来为文本添加下划线。例如：\n\n```html\n<u>这是一段带有下划线的文本</u>\n```\n\n  * **删除线文本**\n    * 使用 `<s>` 标签或 `<del>` 标签。`<s>` 标签表示文本是不再准确或不再相关的内容；`<del>` 标签表示文档中被删除的内容。例如：\n\n```html\n<s>这是一段不再准确的文本</s>\n<del>这是一段被删除的文本</del>\n```\n\n  * **上标和下标文本**\n    * 使用 `<sup>` 标签用于创建上标文本，如数学公式中的指数；`<sub>` 标签用于创建下标文本，如化学式中的原子个数。例如：\n\n```html\n水的化学式：H<sub>2</sub>O\n数学公式：x<sup>2</sup> + y<sup>2</sup> = z<sup>2</sup>\n```\n\n### （二）段落和换行标签\n\n  * **段落标签 `<p>`**\n    * 它用于定义文档中的一个段落，在段落文本之间会自动添加一定的间距，默认情况下段落中的文本会根据容器宽度自动换行。例如：\n\n```html\n<p>这是一个段落，段落中的文本是连续的，当文本到达容器边缘时会自动换行。</p>\n```\n\n  * **换行标签 `<br>`**\n    * 用于强制文本换行，常用于诗歌、地址等需要精确控制换行的位置的文本内容。例如：\n\n```html\n地址：北京市海淀区XX街道XX号<br>\n邮编：100000\n```\n\n  * **水平线标签 `<hr>`**\n    * 用于在文档中创建一条水平线，起到分隔内容的作用。可以通过其属性（如 `size` 设置线条高度、`color` 设置线条颜色、`width` 设置线条宽度等）来自定义水平线的样式。例如：\n\n```html\n<hr size=\"3\" color=\"red\" width=\"50%\">\n```\n\n## 二、HTML 文本格式化的进阶操作\n\n### （一）使用 CSS 样式进行文本格式化\n\nCSS（层叠样式表）提供了更强大的文本格式化功能，通过将 CSS 样式应用到 HTML 元素上，可以精确地控制文本的外观。\n\n  * **字体样式设置**\n    * 可以设置字体族（`font - family`）、字体大小（`font - size`）、字体粗细（`font - weight`）、字体样式（`font - style`）等属性。例如：\n\n```html\n<p style=\"font-family: \'Arial\', sans - serif; font-size: 16px; font-weight: bold; font-style: italic;\">\n    这段文本设置了字体族为 Arial，字体大小为 16 像素，字体加粗且为斜体。\n</p>\n```\n\n  * **文本颜色和背景颜色设置**\n    * 使用 `color` 属性设置文本颜色，`background - color` 属性设置文本背景颜色。例如：\n\n```html\n<p style=\"color: blue; background-color: yellow;\">\n    这段文本为蓝色，背景为黄色。\n</p>\n```\n\n  * **文本对齐方式设置**\n    * 可以使用 `text - align` 属性设置文本的对齐方式，如 `left`（左对齐）、`right`（右对齐）、`center`（居中对齐）、`justify`（两端对齐）。例如：\n\n```html\n<p style=\"text-align: center;\">\n    这段文本居中对齐。\n</p>\n```\n\n  * **文本装饰设置**\n    * 使用 `text - decoration` 属性可以设置文本的装饰效果，如 `underline`（下划线）、`overline`（上划线）、`line - through`（删除线）、`none`（无装饰）。例如：\n\n```html\n<p style=\"text-decoration: underline;\">\n    这段文本带有下划线。\n</p>\n```\n\n  * **文本缩进和间距设置**\n    * 可以通过 `text - indent` 属性设置段落首行缩进，`word - spacing` 属性设置单词间距，`letter - spacing` 属性设置字母间距，`line - height` 属性设置行高。例如：\n\n```html\n<p style=\"text-indent: 2em; word-spacing: 10px; letter-spacing: 2px; line-height: 1.5;\">\n    这段文本设置了首行缩进 2 个字符，单词间距为 10 像素，字母间距为 2 像素，行高为 1.5 倍行距。\n</p>\n```\n\n### （二）使用 HTML 列表进行文本组织\n\n列表在组织文本内容方面非常有用，可以清晰地展示一系列相关项目。\n\n  * **无序列表 `<ul>` 和有序列表 `<ol>`**\n    * 无序列表中的列表项前带有圆点或其他装饰符号，有序列表中的列表项前带有编号。例如：\n\n```html\n<ul>\n    <li>苹果</li>\n    <li>香蕉</li>\n    <li>橙子</li>\n</ul>\n\n<ol>\n    <li>第一步</li>\n    <li>第二步</li>\n    <li>第三步</li>\n</ol>\n```\n\n  * **定义列表 `<dl>`**\n    * 用于定义术语或名词的列表，包含 `<dt>`（定义项目）和 `<dd>`（定义描述）两个标签。例如：\n\n```html\n<dl>\n    <dt>HTML</dt>\n    <dd>超文本标记语言，用于创建网页的标准标记语言。</dd>\n    <dt>CSS</dt>\n    <dd>层叠样式表，用于描述 HTML 或 XML（如 SVG、XML）等文档的呈现。</dd>\n</dl>\n```\n\n### （三）使用 HTML 表格进行文本布局\n\n表格可以用于展示结构化的数据或进行页面布局（虽然在现代网页开发中更倾向于使用 CSS 布局，但在某些情况下表格仍然有用）。\n\n  * **基本表格结构**\n    * 表格由 `<table>` 标签定义，表格行由 `<tr>` 标签定义，表格单元格由 `<td>` 标签（数据单元格）或 `<th>` 标签（表头单元格）定义。例如：\n\n```html\n<table border=\"1\">\n    <tr>\n        <th>姓名</th>\n        <th>年龄</th>\n        <th>城市</th>\n    </tr>\n    <tr>\n        <td>张三</td>\n        <td>25</td>\n        <td>北京</td>\n    </tr>\n    <tr>\n        <td>李四</td>\n        <td>30</td>\n        <td>上海</td>\n    </tr>\n</table>\n```\n\n    * 其中 `border` 属性用于设置表格边框，值为 “1” 时表示显示边框。\n\n  * **表格的进阶属性和样式设置**\n    * 可以使用 `colspan` 属性设置单元格跨越的列数，`rowspan` 属性设置单元格跨越的行数。还可以通过 CSS 样式来美化表格，如设置表格宽度、高度、背景颜色、单元格边距等。例如：\n\n```html\n<table style=\"width: 100%; border-collapse: collapse;\">\n    <tr style=\"background-color: #f2f2f2;\">\n        <th style=\"padding: 10px; text-align: left;\" colspan=\"2\">个人信息</th>\n    </tr>\n    <tr>\n        <td style=\"padding: 8px; border: 1px solid #ddd;\">姓名</td>\n        <td style=\"padding: 8px; border: 1px solid #ddd;\">张三</td>\n    </tr>\n    <tr>\n        <td style=\"padding: 8px; border: 1px solid #ddd;\">年龄</td>\n        <td style=\"padding: 8px; border: 1px solid #ddd;\">25</td>\n    </tr>\n</table>\n```\n\n通过掌握这些 HTML 中文本格式化的细节和进阶操作，你可以更加灵活地创建美观、易读且结构合理的网页文本内容。',1916407199693844483,'2025-04-27 12:36:26','2025-04-27 12:36:26','2025-04-27 16:29:05',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916351710326992898,'HTML语言的各大头部元素','### 请阐述HTML语言的各大头部元素，如<head><title> <link> <base><style><meta>。','[\"HTML头部\",\"HTML语法\",\"HTML特性\"]','# HTML 语言中的头部元素\n\n在 HTML 文档中，`<head>` 元素是一个非常重要的部分，它包含了文档的元数据，这些元数据不会在网页正文中显示，但对文档的呈现、性能和与外部资源的交互等方面起着关键作用。以下是 HTML 中常见的头部元素及其功能介绍：\n\n## 一、`<title>` 元素\n\n`<title>` 元素用于定义 HTML 文档的标题，这个标题会显示在浏览器的标题栏或标签页上，对于用户识别当前页面以及搜索引擎优化（SEO）都非常重要。一个 HTML 文档中只能包含一个 `<title>` 元素，它应该尽可能简洁且准确地描述页面内容。例如：\n\n```html\n<title>HTML 文档的标题</title>\n```\n\n## 二、`<link>` 元素\n\n`<link>` 元素用于将 HTML 文档与外部资源进行连接，最常见的是链接外部样式表（CSS 文件）。通过指定 `rel` 属性（表示链接资源与当前文档的关系）和 `href` 属性（表示链接资源的 URL），可以让 HTML 文档引用外部样式，从而实现对页面样式的统一控制。例如：\n\n```html\n<link rel=\"stylesheet\" href=\"styles.css\">\n```\n\n在这个例子中，`rel=\"stylesheet\"` 表示链接的资源是一个样式表，`href=\"styles.css\"` 指定了样式表文件的位置。此外，`<link>` 元素还可以用于其他用途，如链接网页图标（favicon）：\n\n```html\n<link rel=\"icon\" href=\"favicon.ico\">\n```\n\n## 三、`<base>` 元素\n\n`<base>` 元素用于为文档中的所有相对 URL 提供一个基础 URL 地址。这在 HTML 文档中需要引用多个相对路径的资源（如图片、链接等）时非常有用，可以避免在每个资源引用中重复书写完整的 URL 前缀。`<base>` 元素通常包含一个 `href` 属性，该属性的值是基础 URL。例如：\n\n```html\n<base href=\"https://www.example.com/images/\">\n```\n\n当设置了这个基础 URL 后，文档中所有相对路径的图片引用（如 `<img src=\"image.jpg\">`）都会基于这个基础 URL，即实际路径为 `https://www.example.com/images/image.jpg`。需要注意的是，`<base>` 元素在一个文档中只能出现一次，并且应该放在 `<head>` 部分的开头位置。\n\n## 四、`<style>` 元素\n\n`<style>` 元素允许开发者在 HTML 文档中直接嵌入 CSS 样式。这对于小型网页或快速原型设计非常方便，可以避免创建单独的外部样式表文件。`<style>` 元素的 `type` 属性（在 HTML5 中可以省略）用于指定样式表语言的类型，通常为 `text/css`。例如：\n\n```html\n<style>\n    body {\n        font-family: Arial, sans-serif;\n        background-color: #f0f0f0;\n    }\n    h1 {\n        color: #333;\n    }\n</style>\n```\n\n在这个例子中，定义了页面主体的字体和背景颜色，以及标题的文本颜色。不过，对于大型项目或多个页面共享样式的场景，更推荐使用外部样式表（通过 `<link>` 元素引用），以便于维护和重用。\n\n## 五、`<meta>` 元素\n\n`<meta>` 元素用于设置页面的元数据，这些数据通常不会显示在页面上，但对搜索引擎、浏览器以及其他处理页面的应用程序非常重要。常见的 `<meta>` 元素包括：\n\n  * **字符编码设置** ：通过 `charset` 属性指定页面的字符编码，确保页面中的文本能够正确显示。例如：\n\n    ```html\n    <meta charset=\"UTF-8\">\n    ```\n\n    这个设置应该出现在 `<head>` 部分的开头，以避免字符编码问题。\n\n  * **视口设置（viewport）** ：对于响应式网页设计，`<meta>` 元素可以用于设置视口（viewport），以适应不同设备的屏幕宽度。例如：\n\n    ```html\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    ```\n\n    这里的 `name` 属性值为 \"viewport\"，`content` 属性包含具体的视口设置，其中 `width=device-width` 表示视口宽度等于设备屏幕宽度，`initial-scale=1.0` 表示初始缩放比例为 1.0。\n\n  * **网页描述和关键词** ：这些元数据对于搜索引擎优化（SEO）有一定作用，可以提供对页面内容的简短描述和关键词列表。例如：\n\n    ```html\n    <meta name=\"description\" content=\"这是对页面内容的简短描述\">\n    <meta name=\"keywords\" content=\"关键词1, 关键词2, 关键词3\">\n    ```\n\n    其中 `name` 属性值分别为 \"description\" 和 \"keywords\"，`content` 属性包含对应的描述文本和关键词列表。\n\n  * **其他 HTTP 响应头设置** ：`<meta>` 元素还可以用于设置一些等价于 HTTP 响应头的信息，如内容安全策略（CSP）等。例如：\n\n    ```html\n    <meta http-equiv=\"Content-Security-Policy\" content=\"default-src \'self\'\">\n    ```\n\n    在这个例子中，`http-equiv` 属性值为 \"Content-Security-Policy\"，用于指定内容安全策略，`content` 属性包含了具体的安全策略规则。\n\n通过合理地使用这些头部元素，可以有效地组织和优化 HTML 文档，提升用户体验和页面性能，同时为搜索引擎和其他应用程序提供必要的信息。',1916407199693844483,'2025-04-27 12:40:26','2025-04-27 12:40:26','2025-04-27 16:29:05',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916352548336349186,'HTML中区块特性','### 你知道HTML中的区块特性吗？','[\"HTML区块\",\"HTML内联元素\"]','# HTML `<div>` 和 `<span>`\n\nHTML 可以通过 `<div>` 和 `<span>` 将元素组合起来。\n\n## HTML 区块元素\n\n大多数 HTML 元素被定义为**块级元素**或**内联元素**。\n\n块级元素在浏览器显示时，通常会以新行来开始（和结束）。\n\n实例：`<h1>`、`<p>`、`<ul>`、`<table>`\n\n## HTML 内联元素\n\n内联元素在显示时通常不会以新行开始。\n\n实例：`<b>`、`<td>`、`<a>`、`<img>`\n\n## HTML `<div>` 元素\n\nHTML `<div>` 元素是块级元素，它可用于组合其他 HTML 元素的容器。\n\n`<div>` 元素没有特定的含义。除此之外，由于它属于块级元素，浏览器会在其前后显示折行。\n\n如果与 CSS 一同使用，`<div>` 元素可用于对大的内容块设置样式属性。\n\n`<div>` 元素的另一个常见的用途是文档布局。它取代了使用表格定义布局的老式方法。使用 `<table>` 元素进行文档布局不是表格的正确用法。`<table>` 元素的作用是显示表格化的数据。\n\n## HTML `<span>` 元素\n\nHTML `<span>` 元素是内联元素，可用作文本的容器。\n\n`<span>` 元素也没有特定的含义。\n\n当与 CSS 一同使用时，`<span>` 元素可用于为部分文本设置样式属性。\n\n## HTML 分组标签\n\n| 标签 | 描述 |\n| --- | --- |\n| [https://www.runoob.com/tags/tag-div.html](https://www.runoob.com/tags/tag-div.html) | 定义了文档的区域，块级 (block-level) |\n| [https://www.runoob.com/tags/tag-span.html](https://www.runoob.com/tags/tag-span.html) | 用来组合文档中的行内元素，内联元素 (inline) |',1916407199693844483,'2025-04-27 12:43:46','2025-04-27 12:43:46','2025-04-27 16:29:05',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916352561502269441,'HTML中区块特性','### 你知道HTML中的区块特性吗？','[\"HTML区块\",\"HTML内联元素\"]','# HTML `<div>` 和 `<span>`\n\nHTML 可以通过 `<div>` 和 `<span>` 将元素组合起来。\n\n## HTML 区块元素\n\n大多数 HTML 元素被定义为**块级元素**或**内联元素**。\n\n块级元素在浏览器显示时，通常会以新行来开始（和结束）。\n\n实例：`<h1>`、`<p>`、`<ul>`、`<table>`\n\n## HTML 内联元素\n\n内联元素在显示时通常不会以新行开始。\n\n实例：`<b>`、`<td>`、`<a>`、`<img>`\n\n## HTML `<div>` 元素\n\nHTML `<div>` 元素是块级元素，它可用于组合其他 HTML 元素的容器。\n\n`<div>` 元素没有特定的含义。除此之外，由于它属于块级元素，浏览器会在其前后显示折行。\n\n如果与 CSS 一同使用，`<div>` 元素可用于对大的内容块设置样式属性。\n\n`<div>` 元素的另一个常见的用途是文档布局。它取代了使用表格定义布局的老式方法。使用 `<table>` 元素进行文档布局不是表格的正确用法。`<table>` 元素的作用是显示表格化的数据。\n\n## HTML `<span>` 元素\n\nHTML `<span>` 元素是内联元素，可用作文本的容器。\n\n`<span>` 元素也没有特定的含义。\n\n当与 CSS 一同使用时，`<span>` 元素可用于为部分文本设置样式属性。\n\n## HTML 分组标签\n\n| 标签 | 描述 |\n| --- | --- |\n| [https://www.runoob.com/tags/tag-div.html](https://www.runoob.com/tags/tag-div.html) | 定义了文档的区域，块级 (block-level) |\n| [https://www.runoob.com/tags/tag-span.html](https://www.runoob.com/tags/tag-span.html) | 用来组合文档中的行内元素，内联元素 (inline) |',1916407199693844483,'2025-04-27 12:43:49','2025-04-27 12:43:49','2025-04-27 16:29:05',1,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916353575588507649,'HTML 表单和输入 的相关知识','### 请你阐述HTML 表单和输入 的相关知识，并介绍相关用法！','[\"HTML表单\",\"输入\",\"HTML语法\"]','# HTML 表单与输入：构建交互式网页的核心\n\nHTML 表单是网页中用于收集用户输入数据的重要工具，它允许用户输入文本、选择选项、上传文件等，并将这些数据发送到服务器进行处理。表单的创建和使用涉及多个 HTML 元素，其中 `<form>` 元素是表单的容器，而 `<input>`、`<textarea>`、`<select>` 等元素则是表单的具体输入控件。\n\n## 一、`<form>` 元素：表单的容器\n\n`<form>` 元素是表单的根元素，它定义了一个表单的范围，并包含所有表单控件。`<form>` 元素的主要属性包括：\n\n- **`action`**：指定表单数据提交到的服务器端脚本的 URL。例如：\n  ```html\n  <form action=\"submit_form.php\">\n  ```\n  这里，表单数据将被提交到 `submit_form.php` 文件进行处理。\n\n- **`method`**：定义表单数据提交的方式，通常为 `GET` 或 `POST`。`GET` 方法将表单数据附加到 URL 中，适合少量数据；`POST` 方法将数据放在请求体中，适合大量或敏感数据。例如：\n  ```html\n  <form action=\"submit_form.php\" method=\"POST\">\n  ```\n\n- **`enctype`**：定义表单数据的编码类型，主要用于文件上传。常见的值有：\n  - `application/x-www-form-urlencoded`（默认值）\n  - `multipart/form-data`（用于文件上传）\n  - `text/plain`\n\n- **`name`**：为表单指定一个名称，便于在 JavaScript 中引用。\n\n## 二、`<input>` 元素：表单的核心输入控件\n\n`<input>` 元素是最常用的表单控件，它可以通过 `type` 属性定义多种输入类型。常见的 `type` 值包括：\n\n- **`text`**：单行文本输入框。\n  ```html\n  <input type=\"text\" name=\"username\" placeholder=\"请输入用户名\">\n  ```\n\n- **`password`**：密码输入框，输入内容会以点或星号显示。\n  ```html\n  <input type=\"password\" name=\"password\">\n  ```\n\n- **`radio`**：单选按钮，同一组单选按钮的 `name` 属性值必须相同。\n  ```html\n  <input type=\"radio\" name=\"gender\" value=\"male\"> 男\n  <input type=\"radio\" name=\"gender\" value=\"female\"> 女\n  ```\n\n- **`checkbox`**：复选框，允许用户选择多个选项。\n  ```html\n  <input type=\"checkbox\" name=\"hobby\" value=\"reading\"> 阅读\n  <input type=\"checkbox\" name=\"hobby\" value=\"traveling\"> 旅行\n  ```\n\n- **`submit`**：提交按钮，用于将表单数据发送到服务器。\n  ```html\n  <input type=\"submit\" value=\"提交\">\n  ```\n\n- **`reset`**：重置按钮，用于将表单恢复到初始状态。\n  ```html\n  <input type=\"reset\" value=\"重置\">\n  ```\n\n- **`file`**：文件上传控件，允许用户选择文件上传。\n  ```html\n  <input type=\"file\" name=\"avatar\">\n  ```\n\n- **`email`**：用于输入电子邮件地址，支持自动验证。\n  ```html\n  <input type=\"email\" name=\"email\" placeholder=\"请输入邮箱\">\n  ```\n\n- **`number`**：用于输入数字，支持范围限制。\n  ```html\n  <input type=\"number\" name=\"age\" min=\"18\" max=\"100\">\n  ```\n\n## 三、其他表单控件\n\n除了 `<input>` 元素，表单中还可以包含以下控件：\n\n- **`<textarea>`**：多行文本输入框，适合输入较长的文本内容。\n  ```html\n  <textarea name=\"comment\" rows=\"4\" cols=\"50\">请输入您的评论...</textarea>\n  ```\n\n- **`<select>`**：下拉选择框，允许用户从多个选项中选择一个。\n  ```html\n  <select name=\"country\">\n      <option value=\"CN\">中国</option>\n      <option value=\"US\">美国</option>\n      <option value=\"JP\">日本</option>\n  </select>\n  ```\n\n- **`<label>`**：用于定义表单控件的标签，增强表单的可访问性。\n  ```html\n  <label for=\"username\">用户名：</label>\n  <input type=\"text\" id=\"username\" name=\"username\">\n  ```\n\n## 四、表单验证\n\nHTML5 提供了一些内置的表单验证功能，可以在用户提交表单之前进行数据验证，减少服务器端的验证负担。常见的验证属性包括：\n\n- **`required`**：指定输入框为必填项。\n  ```html\n  <input type=\"text\" name=\"username\" required>\n  ```\n\n- **`pattern`**：使用正则表达式验证输入内容。\n  ```html\n  <input type=\"text\" name=\"phone\" pattern=\"\\d{11}\" title=\"请输入11位数字的手机号码\">\n  ```\n\n- **`min` 和 `max`**：限制数字或日期输入的范围。\n  ```html\n  <input type=\"number\" name=\"age\" min=\"18\" max=\"100\">\n  ```\n\n- **`maxlength` 和 `minlength`**：限制文本输入的最大和最小长度。\n  ```html\n  <input type=\"text\" name=\"username\" minlength=\"3\" maxlength=\"10\">\n  ```\n\n## 五、表单的提交与处理\n\n当用户点击提交按钮时，表单数据会根据 `<form>` 元素的 `action` 和 `method` 属性发送到服务器。服务器端脚本（如 PHP、Python、Node.js 等）可以接收并处理这些数据。例如，一个简单的 PHP 脚本可以这样处理表单数据：\n\n```php\n<?php\nif ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") {\n    $username = $_POST[\"username\"];\n    $password = $_POST[\"password\"];\n    echo \"用户名: $username<br>\";\n    echo \"密码: $password<br>\";\n}\n?>\n```\n\n## 六、表单的布局与样式\n\n表单的布局和样式可以通过 CSS 进行定制。例如，可以使用 CSS Flexbox 或 Grid 布局来创建响应式的表单布局，同时使用 CSS 样式来美化表单控件。\n\n```html\n<style>\n    form {\n        display: flex;\n        flex-direction: column;\n        max-width: 300px;\n        margin: 0 auto;\n    }\n    label {\n        margin-bottom: 5px;\n    }\n    input, textarea, button {\n        margin-bottom: 10px;\n        padding: 8px;\n        border: 1px solid #ccc;\n        border-radius: 4px;\n    }\n</style>\n```\n\n通过合理使用 HTML 表单和输入控件，结合 CSS 样式和 JavaScript 功能，可以创建出功能强大且用户友好的交互式网页。',1916407199693844483,'2025-04-27 12:47:51','2025-04-27 12:47:51','2025-04-27 16:29:05',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916354548981608450,'React 18 的主要新特性','###  React 18 的主要新特性有哪些？请你简单阐述一下！','[\"React新特性\",\"React特点\"]','\n- **并发渲染**：通过时间切片和优先级调度优化渲染性能[2]()  \n- **自动批处理**：默认对所有状态更新（包括异步操作）进行合并渲染[2]()  \n- **新根API**：`ReactDOM.createRoot`  替代旧版 `ReactDOM.render`   \n- **Suspense增强**：支持流式服务端渲染和数据获取  \n- **新Hook**：如 `useTransition`（标记低优先级更新）、`useId`（生成唯一ID）[2]()',1916407199693844483,'2025-04-27 12:51:43','2025-04-27 12:51:43','2025-04-27 16:30:05',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916354837247733761,'React 中虚拟DOM的工作原理','### 请你阐述一下 React 中虚拟DOM的工作原理是什么？','[\"React特性\",\"DOM工作原理\",\"虚拟节点树\"]','\n1. **生成虚拟节点树**：React 将组件转换为轻量级 JavaScript 对象描述  \n2. **差异对比（Diff算法）**：比较新旧虚拟DOM树的差异（仅同级对比）[6]()  \n3. **局部更新真实DOM**：仅对变化部分进行实际DOM操作，避免全量渲染  \n**优势**：减少DOM操作开销，提升渲染性能[1]()[6]()',1916407199693844483,'2025-04-27 12:52:52','2025-04-27 12:52:52','2025-04-27 19:03:33',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916355081247174657,'React 中类组件与函数组件的核心区别','### React 类组件与函数组件的核心区别是什么？','[\"React\",\"类组件\",\"React函数组件\",\"React语法特性\"]','\n| **维度**       | 类组件                | 函数组件（含Hooks）       |\n|----------------|-----------------------|--------------------------|\n| **状态管理**   | `this.state`           | `useState`/`useReducer`  |\n| **生命周期**   | `componentDidMount`等 | `useEffect`              |\n| **代码复用**   | 继承/HOC              | 自定义Hook               |\n| **性能优化**   | `shouldComponentUpdate`| `React.memo`+`useMemo`    |',1916407199693844483,'2025-04-27 12:53:50','2025-04-27 12:53:50','2025-04-27 19:03:40',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916355314983153666,'React 组件通信的常用方式','### 请你列举并介绍几种React 组件通信的常用方式！','[\"React特性\",\"React通信\",\"通信原理\",\"通信方式\"]','\n- **父子通信**：通过 `props` 传递数据和回调函数  \n- **跨层级通信**：  \n  - **Context API**：适用于低频更新的全局状态（如主题/用户信息）[4]()  \n  - **Redux/MobX**：复杂状态管理，支持中间件和异步处理[4]()  \n- **事件总线**：`EventEmitter`（非React推荐方案）  ',1916407199693844483,'2025-04-27 12:54:45','2025-04-27 12:54:45','2025-04-27 16:30:03',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916355617795125250,'如何优化React应用性能','### 如何优化React应用性能？请你讲一下你的理解。','[\"React优化\",\"React性能\"]','\n- **组件级优化**：  \n  - 使用 `React.memo`  缓存函数组件  \n  - 类组件继承 `PureComponent` 或实现 `shouldComponentUpdate`  \n- **状态管理优化**：  \n  - 避免在渲染函数中创建新对象（如 `style={{}}`）  \n  - 使用 `useCallback`/`useMemo` 缓存函数和计算结果[4]()  \n- **代码分割**：通过 `React.lazy`  + `Suspense` 实现按需加载  ',1916407199693844483,'2025-04-27 12:55:58','2025-04-27 12:55:58','2025-04-27 16:30:03',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916356136861216770,' React Hooks 的设计意义与核心规则',' ### React Hooks 的设计意义是什么？为了实现什么目的？\n### 同时 React Hooks的核心规则又是什么？','[\"React Hooks\",\"Hooks\",\"生命周期\"]','\n**设计意义**：  \n- 解决类组件的生命周期逻辑分散问题（如数据获取与清理分散在不同方法）  \n- 实现更灵活的逻辑复用（自定义Hook）  \n \n**核心规则**：  \n1. 只在最顶层调用Hook（不可在条件/循环中调用）  \n2. 仅在React函数组件或自定义Hook中使用  ',1916407199693844483,'2025-04-27 12:58:01','2025-04-27 12:58:01','2025-04-27 16:30:04',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916356203420626945,' React Hooks 的设计意义与核心规则',' ### React Hooks 的设计意义是什么？为了实现什么目的？\n### 同时 React Hooks的核心规则又是什么？','[\"React Hooks\",\"Hooks\",\"生命周期\"]','\n**设计意义**：  \n- 解决类组件的生命周期逻辑分散问题（如数据获取与清理分散在不同方法）  \n- 实现更灵活的逻辑复用（自定义Hook）  \n \n**核心规则**：  \n1. 只在最顶层调用Hook（不可在条件/循环中调用）  \n2. 仅在React函数组件或自定义Hook中使用  ',1916407199693844483,'2025-04-27 12:58:17','2025-04-27 12:58:17','2025-04-27 16:30:05',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916356678740127746,'Redux 的核心工作流程的各大核心概念','### 请你阐述 Redux 的核心工作流程的各大核心概念，如Action、Reducer、Store、数据流的含义，请你简单阐述。','[\"Redux\",\"Redux特性\",\"Redux组件\"]','\n1. **Action**：描述事件的对象（如 `{type: \'ADD_TODO\', payload: \'...\'}`）  \n2. **Reducer**：纯函数，接收旧状态和Action，返回新状态  \n3. **Store**：通过 `createStore` 创建，包含状态树和中间件  \n4. **数据流**：`View → Action → Reducer → Store → View Update`[4]()  ',1916407199693844483,'2025-04-27 13:00:11','2025-04-27 13:00:11','2025-04-27 16:30:03',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916356962170220545,' React Router 的实现原理','###  React Router 的实现原理是什么，请阐述一下。','[\" React Router\",\" Router路由\",\"路由\",\"React路由\"]','\n- **BrowserRouter**：基于HTML5 History API（`pushState`/`replaceState`）  \n- **HashRouter**：通过URL哈希值（如 `#/home`）实现无刷新路由  \n- **核心组件**：  \n  - `<Routes>` 和 `<Route>` 定义路由映射  \n  - `<Link>` 生成导航链接，`useNavigate` 实现编程式导航  ',1916407199693844483,'2025-04-27 13:01:18','2025-04-27 13:01:18','2025-04-27 16:30:04',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916357337950498818,'React 服务端渲染（SSR）的核心价值','### React 服务端渲染（SSR）的核心价值是什么，请详细阐述。','[\"SSR\",\"服务端渲染\",\"React 服务端渲染\"]','# React 服务端渲染（SSR）的核心价值 \n \n## 1. **SEO 优化与内容可索引性**\n- **搜索引擎友好**：传统客户端渲染（CSR）的动态内容无法被爬虫有效抓取，而 SSR 生成的完整 HTML 结构可直接被搜索引擎解析[1]()[2]()。例如，新闻、电商类网站通过 SSR 能显著提升关键词排名[5]()。\n- **元数据预置**：在服务端可直接注入 `<title>`、`<meta>` 等 SEO 关键标签，确保爬虫准确获取页面描述[6]()[8]()。\n \n## 2. **首屏性能优化**\n- **减少白屏时间**：服务端预渲染的 HTML 可直接展示，无需等待客户端 JS 加载和执行，首屏加载速度提升 30%-50%[1]()[4]()。例如，Next.js  的流式渲染（Streaming SSR）支持分块传输内容，进一步缩短首次内容渲染时间[3]()[7]()。\n- **低网络环境优化**：在弱网条件下，用户仍能快速看到页面骨架，提升感知性能[4]()[7]()。\n \n## 3. **同构开发与代码复用**\n- **统一技术栈**：同一套 React 代码既在服务端生成静态 HTML，又在客户端进行交互激活（Hydration），降低维护成本[1]()[6]()。\n- **数据预取优化**：通过 `getServerSideProps`（Next.js ）在服务端同步获取数据，避免客户端多次请求导致的瀑布流问题[4]()[6]()。\n \n## 4. **技术架构升级**\n- **并发渲染支持**：React 18 的并发模式（Concurrent Mode）允许服务端中断低优先级任务，优先渲染关键内容，提升复杂应用的响应效率[3]()[6]()。\n- **流式传输（Streaming）**：通过 `renderToNodeStream` 逐块输出 HTML，减少服务端内存占用并加速内容到达时间[7]()[3]()。\n \n## 5. **用户体验增强**\n- **内容可见性优先**：用户无需等待 JS 执行即可看到主要内容，降低跳出率[2]()[8]()。\n- **渐进式增强**：在客户端激活后保留完整的交互能力（如表单提交、动态路由），兼顾静态展示与动态功能[4]()[6]()。\n \n---\n \n> **总结**：React SSR 的核心价值在于 **平衡性能与功能**，通过服务端预渲染解决 SEO 和首屏性能瓶颈，同时利用现代框架（如 Next.js ）实现开发效率与用户体验的双重提升。对于内容密集型、高 SEO 需求的应用（如企业官网、媒体平台），SSR 是首选方案[5]()[7]()。',1916407199693844483,'2025-04-27 13:02:48','2025-04-27 13:02:48','2025-04-27 16:30:04',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916357989745340418,'React 服务端渲染（SSR）的 SEO 优化','### 阐述React 服务端渲染（SSR）的 SEO 优化的特性和适合的场景','[\"SEO优化\",\"React\",\"SEO\",\"渲染策略\",\"SSR SEO特性\"]','# React 服务端渲染（SSR）的 SEO 优化特性与适用场景 \n \n## 一、SEO 优化核心特性 \n \n### 1. **静态 HTML 预渲染**\n- 服务器端生成完整的 HTML 结构，包含所有动态内容（如文本、链接、元数据），确保爬虫无需执行 JavaScript 即可获取完整页面信息[1]()[3]()。\n- 相较于客户端渲染（CSR）的空白 HTML 模板，SSR 的预渲染页面可直接被搜索引擎索引，避免内容缺失导致的排名下降[2]()[6]()。\n \n### 2. **元数据动态注入**\n- 通过 `<title>`、`<meta>` 等标签在服务端动态注入关键词、描述、结构化数据（Schema.org ），精准控制 SEO 元信息[1]()[2]()。\n- 示例：新闻类页面可为每篇文章生成独立的标题和摘要，提升搜索结果的点击率。\n \n### 3. **爬虫兼容性保障**\n- 解决传统 SPA 对 JavaScript 执行能力弱的爬虫（如百度）的兼容问题，确保异步加载内容也能被完整抓取[2]()[6]()。\n- 支持流式渲染（Streaming SSR），分块传输 HTML 内容，加速爬虫解析效率[1]()[3]()。\n \n---\n \n## 二、适用场景分析 \n \n### 1. **内容密集型网站**\n- **新闻/媒体平台**：需要快速索引大量文章内容，依赖关键词排名获取流量[1]()[3]()。\n- **电商平台**：商品详情页需确保价格、规格等核心信息被搜索引擎收录，促进自然流量转化[4]()。\n \n### 2. **高 SEO 需求应用**\n- **企业官网/品牌站**：依赖搜索引擎获取潜在客户，需强化品牌关键词和业务描述[2]()[3]()。\n- **论坛/社区**：用户生成内容（UGC）的实时索引需求，如问答、评论等动态信息[6]()。\n \n### 3. **首屏内容敏感场景**\n- **低网络环境用户**：预渲染 HTML 减少首屏依赖 JS 加载，提升弱网条件下的内容可见性[1]()[3]()。\n- **广告着陆页**：需快速展示核心营销信息以降低跳出率，同时保障 SEO 关键词覆盖[4]()。\n \n---\n \n## 三、技术选型建议 \n- **框架推荐**：Next.js  内置 SSR 支持，简化路由配置和数据预取（`getServerSideProps`）[3]()[5]()。\n- **混合渲染策略**：对 SEO 关键页面使用 SSR，非核心页面采用 CSR 以降低服务器负载[1]()[4]()。\n- **性能监控**：结合 Lighthouse 和 Google Search Console 持续优化 TTFB（首字节时间）和 LCP（最大内容渲染）指标[2]()[6]()。\n \n> 提示：SSR 需权衡服务器成本与开发复杂度，建议通过 Next.js  等成熟框架降低实施门槛。更多技术细节可参考 [Next.js 官方文档](https://nextjs.org/docs)  或 [3]()[5]()。',1916407199693844483,'2025-04-27 13:05:23','2025-04-27 13:05:23','2025-04-27 16:30:06',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916358212882313218,'React Fiber 架构的核心改进','### 你知道React Fiber 架构吗，其有何改进？','[\"React Fiber \",\"错误边界\",\"增量渲染\",\"可中断渲染\"]','\n- **可中断渲染**：将渲染任务拆分为多个小任务，优先处理高优先级更新（如用户输入）  \n- **增量渲染**：通过 `requestIdleCallback` 在浏览器空闲时段执行任务  \n- **错误边界**：通过 `componentDidCatch` 捕获子组件树中的错误[4]()  ',1916407199693844483,'2025-04-27 13:06:16','2025-04-27 13:06:16','2025-04-27 16:30:05',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916359917300658178,' Spring Boot 自动配置的实现原理','###  Spring Boot 自动配置的实现原理是什么？','[\" Spring Boot 自动配置\",\" Spring Boot 特性\",\" Spring Boot 框架\"]','# Spring Boot 自动配置的实现原理 \n \n## 一、核心机制 \nSpring Boot 自动配置的核心目标是通过**条件化注解**和**预定义配置规则**，根据项目依赖和环境自动装配 Bean，实现**零配置开箱即用**。其核心流程可分为以下步骤：\n \n---\n \n## 二、实现原理详解 \n \n### 1. 启动入口与注解驱动 \n- **@SpringBootApplication**：  \n  该组合注解包含 `@EnableAutoConfiguration`，是自动配置的触发入口[1]()[3]()。其作用包括：  \n  - 扫描主类所在包及其子包组件  \n  - 通过 `@Import(AutoConfigurationImportSelector.class)`  加载自动配置类  \n \n### 2. 自动配置类加载机制 \n- **AutoConfigurationImportSelector**：  \n  该类实现 `ImportSelector` 接口，负责从以下位置读取配置类：  \n  - **META-INF/spring.factories** （Spring Boot 2.7 前主要来源）  \n  - **META-INF/spring/AutoConfiguration.imports** （Spring Boot 2.7+ 推荐格式）[4]()  \n  例如，`spring-boot-autoconfigure` 包的 `spring.factories`  定义了上百个默认配置类[1]()[5]()。\n \n### 3. 条件化注解筛选 \n自动配置类通过 **@Conditional** 系列注解判断是否生效，例如：  \n| 注解                     | 作用                                                         | 示例场景                     |\n|--------------------------|--------------------------------------------------------------|------------------------------|\n| `@ConditionalOnClass`    | 类路径存在指定类时生效                                       | 存在 `DataSource` 时配置数据库连接池 |\n| `@ConditionalOnProperty` | 配置文件中存在指定属性时生效                                 | `spring.datasource.url`  存在时启用数据源 |\n| `@ConditionalOnMissingBean` | 容器中无该类型 Bean 时生效                                 | 用户未自定义 `RedisTemplate` 时加载默认实现 |\n \n### 4. 配置属性绑定 \n- **@EnableConfigurationProperties**：  \n  将配置文件（如 `application.yml` ）中的属性绑定到 Java 对象。例如：  \n  ```java \n  @ConfigurationProperties(prefix = \"spring.http.encoding\") \n  public class HttpEncodingProperties {\n      private String charset = \"UTF-8\";\n      // Getter/Setter \n  }',1916407199693844483,'2025-04-27 13:13:03','2025-04-27 13:13:03','2025-04-27 16:30:05',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916360175657201666,'Spring Boot Starter 的设计意义','### Spring Boot Starter 的设计意义是什么？','[\"Spring Boot Starter\",\"Spring Boot\"]','\nStarter 的核心价值在于简化依赖管理：  \n1. **依赖聚合**：如 `spring-boot-starter-web` 包含 Spring MVC、Tomcat、Jackson 等 Web 开发必备依赖，避免版本冲突[1]()[2]()。  \n2. **自动配置**：每个 Starter 携带 `spring.factories`  文件，声明其关联的自动配置类[4]()。  \n3. **标准化开发**：官方/第三方 Starter 统一命名规范（如 `xxx-spring-boot-starter`），提升生态兼容性[3]()。  ',1916407199693844483,'2025-04-27 13:14:04','2025-04-27 13:14:04','2025-04-27 16:30:06',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916360469438836738,'Spring Boot 如何简化 Spring 应用的开发','### Spring Boot 如何简化 Spring 应用的开发？','[\"SpringBoot 特性\",\"SpringBoot优化\",\"SpringBoot开发\"]','\nSpring Boot 通过四大特性简化开发：  \n1. **嵌入式容器**：内嵌 Tomcat/Jetty，无需部署 WAR 包，`java -jar` 直接运行[1]()[5]()。  \n2. **自动配置**：基于类路径依赖智能推断 Bean 配置[3]()。  \n3. **Actuator 监控**：提供 `/health`、`/metrics` 等端点实现生产级监控[3]()。  \n4. **统一配置**：支持 `application.yml`  多环境配置，通过 `@ConfigurationProperties` 实现类型安全绑定[4]()。  ',1916407199693844483,'2025-04-27 13:15:14','2025-04-27 13:15:14','2025-04-27 16:30:05',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916360752554356738,'Spring Boot 与 Spring MVC 的核心区别','### 简单阐述一下，Spring Boot 与 Spring MVC 的核心区别是什么？','[\"Spring Boot 特性\",\"Spring MVC \"]','\n| **维度**        | Spring MVC                  | Spring Boot                  |  \n|-----------------|-----------------------------|------------------------------|  \n| **配置方式**    | 需手动配置 DispatcherServlet| 零 XML 配置，自动装配        |  \n| **部署**        | 依赖外部容器（如 Tomcat）   | 内嵌容器，独立运行           |  \n| **依赖管理**    | 手动管理各依赖版本          | Starter 统一管理依赖         |  \n| **监控**        | 无原生支持                  | 集成 Actuator 提供监控端点   |  ',1916407199693844483,'2025-04-27 13:16:22','2025-04-27 13:16:22','2025-04-27 16:30:04',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916364085042130946,'Spring Boot 的多环境配置','### 如何实现 Spring Boot 的多环境配置？如 Profile 注解、外部化配置等等。','[\"多环境配置\",\"Spring Boot\"]','\n1. **配置文件拆分**：创建 `application-{dev|prod}.yml`，通过 `spring.profiles.active=dev`  激活[3]()。  \n2. **Profile 注解**：使用 `@Profile(\"dev\")` 标注特定环境下的 Bean[4]()。  \n3. **外部化配置**：支持从环境变量、命令行参数（`--server.port=8081` ）覆盖配置[1]()。  \n**最佳实践**：利用 `spring.config.import`  实现配置文件的模块化加载[4]()。 ',1916407199693844483,'2025-04-27 13:29:36','2025-04-27 13:29:36','2025-04-27 16:30:05',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916364300407058434,'Spring Boot Actuator 的核心功能','### Spring Boot Actuator 的核心功能有哪些？','[\"Actuator\",\"Spring Boot Actuator\"]','\nActuator 提供以下生产就绪功能：  \n1. **健康检查**：`/health` 端点显示数据库、磁盘状态等[3]()。  \n2. **指标监控**：`/metrics` 暴露 JVM 内存、HTTP 请求统计等数据[4]()。  \n3. **环境信息**：`/env` 展示所有配置属性，支持动态修改（需配合 `@RefreshScope`）[3]()。  \n4. **审计日志**：记录用户操作事件，便于安全审计[1]()。  \n ',1916407199693844483,'2025-04-27 13:30:28','2025-04-27 13:30:28','2025-04-27 16:30:06',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916364596206153730,'如何将 Spring Boot 应用打包为可执行 JAR','### 如何将 Spring Boot 应用打包为可执行 JAR？','[\"插件配置\",\"分层构建\",\"启动脚本\",\" Spring Boot 应用打包\"]','\n1. **插件配置**：在 `pom.xml`  中添加 `spring-boot-maven-plugin`，执行 `mvn package` 生成 FAT JAR[1]()[5]()。  \n2. **分层构建**：通过 `<layers>` 配置将依赖、资源、代码分离，优化 Docker 镜像构建效率[4]()。  \n3. **启动脚本**：生成的 JAR 包含 Unix/Windows 启动脚本，支持 `java -jar` 直接运行[3]()。  ',1916407199693844483,'2025-04-27 13:31:38','2025-04-27 13:31:38','2025-04-27 16:30:05',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916364763508551682,'Spring Boot 集成 MyBatis','### Spring Boot 如何集成 MyBatis？','[\" MyBatis\",\"Spring Boot\"]','\n集成步骤分为四步：  \n1. **添加 Starter**：引入 `mybatis-spring-boot-starter` 依赖[3]()。  \n2. **配置数据源**：在 `application.yml`  中定义 `spring.datasource`  参数[4]()。  \n3. **Mapper 扫描**：使用 `@MapperScan(\"com.example.mapper\")`  注解自动注册接口[1]()。  \n4. **事务管理**：通过 `@Transactional` 注解声明式管理数据库事务[3]()。  ',1916407199693844483,'2025-04-27 13:32:18','2025-04-27 13:32:18','2025-04-27 16:30:03',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916364926142689282,'Spring Boot 的监控方案','### Spring Boot 的监控方案有哪些？','[\"监控\",\"监控方案\",\"Spring Boot\"]','\n主流监控方案包括：  \n1. **Spring Boot Admin**：可视化监控平台，聚合多个实例的健康状态[3]()。  \n2. **Prometheus + Grafana**：通过 `micrometer-registry-prometheus` 暴露指标，Grafana 展示仪表盘[4]()。  \n3. **ELK 日志分析**：集成 Logstash 将日志发送到 Elasticsearch，Kibana 可视化分析[1]()。  ',1916407199693844483,'2025-04-27 13:32:57','2025-04-27 13:32:57','2025-04-27 16:30:06',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916365192476798978,' Spring Boot 实现热部署','###  Spring Boot 如何实现热部署？请简单阐述。','[\"DevTools\",\"JRebel\",\"热部署\",\"Spring Boot\"]','\n两种热部署方案：  \n1. **DevTools**：添加 `spring-boot-devtools` 依赖，IDE 修改代码后自动重启（需开启 Build Project Automatically）[3]()[5]()。  \n2. **JRebel**：商业工具，支持类/资源热加载，无需重启应用[1]()。  \n**限制**：静态资源修改可直接生效，但 Bean 定义变更仍需重启[4]()。  ',1916407199693844483,'2025-04-27 13:34:00','2025-04-27 13:34:00','2025-04-27 16:30:04',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916366662802649089,'JavaScript  闭包的定义与典型应用场景','### 请阐述 JS 闭包的定义与典型应用场景。','[\"JavaScript \",\"闭包\"]','\n闭包（Closure）是函数与其词法环境的组合，允许内部函数访问外部函数的作用域[1]()。核心特性包括：\n- **持久化变量**：外层函数变量不会被垃圾回收 \n- **数据封装**：创建私有变量（如计数器实现）\n```javascript \nfunction createCounter() {\n  let count = 0;\n  return function() { return ++count; };\n}\nconst counter = createCounter();\nconsole.log(counter());  // 1 \n```\n应用场景：\n\n    模块化开发（实现私有方法）\n    防抖/节流函数\n    缓存计算结果（Memoization）',1916407199693844483,'2025-04-27 13:39:51','2025-04-27 13:39:51','2025-04-27 16:30:04',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916367042479435778,'JavaScript 原型链继承机制','### JavaScript 原型链继承机制是什么？','[\"JavaScript 原型链继承机制\",\"JavaScript \",\"原型链\"]','## 原型链继承机制\n\n**答案**\nJavaScript 通过原型链实现继承：\n\n1. **构造函数原型**：每个函数都有 `prototype` 属性指向原型对象\n2. **实例继承**：对象通过 `__proto__` 继承原型属性\n3. **链式查找**：访问属性时逐级向上查找原型链[5](https://blog.csdn.net/weixin_32534011/article/details/116410193)\n\n```\njavascript复制function Animal(name) { this.name  = name; }\nAnimal.prototype.speak  = function() { console.log(this.name);  };\n \nfunction Dog(name) { Animal.call(this,  name); }\nDog.prototype  = Object.create(Animal.prototype); \n```\n\n',1916407199693844483,'2025-04-27 13:41:21','2025-04-27 13:41:21','2025-04-27 16:30:06',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916367063207686145,'JavaScript 原型链继承机制','### JavaScript 原型链继承机制是什么？','[\"JavaScript 原型链继承机制\",\"JavaScript \",\"原型链\"]','## 原型链继承机制\n\n**答案**\nJavaScript 通过原型链实现继承：\n\n1. **构造函数原型**：每个函数都有 `prototype` 属性指向原型对象\n2. **实例继承**：对象通过 `__proto__` 继承原型属性\n3. **链式查找**：访问属性时逐级向上查找原型链[5](https://blog.csdn.net/weixin_32534011/article/details/116410193)\n\n```\njavascript复制function Animal(name) { this.name  = name; }\nAnimal.prototype.speak  = function() { console.log(this.name);  };\n \nfunction Dog(name) { Animal.call(this,  name); }\nDog.prototype  = Object.create(Animal.prototype); \n```\n\n',1916407199693844483,'2025-04-27 13:41:26','2025-04-27 13:41:26','2025-04-27 16:30:05',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916367533326249985,'javascript 中事件循环（Event Loop）运行机制','### 你知道 JavaScript 事件循环（Event Loop）运行机制是什么吗？','[\"JavaScript\",\"Event Loop\"]','JavaScript 单线程通过事件循环处理异步任务：\n\n1. **调用栈**：同步任务立即执行\n\n2. 任务队列\n\n   ：\n\n   - 宏任务：`setTimeout`、DOM 事件\n   - 微任务：`Promise.then` 、`MutationObserver`\n\n3. **执行顺序**：同步代码 → 微任务 → 宏任务[1](https://www.php.cn/faq/474942.html)\n\n```\njavascript复制console.log(1); \nsetTimeout(() => console.log(2),  0);\nPromise.resolve().then(()  => console.log(3)); \n// 输出顺序：1 → 3 → 2 \n```\n\n',1916407199693844483,'2025-04-27 13:43:18','2025-04-27 13:43:18','2025-04-27 19:02:50',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916367795055013889,'javascript 中 ES6 核心特性解析','### 你知道 ES6 核心特性解析是什么？','[\"ES6 核心特性\",\"JS\"]','| 特性          | 说明                        | 示例                      |\n| ------------- | --------------------------- | ------------------------- |\n| **let/const** | 块级作用域变量声明          | `let x = 10`              |\n| **箭头函数**  | 简化函数写法，绑定外层 this | `() => console.log(this)` |\n| **解构赋值**  | 快速提取对象/数组值         | `const {name} = obj`      |\n| **Class**     | 面向对象语法糖              | `class User {}`           |\n\n',1916407199693844483,'2025-04-27 13:44:21','2025-04-27 13:44:21','2025-04-27 19:02:41',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916368089960722434,'javascript 中 Promise 与 async/await 的对比','### javascript 中 Promise 与 async/await 的对比','[\"Promise \",\" async/await\"]','- Promise\n\n  ：\n\n  - 三种状态：pending/fulfilled/rejected\n  - 链式调用：`.then().catch()`\n\n- async/await\n\n  ：\n\n  - 语法糖：用同步方式写异步代码\n  - 错误处理：必须配合 try/catch[1](https://www.php.cn/faq/474942.html)\n\n```\njavascript复制// Promise \nfetch(url).then(res => res.json()).catch(console.error); \n \n// async/await \nasync function loadData() {\n  try {\n    const res = await fetch(url);\n    return res.json(); \n  } catch(err) { console.error(err);  }\n}\n```\n\n',1916407199693844483,'2025-04-27 13:45:31','2025-04-27 13:45:31','2025-04-27 19:02:21',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916368424502603778,'javascript 的 this 关键字的指向规则','### this 关键字的指向规则','[\"this 关键字\",\"指向规则\",\"javascript\"]','| 场景         | this 指向        | 示例                      |\n| ------------ | ---------------- | ------------------------- |\n| 普通函数调用 | window/undefined | `function fn() {this...}` |\n| 对象方法调用 | 所属对象         | `obj.method()`            |\n| 构造函数     | 新创建实例       | `new User()`              |\n| 箭头函数     | 外层 this 绑定   | `() => {this...}`         |\n\n',1916407199693844483,'2025-04-27 13:46:51','2025-04-27 13:46:51','2025-04-27 16:30:03',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916368816854577154,'javascript 中类型转换机制与 === 区别','### JS中类型转换机制与 === 区别是什么，简要阐述即可。','[\"类型转换机制\",\"JS\",\"===\"]','- 隐式转换规则\n\n  ：\n\n  - 字符串拼接：`1 + \"2\" = \"12\"`\n  - 布尔判断：`if(0)` 判定为 false\n\n- == 与 ===\n\n  ：\n\n  - `==` 会进行类型转换后比较\n  - `===` 严格比较类型和值[5](https://blog.csdn.net/weixin_32534011/article/details/116410193)\n\n```\njavascript复制0 == false   // true \n0 === false  // false \n```\n\n',1916407199693844483,'2025-04-27 13:48:25','2025-04-27 13:48:25','2025-04-27 19:03:02',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916369336109412354,'JavaScript 中 作用域链与变量提升','### JS 中 作用域链与变量提升 的特性是什么？阐述一下。','[\"JS  \",\"JS 作用域链\",\"JS 变量提升 \"]','- \n  变量提升\n\n  ：\n\n  - var 声明提升到作用域顶部\n  - let/const 存在暂时性死区\n\n- 作用域链\n\n  ：\n\n  - 函数执行时创建作用域链\n  - 内部函数可访问外层变量[1](https://www.php.cn/faq/474942.html)\n\n```\njavascript复制console.log(a);  // undefined（var a 被提升）\nvar a = 5;\n```\n\n',1916407199693844483,'2025-04-27 13:50:28','2025-04-27 13:50:28','2025-04-27 19:56:12',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916369781787766786,'JavaScript 中常见设计模式实现','### JS 中常见设计模式实现你了解吗？如：单例模式、观察者模式。','[\"单例模式\",\"观察者模式\",\"JS设计模式\"]','**1.单例模式**：确保类只有一个实例\n\n```\njavascript复制class Logger {\n  constructor() { \n    if (!Logger.instance)  Logger.instance  = this;\n    return Logger.instance; \n  }\n}\n```\n\n**2.观察者模式**：对象间订阅/通知机制\n\n```\njavascript复制class Subject {\n  constructor() { this.observers  = []; }\n  subscribe(obs) { this.observers.push(obs);  }\n  notify(data) { this.observers.forEach(obs  => obs.update(data));  }\n}\n```',1916407199693844483,'2025-04-27 13:52:15','2025-04-27 13:52:15','2025-04-27 19:56:17',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916370093105786881,'JavaScript 性能优化实践方案','### 你做过 JS 性能优化吗？请阐述相关方案。','[\"JS 性能优化\"]','- \n  减少重绘回流\n\n  ：\n\n  - 使用 `transform` 代替 top/left 修改\n  - 批量 DOM 操作（文档片段）\n\n- 内存管理\n\n  ：\n\n  - 及时解除事件监听\n  - 避免循环引用\n\n- 代码优化\n\n  ：\n\n  - 节流防抖函数\n  - Web Worker 处理密集型任务[4](https://blog.csdn.net/weixin_52710450/article/details/117326399)\n\n------\n\n> 提示：更多技术细节可参考 [MDN Web Docs](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript) 或 [1](https://www.php.cn/faq/474942.html)[5](https://blog.csdn.net/weixin_32534011/article/details/116410193) 中的案例解析',1916407199693844483,'2025-04-27 13:53:29','2025-04-27 13:53:29','2025-04-27 19:56:21',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916372857504444417,'CSS 盒模型的组成及两种模型的区别','### CSS 盒模型的组成及两种模型的区别是什么？','[\"CSS盒模型\"]','\nCSS盒模型由四部分组成：内容（content）、内边距（padding）、边框（border）、外边距（margin）。  \n- **标准盒模型**：元素的 `width/height` 仅表示内容区大小  \n- **替代盒模型**：`width/height` 包含内容+内边距+边框（通过 `box-sizing: border-box` 切换）  \n触发方式：`box-sizing: content-box`（默认）为标准模型，`border-box` 为替代模型[3]()[4]()。\n ',1916407199693844483,'2025-04-27 14:04:28','2025-04-27 14:04:28','2025-04-27 16:30:05',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916373244877778946,'CSS 选择器优先级如何计算','### CSS 选择器优先级如何计算，你知道吗？','[\"CSS 选择器\",\"CSS 选择器优先级\"]','\n优先级从高到低：  \n1. `!important`  \n2. 内联样式（如 `style=\"color:red\"`）  \n3. ID选择器（`#id`）  \n4. 类/伪类/属性选择器（`.class`、`:hover`、`[type=\"text\"]`）  \n5. 元素/伪元素选择器（`div`、`::before`）  \n**特指度计算规则**：ID数 × 100 + 类数 × 10 + 元素数 × 1[3]()。',1916407199693844483,'2025-04-27 14:06:00','2025-04-27 14:06:00','2025-04-27 16:30:04',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916373633257746434,'CSS 中实现元素水平垂直居中的方法','### 实现元素水平垂直居中方法？','[\"CSS元素水平垂直居\",\"CSS语法特性\"]','\n```css \n/* Flex方案 */\n.parent { display: flex; justify-content: center; align-items: center; }\n \n/* Grid方案 */\n.parent { display: grid; place-items: center; }\n \n/* 绝对定位+平移 */\n.child { \n  position: absolute; \n  left: 50%; top: 50%; \n  transform: translate(-50%, -50%);\n}\n \n/* 表格布局 */\n.parent { display: table-cell; text-align: center; vertical-align: middle; }\n \n/* margin自动填充（需已知宽高） */\n.child { margin: auto; } \n```',1916407199693844483,'2025-04-27 14:07:33','2025-04-27 14:07:33','2025-04-27 19:01:39',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916373697111830530,'实现元素水平垂直居中的5种方法','### 实现元素水平垂直居中的5种方法？','[\"CSS元素水平垂直居\",\"CSS语法特性\"]','\n```css \n/* Flex方案 */\n.parent { display: flex; justify-content: center; align-items: center; }\n \n/* Grid方案 */\n.parent { display: grid; place-items: center; }\n \n/* 绝对定位+平移 */\n.child { \n  position: absolute; \n  left: 50%; top: 50%; \n  transform: translate(-50%, -50%);\n}\n \n/* 表格布局 */\n.parent { display: table-cell; text-align: center; vertical-align: middle; }\n \n/* margin自动填充（需已知宽高） */\n.child { margin: auto; } \n```',1916407199693844483,'2025-04-27 14:07:48','2025-04-27 14:07:48','2025-04-27 16:30:04',1,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916373944642875393,'CSS 中 Flexbox 中 flex: 1 的含义','### Flexbox 中 flex: 1 的含义','[\"Flexbox\",\"CSS语法\"]','`flex: 1` 是 `flex-grow: 1`（扩展比例）、`flex-shrink: 1`（收缩比例）、`flex-basis: 0%`（初始尺寸）的简写。表示元素会根据容器剩余空间自动伸缩，占据同等比例的空间[3](https://www.cnblogs.com/xiaodi-js/p/18725053)。',1916407199693844483,'2025-04-27 14:08:47','2025-04-27 14:08:47','2025-04-27 16:30:04',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916374431396048897,'CSS 中 什么是 BFC？如何触发？','### 在CSS 中什么是 BFC？如何触发？','[\"BFC\",\"CSS 的 BFC\"]','\n**BFC（块级格式化上下文）** 是独立渲染区域，内部布局不影响外部。触发条件：\n\n- `float` 非 `none`\n- `overflow` 非 `visible`\n- `display: inline-block/table-cell/flex`\n- `position: absolute/fixed`\n  应用场景：清除浮动、防止外边距折叠[3](https://www.cnblogs.com/xiaodi-js/p/18725053)[4](https://blog.csdn.net/SSSS__AS/article/details/125679229)。',1916407199693844483,'2025-04-27 14:10:43','2025-04-27 14:10:43','2025-04-27 19:01:08',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916374778164326402,'CSS 中响应式设计的实现方案','### 响应式设计的实现方案，阐述一下。','[\"CSS\",\"CSS响应式设计\"]','- **媒体查询**：`@media (max-width: 768px) { ... }` 适配不同屏幕\n- **视口单位**：使用 `vw/vh` 实现比例布局\n- **流式布局**：百分比宽度替代固定像素\n- **Flex/Grid**：弹性容器自动调整子项排列\n- **图片适配**：`srcset` 属性按分辨率加载[2](https://blog.csdn.net/simahe/article/details/143717024)[3](https://www.cnblogs.com/xiaodi-js/p/18725053)。\n\n',1916407199693844483,'2025-04-27 14:12:06','2025-04-27 14:12:06','2025-04-27 19:00:50',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916375026521649153,'CSS 中transition 和 animation 的核心区别','### 请你阐述transition 和 animation 的核心区别。','[\"transition\",\" animation \",\"CSS特性\"]','| **特性**     | transition               | animation                                                    |\n| ------------ | ------------------------ | ------------------------------------------------------------ |\n| **触发条件** | 需要状态变化（如:hover） | 自动或通过关键帧控制                                         |\n| **复杂度**   | 简单两态过渡             | 支持多关键帧复杂动画                                         |\n| **循环控制** | 不支持循环               | 可通过 `infinite` 实现循环                                   |\n| **适用场景** | 按钮悬停、颜色渐变       | 轮播图、骨骼动画等复杂效果[3](https://www.cnblogs.com/xiaodi-js/p/18725053)。 |\n\n',1916407199693844483,'2025-04-27 14:13:05','2025-04-27 14:13:05','2025-04-27 19:00:42',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916375190833508354,'CSS 预处理器的优势及常用工具','### CSS 预处理器的优势及常用工具有什么？','[\"CSS 预处理器\"]','\n**优势**：\n\n- 支持变量、嵌套、混合（Mixin）等编程特性\n- 模块化开发（如拆分 `_variables.scss` ）\n- 内置函数（颜色计算、循环等）\n  **常用工具**：Sass（使用 `$` 符号）、Less（使用 `@` 符号）[1](https://blog.csdn.net/pengxian00007/article/details/116716226)[3](https://www.cnblogs.com/xiaodi-js/p/18725053)。',1916407199693844483,'2025-04-27 14:13:44','2025-04-27 14:13:44','2025-04-27 18:58:03',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916375873980772354,'如何优化 CSS 性能？','### 如何优化 CSS 性能？说出你的方案。','[\"CSS优化\"]','- **减少重排/重绘**：使用 `transform` 替代 `top/left` 修改位置\n- **压缩代码**：删除注释、合并重复样式\n- **避免深层嵌套**：如 `.nav ul li a` 改为 `.nav-link`\n- **使用 GPU 加速**：对动画元素添加 `will-change: transform`\n- **按需加载**：拆分首屏关键CSS[2](https://blog.csdn.net/simahe/article/details/143717024)[3](https://www.cnblogs.com/xiaodi-js/p/18725053)。\n\n',1916407199693844483,'2025-04-27 14:16:27','2025-04-27 14:16:27','2025-04-27 16:30:04',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916376252332158978,'CSS 中清除浮动的方法','### CSS 中清除浮动的方法你知道吗？回答三种最好。','[\"CSS 清除浮动\",\"CSS语法\"]','- **减少重排/重绘**：使用 `transform` 替代 `top/left` 修改位置\n- **压缩代码**：删除注释、合并重复样式\n- **避免深层嵌套**：如 `.nav ul li a` 改为 `.nav-link`\n- **使用 GPU 加速**：对动画元素添加 `will-change: transform`\n- **按需加载**：拆分首屏关键CSS[2](https://blog.csdn.net/simahe/article/details/143717024)[3](https://www.cnblogs.com/xiaodi-js/p/18725053)。\n\n\n\n',1916407199693844483,'2025-04-27 14:17:57','2025-04-27 14:17:57','2025-04-27 16:30:05',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916378340617400322,'Elasticsearch 中倒排索引的原理及其核心优势 ','### Elasticsearch 中倒排索引的原理及其核心优势是什么？','[\"Elasticsearch\",\"倒排索引\"]','\n倒排索引是Elasticsearch实现快速搜索的核心数据结构，由两个核心部分组成：\n- **词典（Term Dictionary）**：存储所有文档中出现过的分词结果，按字典序排序[2]()[3]()。\n- **倒排列表（Posting List）**：记录每个词项对应的文档ID集合及位置信息。\n \n**优势**：\n1. **高效检索**：直接通过词项定位文档，时间复杂度为O(1)；\n2. **空间压缩**：使用FST（Finite State Transducer）压缩存储，降低内存占用[2]()；\n3. **支持复杂查询**：支持布尔逻辑、短语匹配、模糊查询等[3]()。',1916407199693844483,'2025-04-27 14:26:15','2025-04-27 14:26:15','2025-04-27 16:30:05',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916401120159248386,' Elasticsearch 中 分片（Shard）与副本（Replica）的设计意义',' ### Elasticsearch 中，分片（Shard）与副本（Replica）的设计意义是什么？请你简单阐述。','[\"Elasticsearch \",\"Shard\",\"Replica\",\"分片与副本\"]','\n- **分片**：  \n  1. 将索引数据水平拆分，支持分布式存储和并行处理；\n  2. 分片数在索引创建时固定，建议每个分片大小控制在10-50GB[4]()；\n- **副本**：  \n  1. 提供数据冗余，防止节点故障导致数据丢失；\n  2. 提升查询吞吐量（副本分片可分担读请求）[1]()[4]()。',1916407199693844483,'2025-04-27 15:56:46','2025-04-27 15:56:46','2025-04-27 16:30:04',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916402006881251329,'Elasticsearch 中的 Master 节点选举机制','### 你知道 Elasticsearch 中的 Master 节点选举机制吗？','[\"Elasticsearch\",\"Master 节点选举\",\"节点选举\"]','\nElasticsearch通过Zen Discovery模块实现Master选举：\n1. **候选节点筛选**：仅`node.master=true` 的节点参与选举；\n2. **投票规则**：采用类Paxos算法，需获得超过半数候选节点投票；\n3. **防脑裂机制**：通过`discovery.zen.minimum_master_nodes` 设置最小候选节点数（通常为`(候选节点数/2)+1`）[4]()。\n',1916407199693844483,'2025-04-27 16:00:18','2025-04-27 16:00:18','2025-04-27 18:58:12',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916402693220380673,'Elasticsearch 中文档写入与更新流程','### Elasticsearch 中的文档写入与更新流程是什么？大概阐述一下。','[\"Elasticsearch\"]','\n1. **写入阶段**：  \n   - 文档先写入内存缓冲区，同时记录到事务日志（Translog）；\n   - 每隔1秒（默认）将缓冲区数据刷新（Refresh）到文件系统缓存，生成新段（Segment）[2]()。\n2. **更新阶段**：  \n   - 旧文档被标记为删除（记录在`.del`文件），新文档写入新段；\n   - 段合并（Merge）时物理删除旧文档[2]()[4]()。',1916407199693844483,'2025-04-27 16:03:01','2025-04-27 16:03:01','2025-04-27 16:30:04',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916402873424457730,'Elasticsearch 中性能调优的常用策略','### Elasticsearch 中性能调优的常用策略','[\"Elasticsearch\",\"Elasticsearch优化\"]','\n- **索引设计优化**：  \n  1. 使用别名管理滚动索引（如按时间拆分）；\n  2. 冷热数据分离，SSD存储热数据[2]()。\n- **查询优化**：  \n  1. 避免深分页（改用Search After）；\n  2. 使用Filter代替Query（利用缓存机制）[2]()[3]()。\n- **硬件配置**：  \n  1. 为JVM分配不超过32GB内存（避免指针压缩失效）；\n  2. 使用SSD提升IO性能[4]()。',1916407199693844483,'2025-04-27 16:03:44','2025-04-27 16:03:44','2025-04-27 16:30:04',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916411245628534786,'MySQL 复制原理及流程是什么','### MySQL 复制原理及流程是什么？','[\"MySQL\",\"MySQL原理\"]','\nMySQL 主从复制通过三个线程实现：  \n1. **主库 Binlog 线程**：记录所有数据变更操作到二进制日志（Binary Log）[1]()[3]()  \n2. **从库 I/O 线程**：拉取主库的 Binlog 内容并写入中继日志（Relay Log）  \n3. **从库 SQL 线程**：解析 Relay Log 并执行 SQL 语句实现数据同步  \n \n**核心流程**：  \n- 主库数据更新 → 记录 Binlog → 从库 I/O 线程读取 → 写入 Relay Log → SQL 线程执行 → 数据同步完成  \n \n**应用场景**：读写分离、数据备份、负载均衡等[5]()。\n ',1916407199693844483,'2025-04-27 16:37:00','2025-04-27 16:37:00','2025-04-27 16:37:00',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916411397617528833,'MySQL中InnoDB 和 MyISAM 的核心区别','### MySQL中 InnoDB 和 MyISAM 的核心区别？','[\"MySQL\",\"MySQL原理\"]','\n| **维度**       | InnoDB                  | MyISAM              |\n|----------------|-------------------------|---------------------|\n| **事务支持**   | 支持 ACID 事务          | 不支持事务          |\n| **锁机制**     | 行级锁                  | 表级锁              |\n| **外键**       | 支持                    | 不支持              |\n| **崩溃恢复**   | 有 Redo Log 保障        | 需手动修复          |\n| **存储结构**   | 数据与索引集中存储      | 数据与索引分离存储  |  \n**典型场景**：InnoDB 适合高并发写操作，MyISAM 适合读密集型场景[1]()[3]()。\n ',1916407199693844483,'2025-04-27 16:37:37','2025-04-27 16:37:37','2025-04-27 18:59:52',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916411542182604802,'MySQL 中解释 CHAR 和 VARCHAR 的区别','### MySQL 中解释 CHAR 和 VARCHAR 的区别？','[\"MySQL\",\"MySQL类型\"]','\n- **存储方式**：  \n  - CHAR 是定长类型，长度固定（1-255字符），存储时用空格填充至指定长度[1]()  \n  - VARCHAR 是变长类型，长度可变（1-65535字节），存储实际字符长度+长度标识  \n- **性能对比**：  \n  - CHAR 查询更快（固定长度无需计算），但可能浪费存储空间  \n  - VARCHAR 节省空间，但频繁更新可能导致页分裂  \n**示例**：`CHAR(10)` 存入 \"abc\" 占 10 字节，`VARCHAR(10)` 存入 \"abc\" 占 4 字节[3]()。\n ',1916407199693844483,'2025-04-27 16:38:11','2025-04-27 16:38:11','2025-04-27 19:00:05',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916411695689936898,'MySQL中事务的四大隔离级别及解决的问题','### MySQL中事务的四大隔离级别及解决的问题?','[\"MySQL\",\"MySQL事务\"]','\n| **级别**           | 脏读 | 不可重复读 | 幻读 | 实现机制                 |\n|--------------------|------|------------|------|--------------------------|\n| 读未提交 (RU)      | ❌    | ❌          | ❌    | 无锁                     |\n| 读已提交 (RC)      | ✅    | ❌          | ❌    | 快照读                   |\n| 可重复读 (RR)      | ✅    | ✅          | ❌    | MVCC + 间隙锁（InnoDB） |\n| 串行化 (Serializable) | ✅    | ✅          | ✅    | 完全加锁                 |  \n**默认级别**：InnoDB 默认采用可重复读（RR）[6]()。\n ',1916407199693844483,'2025-04-27 16:38:48','2025-04-27 16:38:48','2025-04-27 18:58:44',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916411822005596162,'MySQL中 SQL 优化的常用手段有哪些？','### MySQL中 SQL 优化的常用手段有哪些？','[\"MySQL\",\"SQL优化\"]','\n1. **索引优化**：  \n   - 避免在 WHERE 子句中对字段进行函数操作（如 `WHERE YEAR(date)=2023`）  \n   - 使用覆盖索引减少回表查询[4]()  \n2. **语句优化**：  \n   - 用 EXISTS 替代 IN 子查询  \n   - 避免 SELECT *，明确指定字段  \n3. **分库分表**：对超 500 万行的表进行水平拆分[4]()  \n4. **配置调优**：调整 `innodb_buffer_pool_size` 提升缓存命中率  \n ',1916407199693844483,'2025-04-27 16:39:18','2025-04-27 16:39:18','2025-04-27 18:59:13',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916411989207330818,'MySQL中 B+ 树索引的优势是什么？','### MySQL 中B+ 树索引的优势是什么？','[\"MySQL\",\"B+树\",\"B+树索引\",\"MySQL索引\"]','\n- **减少磁盘 I/O**：树形结构层级低，每个节点存储大量键值（相比 B 树）  \n- **范围查询高效**：叶子节点形成双向链表，快速遍历范围数据  \n- **排序优化**：索引本身有序，避免 filesort 操作[4]()  \n**对比哈希索引**：B+树支持范围查询，哈希仅适合等值查询。\n ',1916407199693844483,'2025-04-27 16:39:58','2025-04-27 16:39:58','2025-04-27 18:59:30',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916412164558598145,'MySQL 中如何实现数据库备份与恢复','### MySQL 中如何实现数据库备份与恢复？','[\"MySQL\",\"MySQL数据安全性\",\"数据恢复\"]','\n- **物理备份**：  \n  - 使用 `xtrabackup` 工具热备份 InnoDB 数据文件  \n  - 优点：速度快，支持增量备份[1]()  \n- **逻辑备份**：  \n  - 用 `mysqldump` 导出 SQL 语句  \n  - 恢复命令：`mysql -u root -p dbname < backup.sql`   \n**注意事项**：定期验证备份文件可用性[4]()。',1916407199693844483,'2025-04-27 16:40:39','2025-04-27 16:40:39','2025-04-27 16:41:50',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916412278345871362,'MySQL主从数据不一致如何校验','### MySQL主从数据不一致如何校验？','[\"MySQL主从数据\"]','\n- **工具校验**：  \n  - Percona 的 `pt-table-checksum` 检查数据差异  \n  - `pt-table-sync` 修复不一致数据[4]()  \n- **手动校验**：  \n  - 对关键表执行 CHECKSUM TABLE 对比结果  \n  - 定期抽样查询高频数据  ',1916407199693844483,'2025-04-27 16:41:07','2025-04-27 16:41:07','2025-04-27 16:41:47',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916412400584667137,'MySQL高并发场景下如何优化数据库','### MySQL高并发场景下如何优化数据库？','[\"MySQL\",\"高并发\",\"MySQL并发\"]','\n1. **架构层**：  \n   - 读写分离：主库写，从库读  \n   - 引入缓存（Redis）减轻数据库压力  \n2. **SQL 层**：  \n   - 避免长事务，设置合理的事务超时时间  \n   - 批量操作代替逐条处理  \n3. **硬件层**：  \n   - 使用 SSD 提升磁盘 I/O 性能  \n   - 增加内存容量提升缓冲池命中率[4]()  \n ',1916407199693844483,'2025-04-27 16:41:36','2025-04-27 16:41:36','2025-04-27 16:41:36',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916412618139021314,'MySQL分库分表的常见策略','### MySQL分库分表的常见策略？','[\"MySQL\",\"MySQL策略\",\"分库分表\"]','\n- **垂直分表**：将大字段（如 TEXT）拆分到独立表  \n- **水平分库**：  \n  - 按哈希分片：均匀分布数据（如用户 ID % 8）  \n  - 按范围分片：按时间或 ID 区间划分（如2023年数据单独分库）  \n**工具支持**：ShardingSphere、MyCat 等中间件[4]()  \n ',1916407199693844483,'2025-04-27 16:42:28','2025-04-27 16:42:28','2025-04-27 16:42:28',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916449639993823233,'将二元查找树转换为排序双向链表','### 输入一棵二元查找树，要求不创建新节点，仅调整指针指向实现排序双向链表。  ','[\"数据结构\",\"算法\",\"排序\",\"链表\"]','  \n## 采用中序遍历递归实现：  \n1. 递归处理左子树，返回左子树最大节点  \n2. 将左子树最大节点的右指针指向当前根节点  \n3. 递归处理右子树，返回右子树最小节点  \n4. 将右子树最小节点的左指针指向当前根节点  \n时间复杂度：O(n)，空间复杂度：O(h)（h为树高度）[1]()',1916407199693844483,'2025-04-27 19:09:34','2025-04-27 19:09:34','2025-04-27 19:09:34',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916449833166688257,'设计包含min函数的栈  ','### 实现具有min函数（获取栈内最小值）的栈结构，要求所有操作时间复杂度O(1)。','[\"栈  \",\"min函数  \"]','### 双栈解法\n```python\nclass MinStack:\n    def __init__(self):\n        self.stack  = []\n        self.min_stack  = []\n \n    def push(self, val):\n        self.stack.append(val) \n        if not self.min_stack  or val <= self.min_stack[-1]: \n            self.min_stack.append(val) \n \n    def pop(self):\n        if self.stack.pop()  == self.min_stack[-1]: \n            self.min_stack.pop() \n \n    def top(self):\n        return self.stack[-1] \n \n    def get_min(self):\n        return self.min_stack[-1] \n```\n### 复杂度分析\n\n    所有操作时间复杂度：O(1)\n    空间复杂度：O(n)（最坏情况）\n### 优化方向\n\n    差值存储法（减少空间占用）\n    链表实现（支持多线程）2',1916407199693844483,'2025-04-27 19:10:20','2025-04-27 19:10:20','2025-04-27 19:23:48',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916450228760858626,'求子数组的最大和','### 给定含正负数的整型数组，求所有子数组和的最大值。','[\"子数组的最大和\",\"算法\"]','\n## 采用动态规划解法：\n\n``` python\ndef max_subarray(arr):\n    max_sum = curr_sum = arr[0]\n    for num in arr[1:]:\n        curr_sum = max(num, curr_sum + num)\n        max_sum = max(max_sum, curr_sum)\n    return max_sum \n```\n时间复杂度：O(n)，空间复杂度：O(1)',1916407199693844483,'2025-04-27 19:11:55','2025-04-27 19:11:55','2025-04-27 19:11:55',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916450491613696001,'二叉树路径和匹配','### 输入整数target和二叉树，打印所有从根节点到叶节点路径和为target的路径。','[\"二叉树\",\"数据结构\",\"搜索\",\"DFS\"]','### 前序遍历+回溯算法：\n\n1. 用栈记录当前路径\n2. 到达叶节点时计算路径和\n3. 匹配则输出路径\n   关键代码：\n\n```\njava复制void findPath(TreeNode root, int target) {\n    dfs(root, target, new ArrayList<>(), 0);\n}\nvoid dfs(TreeNode node, int target, List<Integer> path, int sum) {\n    if(node == null) return;\n    sum += node.val; \n    path.add(node.val); \n    if(node.left==null  && node.right==null  && sum==target)\n        System.out.println(path); \n    dfs(node.left,  target, path, sum);\n    dfs(node.right,  target, path, sum);\n    path.remove(path.size()-1); \n}\n```',1916407199693844483,'2025-04-27 19:12:57','2025-04-27 19:12:57','2025-04-27 19:12:57',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916450832900018177,'判断二叉搜索树的后序遍历','### 验证整数序列是否为某二叉搜索树的后序遍历结果。 ','[\"后序\",\"搜索\",\"二叉树\"]','\n### 递归分治法：\n\n1. 序列最后一个元素为根节点\n2. 找到第一个大于根节点的位置作为右子树起点\n3. 验证右子树所有节点大于根节点\n4. 递归验证左右子树\n   时间复杂度：O(n²)，最优解可通过单调栈优化到O(n)\n\n',1916407199693844483,'2025-04-27 19:14:19','2025-04-27 19:14:19','2025-04-27 19:14:19',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916452443781189634,'实现二叉树镜像（递归与非递归）','### 给定一棵二叉树的根节点，生成它的镜像（所有左右子节点交换）。','[\"二叉树镜像\",\"数据结构\",\"算法\"]','\n### 解法一：递归实现 \n```python \nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val  = val \n        self.left  = left \n        self.right  = right \n \ndef mirror_tree(root):\n    if not root:\n        return None \n    # 交换左右子树 \n    root.left,  root.right  = root.right,  root.left  \n    # 递归处理子树 \n    mirror_tree(root.left) \n    mirror_tree(root.right) \n    return root \n```\n**复杂度分析**\n\n- 时间复杂度：O(n)，每个节点访问一次\n- 空间复杂度：O(h)，h为树高（递归栈深度）\n\n### 解法二：非递归实现（队列层序遍历）\n\n```\npython复制from collections import deque \n \ndef mirror_tree_iterative(root):\n    if not root:\n        return None \n    queue = deque([root])\n    while queue:\n        node = queue.popleft() \n        node.left,  node.right  = node.right,  node.left  \n        if node.left: \n            queue.append(node.left) \n        if node.right: \n            queue.append(node.right) \n    return root \n```\n\n**复杂度分析**\n\n- 时间复杂度：O(n)，每个节点访问一次\n- 空间复杂度：O(n)，队列最大存储节点数\n\n**应用场景**\n\n- 图像处理中的对称变换\n- 二叉树结构对比（如判断两棵树是否互为镜像）',1916407199693844483,'2025-04-27 19:20:43','2025-04-27 19:20:43','2025-04-27 19:20:43',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916452612513845250,'反转单链表（迭代与递归）','### 给定单链表的头节点，返回反转后的链表头节点。','[\"数据结构\",\"算法\",\"单链表\"]','###  解法一：迭代法（三指针）\n\n```\npython复制class ListNode:\n    def __init__(self, val=0, next=None):\n        self.val  = val \n        self.next  = next \n \ndef reverse_list(head):\n    prev = None \n    curr = head \n    while curr:\n        next_temp = curr.next  \n        curr.next  = prev \n        prev = curr \n        curr = next_temp \n    return prev \n```\n\n**复杂度分析**\n\n- 时间复杂度：O(n)\n- 空间复杂度：O(1)\n\n### 解法二：递归法\n\n```\npython复制def reverse_list_recursive(head):\n    if not head or not head.next: \n        return head \n    new_head = reverse_list_recursive(head.next) \n    head.next.next  = head \n    head.next  = None \n    return new_head \n```\n\n**复杂度分析**\n\n- 时间复杂度：O(n)\n- 空间复杂度：O(n)（递归栈深度）\n\n**变体问题**\n\n- 反转链表的一部分（如第m到第n个节点）\n- K个一组反转链表',1916407199693844483,'2025-04-27 19:21:23','2025-04-27 19:21:23','2025-04-27 19:21:23',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916452792462069761,'求子数组最大和','### 给定整数数组（含负数），找出连续子数组的最大和。','[\"动态规划\",\"算法\"]','- \n\n### Kadane算法实现\n\n```\npython复制def max_subarray(nums):\n    max_current = max_global = nums[0]\n    for num in nums[1:]:\n        max_current = max(num, max_current + num)\n        max_global = max(max_global, max_current)\n    return max_global \n```\n\n**复杂度分析**\n\n- 时间复杂度：O(n)\n- 空间复杂度：O(1)\n\n**边界案例**\n\n- 全负数数组：返回最大的单个负数\n- 全正数数组：返回整个数组的和\n\n**扩展应用**\n\n- 股票买卖问题（最大利润计算）\n- 二维矩阵中的最大子矩阵和',1916407199693844483,'2025-04-27 19:22:06','2025-04-27 19:22:06','2025-04-27 19:22:06',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916453798956617730,'快速排序算法实现与优化','### 手写快速排序算法，并分析其优化策略。','[\"数据结构\",\"算法\",\"排序\"]','### 基础实现\n```python\ndef quick_sort(arr):\n    if len(arr) <= 1:\n        return arr \n    pivot = arr[len(arr)//2]\n    left = [x for x in arr if x < pivot]\n    middle = [x for x in arr if x == pivot]\n    right = [x for x in arr if x > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n```\n### 复杂度分析\n    平均时间复杂度：O(n log n)\n    最坏时间复杂度：O(n²)（已排序数组）\n### 优化策略\n    三数取中法：选择首、中、尾的中位数作为基准\n    尾递归优化：减少递归栈深度\n    插入排序混合：小数组切换为插入排序（阈值通常为5-15）\n### 双指针分区：减少内存占用\n```python\ndef partition(arr, low, high):\n    pivot = arr[high]\n    i = low - 1 \n    for j in range(low, high):\n        if arr[j] <= pivot:\n            i += 1 \n            arr[i], arr[j] = arr[j], arr[i]\n    arr[i+1], arr[high] = arr[high], arr[i+1]\n    return i+1 \n```\n### 应用场景\n\n    大规模数据排序\n    内存敏感场景（原地排序）',1916407199693844483,'2025-04-27 19:26:06','2025-04-27 19:26:06','2025-04-27 19:26:06',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916455222352400386,'TCP如何实现可靠传输','### TCP如何实现可靠传输？详细说明其核心机制 ','[\"TCP协议\",\"计算机网络\"]','\nTCP通过以下机制保障数据传输的可靠性（综合[3]()[4]()）：  \n1. **三次握手建立连接**：  \n   - 客户端发送SYN=1、seq=x报文  \n   - 服务端返回SYN=1、ACK=1、seq=y、ack=x+1报文  \n   - 客户端发送ACK=1、seq=x+1、ack=y+1报文  \n   - **意义**：确认双方收发能力正常，协商初始序列号防止历史连接混淆  \n \n2. **滑动窗口协议**：  \n   - 发送窗口管理待确认数据（动态调整大小）  \n   - 接收窗口通过ACK报文反馈可接收数据范围  \n   - **优势**：实现流量控制与连续发送的平衡  \n \n3. **超时重传机制**：  \n   - 每个数据包设置RTO（Retransmission Timeout）计时器  \n   - 未收到ACK时触发重传，采用指数退避策略（如初始RTO=1s，失败后翻倍）  \n   - **优化**：通过快重传机制（收到3个重复ACK立即重传）减少等待时间  \n \n4. **数据校验机制**：  \n   - 使用16位校验和字段验证数据完整性  \n   - 发现错误时直接丢弃报文，由发送端重传  \n \n5. **有序传输保证**：  \n   - 通过序列号（seq）和确认号（ack）确保数据按序到达  \n   - 接收端对乱序数据暂存缓冲区，等待缺失数据重传后重组  \n \n> **应用场景**：文件传输（FTP）、网页加载（HTTP）、邮件传输（SMTP）等需要完整数据交付的场景均依赖TCP可靠性[1]()。\n ',1916407199693844483,'2025-04-27 19:31:45','2025-04-27 19:31:45','2025-04-27 19:31:45',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916455406704644098,'HTTPS的完整握手过程','### HTTPS的完整握手过程包含哪些步骤？','[\"HTTPS\",\"计算机网络\",\"握手\"]','\nHTTPS握手过程分为以下阶段（基于TLS 1.2协议，参考[3]()[5]()）：  \n \n### 阶段一：TCP连接建立 \n客户端通过三次握手与服务器建立TCP连接（默认端口443）  \n \n### 阶段二：TLS握手协商 \n1. **Client Hello**：  \n   - 客户端发送支持的TLS版本、密码套件列表、随机数（Client Random）  \n   - 包含SNI（Server Name Indication）扩展指明目标域名  \n \n2. **Server Hello**：  \n   - 服务器选择TLS版本、密码套件，返回随机数（Server Random）  \n   - 发送数字证书链（包含CA签名的公钥）  \n \n3. **证书验证**：  \n   - 客户端用预置CA公钥验证证书合法性（有效期、域名匹配等）  \n   - 生成预备主密钥（Pre-Master Secret），用服务器公钥加密后发送  \n \n4. **密钥交换**：  \n   - 双方通过Client Random、Server Random、Pre-Master Secret生成会话密钥  \n   - 启用加密通信前发送Change Cipher Spec通知  ',1916407199693844483,'2025-04-27 19:32:29','2025-04-27 19:32:29','2025-04-27 19:32:29',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916455685705551873,'DNS解析的全过程','### 详细描述DNS解析的全过程（含递归与迭代查询）','[\"计算机网路\",\"DNS解析\"]','\nDNS解析流程如下（综合[3]()[4]()）：  \n \n### 递归查询过程（客户端→本地DNS）：\n1. 浏览器缓存查询 → 无结果则检查hosts文件  \n2. 向本地DNS服务器（如ISP提供）发起查询请求  \n3. 本地DNS服务器执行迭代查询：  \n   - 查询根域名服务器（返回顶级域.com的NS记录）  \n   - 查询.com顶级域服务器（返回权威域名服务器的NS记录）  \n   - 查询权威域名服务器（返回目标域名的A记录）  \n4. 本地DNS缓存结果并返回给客户端  \n \n### 迭代查询过程（本地DNS→外部服务器）：\n1. 根域名服务器仅返回下一级NS地址，不直接解析完整域名  \n2. 每级服务器只负责管辖域内的记录查询  \n \n### 记录类型说明：\n- **A记录**：域名→IPv4地址  \n- **AAAA记录**：域名→IPv6地址  \n- **CNAME**：域名别名映射  \n- **MX**：邮件服务器地址  \n \n> **优化机制**：  \n> - TTL（Time-To-Live）控制缓存有效期  \n> - DNS负载均衡（同一域名返回多个IP地址）[1]()',1916407199693844483,'2025-04-27 19:33:36','2025-04-27 19:33:36','2025-04-27 19:33:36',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916455842266337281,'解释TCP拥塞控制的四大核心算法 ','### 解释TCP拥塞控制的四大核心算法 ','[\"TCP拥塞控制\",\"TCP协议\",\"计算机网络\"]','\nTCP拥塞控制通过四个算法阶段实现（参考[3]()[4]()）：  \n \n| 阶段        | 触发条件               | 窗口调整策略                     |\n|-------------|------------------------|----------------------------------|\n| **慢启动**  | 连接建立/超时重传      | 窗口按指数增长（cwnd=1→2→4→8…） |\n| **拥塞避免**| cwnd≥ssthresh          | 窗口线性增长（每RTT增加1）       |\n| **快重传**  | 收到3个重复ACK         | 立即重传丢失包，不等待超时       |\n| **快恢复**  | 快重传后               | cwnd=ssthresh，进入拥塞避免阶段  |\n \n### 参数说明：\n- **cwnd（拥塞窗口）**：发送方可传输的最大未确认数据量  \n- **ssthresh（慢启动阈值）**：初始值通常为65535字节，超时后设为当前cwnd/2  \n \n### 典型场景：\n当网络出现丢包时：  \n1. 若因超时触发：判定为严重拥塞，ssthresh=cwnd/2，cwnd重置为1，重启慢启动  \n2. 若因重复ACK触发：执行快重传和快恢复，避免过度降低吞吐量  \n \n> **现代优化**：BBR算法基于带宽和延迟测量替代丢包反馈，更适用于高带宽网络[4]()。\n ',1916407199693844483,'2025-04-27 19:34:13','2025-04-27 19:34:13','2025-04-27 19:34:13',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916456069744414721,'HTTP/2的核心特性及与HTTP/1.1的主要区别','### HTTP/2的核心特性有哪些？与HTTP/1.1的主要区别是什么？','[\"HTTP2\",\"HTTP1.1\",\"计算机网络\",\"HTTP协议\"]','\nHTTP/2的革新特性如下（对比HTTP/1.1，参考[3]()[5]()）：  \n \n### 核心特性：\n1. **二进制分帧层**：  \n   - 将报文分解为HEADERS帧和DATA帧  \n   - 实现多路复用，解决队头阻塞问题  \n \n2. **头部压缩（HPACK）**：  \n   - 使用静态字典（61个常用头字段）和动态字典压缩头部大小  \n   - 典型请求头部从500+字节压缩到30字节  \n \n3. **服务器推送**：  \n   - 服务器可主动推送CSS/JS等依赖资源  \n   - 客户端通过PUSH_PROMISE帧确认是否需要  \n \n4. **流优先级**：  \n   - 支持给数据流设置1-256的优先级权重  \n   - 优化关键资源（如HTML）的加载顺序  \n \n### 与HTTP/1.1对比：\n| 特性         | HTTP/1.1                  | HTTP/2                     |\n|--------------|---------------------------|----------------------------|\n| 连接管理     | 每个域名6-8个TCP连接      | 单连接多路复用             |\n| 数据格式     | 文本格式                  | 二进制分帧                 |\n| 头部处理     | 重复发送完整头部          | HPACK压缩                 |\n| 资源加载     | 按顺序加载                | 优先级流控制              |\n| 服务器主动性 | 被动响应                  | 支持主动推送               |\n \n> **性能影响**：HTTP/2可使页面加载速度提升30%-50%，尤其在高延迟网络中效果显著[5]()。\n \n---',1916407199693844483,'2025-04-27 19:35:07','2025-04-27 19:35:07','2025-04-27 19:35:07',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916456730787696642,'冯·诺依曼体系结构的核心原理及其对现代计算机的影响','### 冯·诺依曼体系结构的核心原理及其对现代计算机的影响','[\"计算机组成原理\",\"冯·诺依曼\"]','\n### **冯·诺依曼体系结构是现代计算机设计的基石[1]()[2]()，其核心原理包括**：  \n1. **存储程序控制**：程序与数据以二进制形式存储在同一存储器中，CPU按顺序读取并执行指令[4]()[5]()。  \n2. **五大组件**：运算器、控制器、存储器、输入设备和输出设备协同工作，其中存储器为核心交互介质[5]()[6]()。  \n3. **顺序执行与指令控制**：指令按线性顺序处理，通过操作码和地址码实现流程控制[2]()[6]()。  \n \n### **对现代计算机的影响**：  \n- **硬件标准化**：统一了计算机基础架构，使不同厂商设备可兼容[1]()[6]()。  \n- **性能瓶颈突破**：通过缓存技术（如多级存储金字塔）缓解内存与CPU速度差异问题[5]()。  \n- **扩展性提升**：基于总线结构实现模块化扩展（如增加GPU、外设）[6]()。  ',1916407199693844483,'2025-04-27 19:37:45','2025-04-27 19:37:45','2025-04-27 19:37:45',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916456878821462018,' 计算机存储层次结构的设计意义与实现方式 ','###  计算机存储层次结构的设计意义与实现方式 ','[\"计算机组成原理\",\"存储层次结构\"]','\n### 存储层次结构通过多级存储介质平衡速度、容量和成本[5]()[6]()：  \n1. **层次划分**（由高到低）：  \n   - 寄存器 → 高速缓存（L1/L2/L3） → 主存（RAM） → 辅助存储（磁盘/SSD） → 离线存储（磁带/云存储）  \n2. **设计意义**：  \n   - **速度优化**：利用局部性原理（时间/空间局部性），高频数据存放于高速缓存[5]()。  \n   - **成本控制**：低速大容量存储承担冷数据保存，降低单位存储成本[6]()。  \n3. **实现技术**：  \n   - **缓存映射策略**：直接映射、组相联映射、全相联映射[5]()。  \n   - **预取算法**：预测并加载后续可能访问的数据[6]()。  ',1916407199693844483,'2025-04-27 19:38:20','2025-04-27 19:38:20','2025-04-27 19:38:20',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916457018852495361,'指令周期的详细流程与优化技术 ','### 指令周期（Fetch-Decode-Execute）的详细流程与优化技术 ','[\"指令周期\",\"Fetch-Decode-Execut\"]','\n**基础流程**[5]()[6]()：  \n1. **取指阶段（Fetch）**：  \n   - PC寄存器指向内存地址，读取下一条指令到指令寄存器（IR）。  \n   - PC值自动递增（或跳转指令修改）。  \n2. **译码阶段（Decode）**：  \n   - 控制器解析操作码和地址码，生成控制信号（如ALU操作类型）。  \n3. **执行阶段（Execute）**：  \n   - ALU执行运算，结果写入寄存器或内存（如ADD指令）。  \n \n**优化技术**：  \n- **流水线技术**：将指令周期拆分为更细粒度阶段（如5级流水线），并行处理多条指令[6]()。  \n- **分支预测**：通过历史记录预测跳转目标，减少流水线停顿[5]()。  \n- **超标量架构**：多执行单元并行处理指令（如Intel超线程）[6]()。  ',1916407199693844483,'2025-04-27 19:38:54','2025-04-27 19:38:54','2025-04-27 19:38:54',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916457201204056066,'计算机总线的作用与常见总线类型对比 ','### 计算机总线的作用与常见总线类型对比 ','[\"计算机总线\",\"计算机组成原理\"]','\n**总线作用**[5]()[6]()：  \n1. **数据通路**：传输指令、数据、控制信号。  \n2. **模块化设计**：标准化接口实现组件可替换性（如PCIe插槽）。  \n3. **性能调控**：总线带宽决定系统吞吐量上限。  \n \n**常见总线类型**：  \n| 总线类型 | 带宽 | 应用场景 | 特点 |  \n|----------|------|----------|------|  \n| **系统总线** | 高（如DDR5 51.2GB/s） | CPU与内存通信 | 低延迟、点对点连接[5]() |  \n| **I/O总线**（如USB 4） | 40Gbps | 外设连接 | 热插拔、协议兼容性强[6]() |  \n| **扩展总线**（如PCIe 5.0） | 128GB/s | GPU/SSD扩展 | 全双工、通道聚合[5]() |  ',1916407199693844483,'2025-04-27 19:39:37','2025-04-27 19:39:37','2025-04-27 19:39:37',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916457374667886593,'中断机制的工作原理及其在操作系统中的应用 ','### 中断机制的工作原理及其在操作系统中的应用 ','[\"计算机组成原理\",\"中断机制\",\"操作系统\"]','\n### **中断机制流程**[5]()[6]()：  \n1. **中断触发**：硬件（如键盘输入）或软件（系统调用）发出中断请求（IRQ）。  \n2. **现场保存**：CPU将当前程序计数器（PC）和寄存器值压入堆栈。  \n3. **中断处理**：  \n   - 查询中断向量表，跳转到对应的中断服务程序（ISR）。  \n   - 执行设备驱动或系统服务（如磁盘读写完成通知）。  \n4. **恢复现场**：从堆栈恢复寄存器值，继续原程序执行。  \n \n### **操作系统中的应用**：  \n- **多任务调度**：时钟中断触发进程切换（时间片轮转）[6]()。  \n- **异常处理**：除零错误、缺页中断触发保护模式处理[5]()。  \n- **设备管理**：DMA传输完成后通过中断通知CPU释放资源[6]()。  ',1916407199693844483,'2025-04-27 19:40:18','2025-04-27 19:40:18','2025-04-27 19:40:18',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916459725503975426,'Redis 的 核心数据结构及其典型应用场景','### Redis 的 核心数据结构及其典型应用场景是什么？','[\"Redis \",\"核心数据结构\"]','\nRedis 的核心数据结构包括 String、List、Hash、Set 和 Sorted Set（ZSet），每种结构对应不同的应用场景：\n \n1. **String**  \n   - **特性**：支持二进制安全数据，最大容量 512MB。  \n   - **应用场景**：  \n     - **缓存**：存储序列化的用户信息（如 `SET user:1001 \"{name:\'John\', age:28}\"`）[1]()。  \n     - **计数器**：通过 `INCR` 实现文章浏览量统计[3]()。  \n     - **分布式锁**：利用 `SETNX` + `EXPIRE` 实现互斥操作[5]()。\n \n2. **List**  \n   - **特性**：双向链表结构，支持阻塞操作。  \n   - **应用场景**：  \n     - **消息队列**：`LPUSH` + `BRPOP` 实现异步任务处理[3]()。  \n     - **最新动态**：固定长度列表存储用户动态（如 `LPUSH news:1001 \"新发布文章\"`，`LTRIM` 保持列表长度）[4]()。\n \n3. **Hash**  \n   - **特性**：键值对集合，适合存储对象。  \n   - **应用场景**：  \n     - **用户属性存储**：单条命令操作用户多字段（如 `HMSET user:1001 name John age 28`）[5]()。  \n     - **购物车**：商品ID为字段，数量为值（如 `HSET cart:1001 item_001 2`）[4]()。\n \n4. **Set**  \n   - **特性**：无序唯一集合，支持交并差运算。  \n   - **应用场景**：  \n     - **标签系统**：存储文章标签（如 `SADD article:2001 tags:tech`）[3]()。  \n     - **好友推荐**：通过 `SINTER` 计算共同好友[2]()。\n \n5. **Sorted Set**  \n   - **特性**：元素按分数排序，底层为跳跃列表。  \n   - **应用场景**：  \n     - **排行榜**：`ZADD` + `ZREVRANGE` 实现实时排名（如音乐播放量排行）[1]()。  \n     - **延迟队列**：用时间戳作分数，定时扫描过期任务[5]()。\n ',1916407199693844483,'2025-04-27 19:49:39','2025-04-27 19:49:39','2025-04-27 19:49:39',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916459890705027073,'Redis 持久化机制 RDB 和 AOF 的优劣对比及适用场景','### Redis 持久化机制 RDB 和 AOF 的优劣对比及适用场景？','[\"Redis\",\"Redis 持久化机制\",\"RDB \",\"AOF \"]','\nRedis 提供两种持久化方案，各有适用场景：\n \n1. **RDB（Redis Database）**  \n   - **原理**：定时生成内存快照（二进制文件），默认保存为 `dump.rdb` 。  \n   - **优点**：  \n     - 文件紧凑（压缩存储），适合备份与灾难恢复[1]()。  \n     - 重启加载速度快（直接载入二进制数据）。  \n   - **缺点**：  \n     - 可能丢失最后一次快照后的数据（如 5 分钟间隔时宕机）。  \n     - 大数据量时 `SAVE` 会阻塞主线程[5]()。  \n   - **适用场景**：对数据完整性要求不高，需快速恢复的缓存系统。\n \n2. **AOF（Append-Only File）**  \n   - **原理**：记录所有写操作命令（文本日志），支持 `fsync` 策略（每秒/每次写入）。  \n   - **优点**：  \n     - 数据丢失风险低（如 `appendfsync always` 模式零丢失）。  \n     - 可读性强（日志文件可人工分析）[2]()。  \n   - **缺点**：  \n     - 文件体积大（需定期 `BGREWRITEAOF` 压缩）。  \n     - 恢复速度慢（需重新执行所有命令）[4]()。  \n   - **适用场景**：金融交易等对数据一致性要求高的场景。\n \n**混合模式建议**：生产环境通常同时开启 RDB 和 AOF，利用 RDB 快速恢复 + AOF 保证数据完整性。\n ',1916407199693844483,'2025-04-27 19:50:18','2025-04-27 19:50:18','2025-04-27 19:50:18',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916460086386085890,'Redis 集群方案（Cluster/Sentinel）','### Redis 集群方案（Cluster/Sentinel）如何实现高可用？','[\"Redis\",\"Redis 集群方案\",\"Cluster/Sentinel\"]','\nRedis 高可用方案主要有哨兵模式和集群模式：\n \n1. **哨兵模式（Sentinel）**  \n   - **架构**：由 3+ Sentinel 节点监控主从节点，自动故障转移。  \n   - **核心功能**：  \n     - **监控**：定期检查节点健康状态。  \n     - **自动故障转移**：主节点宕机时选举新主，更新客户端连接。  \n     - **配置中心**：客户端通过 Sentinel 获取最新主节点地址[2]()。  \n   - **缺点**：  \n     - 数据分片需客户端实现（如一致性哈希）。  \n     - 扩容复杂（需手动迁移数据）[5]()。\n \n2. **集群模式（Cluster）**  \n   - **架构**：16384 个哈希槽分片，每个节点负责部分槽位。  \n   - **核心机制**：  \n     - **数据分片**：`CRC16(key) % 16384` 计算槽位，支持跨节点操作（需 `ASK` 重定向）。  \n     - **故障恢复**：主节点宕机时，从节点自动升级为主[1]()。  \n     - **Gossip 协议**：节点间通信维护拓扑状态。  \n   - **优点**：  \n     - 水平扩展能力（支持动态增删节点）。  \n     - 无单点故障（数据分片 + 主从复制）[4]()。\n \n**选型建议**：中小规模用 Sentinel，超 100GB 数据量用 Cluster。',1916407199693844483,'2025-04-27 19:51:05','2025-04-27 19:51:05','2025-04-27 19:51:05',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916460227167899649,'Redis 内存优化策略','### Redis 内存优化策略有哪些？','[\"Redis\",\"Redis 内存优化\",\"Redis优化\"]','Redis 内存优化需结合数据结构与配置策略：\n \n1. **数据结构优化**  \n   - **压缩列表（ziplist）**：对小规模 Hash/List 使用连续内存存储（如 `hash-max-ziplist-entries 512`）[4]()。  \n   - **整数集合（intset）**：当 Set 元素全为整数时启用（如 `SADD set:1001 1 2 3`）[3]()。  \n   - **短结构存储**：String 长度 ≤44 字节时使用 embstr 编码（减少内存碎片）[5]()。\n \n2. **内存回收策略**  \n   - **过期键管理**：主动删除（定期采样） + 惰性删除（访问时检查）。  \n   - **淘汰策略**：根据场景选择：  \n     - `volatile-lru`：淘汰最近最少使用的过期键。  \n     - `allkeys-lfu`：淘汰全库访问频率最低的键[2]()。\n \n3. **共享对象池**  \n   - 复用 0~9999 的整数对象（通过 `redisObject` 的 `refcount` 计数）[1]()。\n \n4. **分片与分库**  \n   - **业务分库**：不同业务使用不同 DB（如用户数据存 DB0，商品数据存 DB1）。  \n   - **集群分片**：Cluster 模式自动分散数据[5]()。\n ',1916407199693844483,'2025-04-27 19:51:38','2025-04-27 19:51:38','2025-04-27 19:51:38',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916460490901540866,' Redis 实现电商场景下的秒杀系统的思路','### 如何用 Redis 实现电商场景下的秒杀系统？','[\" Redis \",\"秒杀系统\",\"秒杀系统缓存\",\"热点数据缓存\",\"异步订单处理\"]','\n电商秒杀系统需解决高并发、库存精准扣减问题，Redis 核心应用如下：\n \n1. **库存预扣减**  \n   - **原子操作**：使用 `DECR` 或 Lua 脚本保证原子性（避免超卖）：  \n     ```lua \n     local stock = redis.call(\'GET\',  KEYS[1])\n     if stock <= 0 then return 0 end \n     redis.call(\'DECR\',  KEYS[1])\n     return 1 \n     ```  \n   - **库存预热**：活动前通过 `SET seckill:1001 500` 初始化库存[3]()。\n \n2. **请求限流**  \n   - **令牌桶算法**：`INCR` + `EXPIRE` 控制每秒请求量。  \n   - **黑名单**：对恶意 IP 使用 `SADD blacklist 192.168.1.1`[1]()。\n \n3. **分布式锁**  \n   - **防止重复下单**：用户 ID 作为锁键，`SETNX user_lock:1001 true` 确保单用户一次请求[5]()。\n \n4. **异步订单处理**  \n   - **消息队列**：秒杀成功订单通过 `LPUSH order_queue \"{user:1001, item:2001}\"` 进入队列，由后台服务消费[4]()。\n \n5. **热点数据缓存**  \n   - **商品详情**：`EXPIRE` 设置短过期时间（如 30 秒），防止缓存击穿。  \n   - **本地缓存**：结合 Guava Cache 减少 Redis 访问压力[2]()。\n ',1916407199693844483,'2025-04-27 19:52:41','2025-04-27 19:52:41','2025-04-27 19:52:41',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916463279354531841,'Vue3 响应式系统如何基于 Proxy 实现？对比 Vue2 的 Object.defineProperty  有哪些突破？','### Vue3 响应式系统如何基于 Proxy 实现？对比 Vue2 的 Object.defineProperty  有哪些突破？','[\"Vue3\",\"Vue2\",\"Proxy \",\"响应式系统\",\"defineProperty \"]','### 1.1 代理对象创建 \n```javascript \nconst handler = {\n  get(target, key, receiver) {\n    track(target, key)  // 依赖收集 \n    return Reflect.get(...arguments) \n  },\n  set(target, key, value, receiver) {\n    trigger(target, key)  // 触发更新 \n    return Reflect.set(...arguments) \n  }\n}\nconst reactive = (obj) => new Proxy(obj, handler)\n```\n通过 `Proxy` 拦截对象属性的 **读取（get）** 和 **写入（set）** 操作，配合 `Reflect` 保证操作原子性[1](https://blog.csdn.net/Rverdoser/article/details/141866783)[5](https://blog.csdn.net/caihuayuan4/article/details/145461650)。\n\n### 1.2 突破性改进\n\n| **维度**         | Vue2（Object.defineProperty ） | Vue3（Proxy）                  |\n| ---------------- | ------------------------------ | ------------------------------ |\n| **嵌套对象监听** | 需递归初始化属性               | 惰性监听（访问时动态代理）     |\n| **数组操作支持** | 无法检测索引/长度变化          | 支持 push/pop/splice 等操作    |\n| **动态属性增删** | 需 set/*se**t*/delete 特殊处理 | 直接响应属性增删               |\n| **数据结构支持** | 仅支持 Object/Array            | 支持 Map/Set/WeakMap 等        |\n| **内存占用**     | 初始化时全量遍历               | 按需代理（首次访问时生成代理） |\n\n### 1.3 性能优化\n\n- **惰性代理**：仅在属性被访问时创建代理，减少初始化开销[3](https://blog.csdn.net/qq_47027106/article/details/119960649)\n- **批量更新**：通过调度器合并多次数据变更，避免重复渲染[5](https://blog.csdn.net/caihuayuan4/article/details/145461650)',1916407199693844483,'2025-04-27 20:03:46','2025-04-27 20:03:46','2025-04-27 20:03:46',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916463507793104898,'Composition API 解决了 Options API 的痛点','### Composition API 解决了 Options API 哪些痛点？请结合代码示例说明','[\"Composition API\",\"Options API\",\"VUE3\"]','Composition API 的核心价值在于 **逻辑关注点聚合**，对比 Options API 有三大优势：\n\n### 2.1 逻辑复用能力提升\n\n```\njavascript复制// 复用逻辑封装（用户权限检查）\nfunction usePermission() {\n  const hasPermission = ref(false)\n  const check = async (role) => { \n    /* 异步验证逻辑 */ \n  }\n  return { hasPermission, check }\n}\n \n// 组件使用 \nexport default {\n  setup() {\n    const { hasPermission, check } = usePermission()\n    return { hasPermission, check }\n  }\n}\n```\n\n通过自定义 Hook 实现跨组件逻辑复用，避免 Mixin 的命名冲突问题[3](https://blog.csdn.net/qq_47027106/article/details/119960649)。\n\n### 2.2 代码组织优化\n\n```\njavascript复制// Options API：相同功能代码分散 \nexport default {\n  data() { return { count: 0 } },\n  methods: { increment() { this.count++  } },\n  mounted() { console.log(this.count)  }\n}\n \n// Composition API：按功能聚合 \nsetup() {\n  const count = ref(0)\n  const increment = () => count.value++ \n  onMounted(() => console.log(count.value)) \n  return { count, increment }\n}\n```\n\n同一功能的响应式数据、方法与生命周期集中在同一代码块[3](https://blog.csdn.net/qq_47027106/article/details/119960649)。\n\n### 2.3 TypeScript 支持强化\n\n- **类型推断**：基于函数参数和返回值的类型推导更精准\n- **泛型支持**：可定义带泛型的组合式函数，如 `useFetch<T>()`',1916407199693844483,'2025-04-27 20:04:41','2025-04-27 20:04:41','2025-04-27 20:04:41',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916463770960515073,' Vue3 的虚拟 DOM 优化包含的关键技术？如何提升渲染性能？','###  Vue3 的虚拟 DOM 优化包含哪些关键技术？如何提升渲染性能？','[\"Vue3\",\"虚拟 DOM 优化\",\"DOM\"]','- \n\n### 3.1 静态提升（Static Hoisting）\n\n```\nhtml复制<div>\n  <h1>Static Title</h1>  <!-- 静态节点 -->\n  <p>{{ dynamicText }}</p>\n</div>\n```\n\n- **优化原理**：将静态节点转换为常量，避免重复创建 VNode[5](https://blog.csdn.net/caihuayuan4/article/details/145461650)\n- **性能收益**：减少 40% 的虚拟 DOM 生成时间[3](https://blog.csdn.net/qq_47027106/article/details/119960649)\n\n### 3.2 补丁标志（Patch Flags）\n\n```\njavascript复制// 动态节点标记 \nconst vnode = {\n  type: \'div\',\n  children: [\n    { type: \'p\', props: { class: _ctx.dynamicClass  }, patchFlag: 1 /* CLASS */ }\n  ]\n}\n```\n\n- **优化原理**：标记动态属性类型，diff 时跳过静态内容比对[5](https://blog.csdn.net/caihuayuan4/article/details/145461650)\n- **性能收益**：复杂组件 diff 速度提升 200%[1](https://blog.csdn.net/Rverdoser/article/details/141866783)\n\n### 3.3 事件缓存（Event Cache）\n\n```\njavascript复制// 内联事件缓存 \nconst render = () => h(\'button\', { \n  onClick: _cache[1] || (_cache[1] = e => _ctx.handleClick(e))  \n})\n```\n\n- **优化原理**：避免每次渲染重新生成事件处理函数[5](https://blog.csdn.net/caihuayuan4/article/details/145461650)\n- **性能收益**：高频事件组件渲染速度提升 30%',1916407199693844483,'2025-04-27 20:05:43','2025-04-27 20:05:43','2025-04-27 20:05:43',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916464134023663618,'Vue Router 的动态路由匹配机制如何实现？导航守卫有哪些类型？','### Vue Router 的动态路由匹配机制如何实现？导航守卫有哪些类型？','[\"Vue Router\",\"动态路由\",\"路由匹配机制\",\"导航守卫\"]','### 4.1 动态路由实现原理\n\n```\njavascript复制const routes = [\n  { path: \'/user/:id\', component: User }\n]\n \n// 路由参数获取 \nimport { useRoute } from \'vue-router\'\nsetup() {\n  const route = useRoute()\n  console.log(route.params.id)   // 输出动态ID \n}\n```\n\n- **路径解析**：将 `/user/123` 映射为 `{ path: \'/user/:id\', params: { id: 123 } }`\n- **组件复用**：相同路由不同参数时触发 `beforeRouteUpdate` 守卫[3](https://blog.csdn.net/qq_47027106/article/details/119960649)\n\n### 4.2 导航守卫类型\n\n| **类型**     | 触发时机                     | 典型应用场景           |\n| ------------ | ---------------------------- | ---------------------- |\n| 全局前置守卫 | 路由跳转前（异步）           | 权限校验、登录状态检查 |\n| 路由独享守卫 | 特定路由配置中定义           | 页面访问频率限制       |\n| 组件内守卫   | 在组件中通过选项/函数定义    | 数据预加载、表单防丢失 |\n| 全局解析守卫 | 所有组件守卫和异步组件解析后 | 确保资源加载完成的跳转 |\n\n------',1916407199693844483,'2025-04-27 20:07:10','2025-04-27 20:07:10','2025-04-27 20:07:10',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0),(1916464313040752642,'Vuex 与 Pinia 的核心差异是什么？在 Vue3 项目中如何选择？','### Vuex 与 Pinia 的核心差异是什么？在 Vue3 项目中如何选择？','[\"Pinia\",\"Vuex \",\"VUE3\"]','###  5.1 架构对比\n\n| **特性**        | Vuex                    | Pinia                 |\n| --------------- | ----------------------- | --------------------- |\n| 模块系统        | 基于 modules 的嵌套结构 | 扁平化 store 独立管理 |\n| TypeScript 支持 | 需额外类型声明          | 原生支持类型推导      |\n| Composition API | 需通过 mapHelpers 混入  | 直接使用 setup 语法   |\n| 插件机制        | 支持中间件              | 更简洁的插件 API      |\n| 体积            | 23KB (gzip)             | 8KB (gzip)            |\n\n### 5.2 选型建议\n\n- **新项目优先 Pinia**：更简洁的 API 设计和更好的 TS 支持[3](https://blog.csdn.net/qq_47027106/article/details/119960649)\n- **存量 Vuex 项目**：可通过 `pinia-plugin-vuex` 渐进迁移\n- **复杂状态管理**：Vuex 的严格模式（strict mode）更适合大型协作项目',1916407199693844483,'2025-04-27 20:07:53','2025-04-27 20:07:53','2025-04-27 20:07:53',0,0,NULL,NULL,NULL,0,0,0,0,NULL,0);
/*!40000 ALTER TABLE `question` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `question_bank`
--

DROP TABLE IF EXISTS `question_bank`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `question_bank` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'id',
  `title` varchar(256) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT '标题',
  `description` text COLLATE utf8mb4_unicode_ci COMMENT '描述',
  `picture` varchar(2048) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT '图片',
  `userId` bigint(20) NOT NULL COMMENT '创建用户 id',
  `editTime` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '编辑时间',
  `createTime` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `updateTime` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '更新时间',
  `isDelete` tinyint(4) NOT NULL DEFAULT '0' COMMENT '是否删除',
  `reviewStatus` int(11) NOT NULL DEFAULT '0' COMMENT '状态：0-待审核, 1-通过, 2-拒绝',
  `reviewMessage` varchar(512) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT '审核信息',
  `reviewerId` bigint(20) DEFAULT NULL COMMENT '审核人 id',
  `reviewTime` datetime DEFAULT NULL COMMENT '审核时间',
  `priority` int(11) NOT NULL DEFAULT '0' COMMENT '优先级',
  `viewNum` int(11) NOT NULL DEFAULT '0' COMMENT '浏览量',
  PRIMARY KEY (`id`),
  KEY `idx_title` (`title`)
) ENGINE=InnoDB AUTO_INCREMENT=1916462821806297090 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci COMMENT='题库';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `question_bank`
--

LOCK TABLES `question_bank` WRITE;
/*!40000 ALTER TABLE `question_bank` DISABLE KEYS */;
INSERT INTO `question_bank` VALUES (1916344439735889921,'HTML语言','HTML语言相关表题库，包括元素、属性、区块、布局、框架、脚本等等。','https://rich-tams.oss-cn-beijing.aliyuncs.com/RichInterview/680dae97e4b03512b901f066.png',1916407199693844483,'2025-04-27 12:11:33','2025-04-27 12:11:33','2025-04-27 16:30:39',0,0,NULL,NULL,NULL,0,0),(1916354082939908097,'React前端框架','React前端框架相关','https://rich-tams.oss-cn-beijing.aliyuncs.com/RichInterview/680db77fe4b03512b901f067.png',1916407199693844483,'2025-04-27 12:49:52','2025-04-27 12:49:52','2025-04-27 16:30:39',0,0,NULL,NULL,NULL,0,0),(1916359022726918145,'Spring Boot 框架','Spring Boot 框架相关的特性、底层逻辑、原理性问题','https://rich-tams.oss-cn-beijing.aliyuncs.com/RichInterview/680dbc2ce4b03512b901f068.png',1916407199693844483,'2025-04-27 13:09:29','2025-04-27 13:09:29','2025-04-27 16:30:39',0,0,NULL,NULL,NULL,0,0),(1916365992301211649,'JavaScript 语言','JavaScript 语言特性、运行机制','https://rich-tams.oss-cn-beijing.aliyuncs.com/RichInterview/680dc290e4b03512b901f069.png',1916407199693844483,'2025-04-27 13:37:11','2025-04-27 13:37:11','2025-04-27 16:30:39',0,0,NULL,NULL,NULL,0,0),(1916370321087180802,'MySQL 相关','MySQL 相关语法、特性、部署等','https://rich-tams.oss-cn-beijing.aliyuncs.com/RichInterview/680dc766e4b03512b901f06b.png',1916407199693844483,'2025-04-27 13:54:23','2025-04-27 13:54:23','2025-04-27 16:30:39',0,0,NULL,NULL,NULL,0,0),(1916370715666329601,'Elastic Stack 相关','Elasticsearch 的相关生态下的知识，包括语法、特性、部署等','https://rich-tams.oss-cn-beijing.aliyuncs.com/RichInterview/680dc773e4b03512b901f06c.png',1916407199693844483,'2025-04-27 13:55:57','2025-04-27 13:55:57','2025-04-27 16:30:39',1,0,NULL,NULL,NULL,0,0),(1916372469078339585,'CSS 相关','CSS 相关的语言、特性、生态等','https://rich-tams.oss-cn-beijing.aliyuncs.com/RichInterview/680dc895e4b03512b901f06d.png',1916407199693844483,'2025-04-27 14:02:55','2025-04-27 14:02:55','2025-04-27 16:30:39',0,0,NULL,NULL,NULL,0,0),(1916376999794880514,'Elasticsearch 相关','Elasticsearch 的相关生态下的知识，包括语法、特性、部署等','https://rich-tams.oss-cn-beijing.aliyuncs.com/RichInterview/680dccf7e4b03512b901f06e.png',1916407199693844483,'2025-04-27 14:20:55','2025-04-27 14:20:55','2025-04-27 16:30:39',0,0,NULL,NULL,NULL,0,0),(1916449283243102210,'数据结构与算法','数据结构与算法相关面试题','https://rich-tams.oss-cn-beijing.aliyuncs.com/RichInterview/680e1029e4b02d8b45a9664c.png',1916407199693844483,'2025-04-27 19:08:09','2025-04-27 19:08:09','2025-04-27 19:08:27',0,0,NULL,NULL,NULL,0,0),(1916454085138173954,'计算机网络相关','计算机网络相关知识','https://rich-tams.oss-cn-beijing.aliyuncs.com/RichInterview/680e14d3e4b02d8b45a9664d.png',1916407199693844483,'2025-04-27 19:27:14','2025-04-27 19:27:14','2025-04-27 19:28:20',0,0,NULL,NULL,NULL,0,0),(1916454314218475521,'计算机组成原理','计算机组成原理相关知识','https://rich-tams.oss-cn-beijing.aliyuncs.com/RichInterview/680e14d3e4b02d8b45a9664d.png',1916407199693844483,'2025-04-27 19:28:09','2025-04-27 19:28:09','2025-04-27 19:28:22',0,0,NULL,NULL,NULL,0,0),(1916459456988827650,'Redis 相关','Redis 相关','https://rich-tams.oss-cn-beijing.aliyuncs.com/RichInterview/680e1ac4e4b02d8b45a9664e.png',1916407199693844483,'2025-04-27 19:48:35','2025-04-27 19:48:35','2025-04-27 19:53:42',0,0,NULL,NULL,NULL,0,0),(1916462821806297089,'VUE 相关','VUE 相关知识','https://rich-tams.oss-cn-beijing.aliyuncs.com/RichInterview/680e1e39e4b02d8b45a9664f.png',1916407199693844483,'2025-04-27 20:01:57','2025-04-27 20:01:57','2025-04-27 20:08:27',0,0,NULL,NULL,NULL,0,0);
/*!40000 ALTER TABLE `question_bank` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `question_bank_question`
--

DROP TABLE IF EXISTS `question_bank_question`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `question_bank_question` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'id',
  `questionBankId` bigint(20) NOT NULL COMMENT '题库 id',
  `questionId` bigint(20) NOT NULL COMMENT '题目 id',
  `userId` bigint(20) NOT NULL COMMENT '创建用户 id',
  `createTime` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `updateTime` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '更新时间',
  `questionOrder` int(11) NOT NULL DEFAULT '0' COMMENT '题目顺序（题号）',
  PRIMARY KEY (`id`),
  UNIQUE KEY `questionBankId` (`questionBankId`,`questionId`)
) ENGINE=InnoDB AUTO_INCREMENT=1916464355256422403 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci COMMENT='题库题目';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `question_bank_question`
--

LOCK TABLES `question_bank_question` WRITE;
/*!40000 ALTER TABLE `question_bank_question` DISABLE KEYS */;
INSERT INTO `question_bank_question` VALUES (1916349985289449473,1916344439735889921,1916349763737923586,1916407199693844483,'2025-04-27 12:33:35','2025-04-27 16:32:13',0),(1916350705745047553,1916344439735889921,1916350704595808257,1916407199693844483,'2025-04-27 12:36:26','2025-04-27 16:32:13',0),(1916351710444433409,1916344439735889921,1916351710326992898,1916407199693844483,'2025-04-27 12:40:26','2025-04-27 16:32:13',0),(1916352156772904962,1916344439735889921,1916348763044098049,1916407199693844483,'2025-04-27 12:42:12','2025-04-27 16:32:13',0),(1916352548441206785,1916344439735889921,1916352548336349186,1916407199693844483,'2025-04-27 12:43:46','2025-04-27 16:32:13',0),(1916352561602932737,1916344439735889921,1916352561502269441,1916407199693844483,'2025-04-27 12:43:49','2025-04-27 16:32:13',0),(1916353575689170946,1916344439735889921,1916353575588507649,1916407199693844483,'2025-04-27 12:47:51','2025-04-27 16:32:13',0),(1916354549090660353,1916354082939908097,1916354548981608450,1916407199693844483,'2025-04-27 12:51:43','2025-04-27 16:32:13',0),(1916355315083816962,1916354082939908097,1916355314983153666,1916407199693844483,'2025-04-27 12:54:45','2025-04-27 16:32:13',0),(1916355617891594241,1916354082939908097,1916355617795125250,1916407199693844483,'2025-04-27 12:55:58','2025-04-27 16:32:13',0),(1916356136966074369,1916354082939908097,1916356136861216770,1916407199693844483,'2025-04-27 12:58:01','2025-04-27 16:32:13',0),(1916356203529678850,1916354082939908097,1916356203420626945,1916407199693844483,'2025-04-27 12:58:17','2025-04-27 16:32:13',0),(1916356678849179649,1916354082939908097,1916356678740127746,1916407199693844483,'2025-04-27 13:00:11','2025-04-27 16:32:13',0),(1916356962266689537,1916354082939908097,1916356962170220545,1916407199693844483,'2025-04-27 13:01:18','2025-04-27 16:32:13',0),(1916357338084716545,1916354082939908097,1916357337950498818,1916407199693844483,'2025-04-27 13:02:48','2025-04-27 16:31:34',0),(1916357989850198017,1916354082939908097,1916357989745340418,1916407199693844483,'2025-04-27 13:05:23','2025-04-27 16:31:35',0),(1916358212999753729,1916354082939908097,1916358212882313218,1916407199693844483,'2025-04-27 13:06:16','2025-04-27 16:31:35',0),(1916359917401321473,1916359022726918145,1916359917300658178,1916407199693844483,'2025-04-27 13:13:03','2025-04-27 16:31:35',0),(1916360175753670658,1916359022726918145,1916360175657201666,1916407199693844483,'2025-04-27 13:14:04','2025-04-27 16:31:34',0),(1916360469535305730,1916359022726918145,1916360469438836738,1916407199693844483,'2025-04-27 13:15:14','2025-04-27 16:31:34',0),(1916360752650825729,1916359022726918145,1916360752554356738,1916407199693844483,'2025-04-27 13:16:22','2025-04-27 16:31:35',0),(1916364085138599937,1916359022726918145,1916364085042130946,1916407199693844483,'2025-04-27 13:29:36','2025-04-27 16:31:34',0),(1916364300511916033,1916359022726918145,1916364300407058434,1916407199693844483,'2025-04-27 13:30:28','2025-04-27 16:31:34',0),(1916364596298428417,1916359022726918145,1916364596206153730,1916407199693844483,'2025-04-27 13:31:38','2025-04-27 16:31:35',0),(1916364763609214977,1916359022726918145,1916364763508551682,1916407199693844483,'2025-04-27 13:32:18','2025-04-27 16:31:34',0),(1916364926234963970,1916359022726918145,1916364926142689282,1916407199693844483,'2025-04-27 13:32:57','2025-04-27 16:31:35',0),(1916365192569073665,1916359022726918145,1916365192476798978,1916407199693844483,'2025-04-27 13:34:00','2025-04-27 16:31:34',0),(1916366662894923777,1916365992301211649,1916366662802649089,1916407199693844483,'2025-04-27 13:39:51','2025-04-27 16:31:35',0),(1916367279512137729,1916365992301211649,1916367042479435778,1916407199693844483,'2025-04-27 13:42:18','2025-04-27 16:31:35',0),(1916368424620044290,1916365992301211649,1916368424502603778,1916407199693844483,'2025-04-27 13:46:51','2025-04-27 16:31:34',0),(1916368602555002882,1916365992301211649,1916367063207686145,1916407199693844483,'2025-04-27 13:47:33','2025-04-27 16:31:35',0),(1916372857693188098,1916372469078339585,1916372857504444417,1916407199693844483,'2025-04-27 14:04:28','2025-04-27 16:31:35',0),(1916373244978442241,1916372469078339585,1916373244877778946,1916407199693844483,'2025-04-27 14:06:00','2025-04-27 16:31:35',0),(1916373697216688130,1916372469078339585,1916373697111830530,1916407199693844483,'2025-04-27 14:07:48','2025-04-27 16:31:34',0),(1916373944739344386,1916372469078339585,1916373944642875393,1916407199693844483,'2025-04-27 14:08:47','2025-04-27 16:31:35',0),(1916375874085629954,1916372469078339585,1916375873980772354,1916407199693844483,'2025-04-27 14:16:27','2025-04-27 16:32:13',0),(1916376252449599489,1916372469078339585,1916376252332158978,1916407199693844483,'2025-04-27 14:17:57','2025-04-27 16:32:13',0),(1916378340730646529,1916376999794880514,1916378340617400322,1916407199693844483,'2025-04-27 14:26:15','2025-04-27 16:32:13',0),(1916401543637151745,1916376999794880514,1916401120159248386,1916407199693844483,'2025-04-27 15:58:27','2025-04-27 16:32:13',0),(1916402916709675010,1916376999794880514,1916402693220380673,1916407199693844483,'2025-04-27 16:03:55','2025-04-27 16:32:13',0),(1916402934095065090,1916376999794880514,1916402873424457730,1916407199693844483,'2025-04-27 16:03:59','2025-04-27 16:32:13',0),(1916411245725003778,1916370321087180802,1916411245628534786,1916407199693844483,'2025-04-27 16:37:00','2025-04-27 16:37:00',0),(1916412765338120193,1916370321087180802,1916412164558598145,1916407199693844483,'2025-04-27 16:43:03','2025-04-27 16:43:03',0),(1916412781926592514,1916370321087180802,1916412278345871362,1916407199693844483,'2025-04-27 16:43:07','2025-04-27 16:43:07',0),(1916412795327393793,1916370321087180802,1916412400584667137,1916407199693844483,'2025-04-27 16:43:10','2025-04-27 16:43:10',0),(1916412809885822978,1916370321087180802,1916412618139021314,1916407199693844483,'2025-04-27 16:43:13','2025-04-27 16:43:13',0),(1916446741822033921,1916372469078339585,1916375190833508354,1916407199693844483,'2025-04-27 18:58:03','2025-04-27 18:58:03',0),(1916446779491078146,1916376999794880514,1916402006881251329,1916407199693844483,'2025-04-27 18:58:12','2025-04-27 18:58:12',0),(1916446913830440962,1916370321087180802,1916411695689936898,1916407199693844483,'2025-04-27 18:58:44','2025-04-27 18:58:44',0),(1916447035876298753,1916370321087180802,1916411822005596162,1916407199693844483,'2025-04-27 18:59:13','2025-04-27 18:59:13',0),(1916447105904398337,1916370321087180802,1916411989207330818,1916407199693844483,'2025-04-27 18:59:30','2025-04-27 18:59:30',0),(1916447199995219969,1916370321087180802,1916411397617528833,1916407199693844483,'2025-04-27 18:59:53','2025-04-27 18:59:53',0),(1916447253778780162,1916370321087180802,1916411542182604802,1916407199693844483,'2025-04-27 19:00:05','2025-04-27 19:00:05',0),(1916447406522748930,1916372469078339585,1916375026521649153,1916407199693844483,'2025-04-27 19:00:42','2025-04-27 19:00:42',0),(1916447441264168962,1916372469078339585,1916374778164326402,1916407199693844483,'2025-04-27 19:00:50','2025-04-27 19:00:50',0),(1916447517717942273,1916372469078339585,1916374431396048897,1916407199693844483,'2025-04-27 19:01:08','2025-04-27 19:01:08',0),(1916447648416649218,1916372469078339585,1916373633257746434,1916407199693844483,'2025-04-27 19:01:39','2025-04-27 19:01:39',0),(1916447854185009153,1916365992301211649,1916368089960722434,1916407199693844483,'2025-04-27 19:02:28','2025-04-27 19:02:28',0),(1916447906676723714,1916365992301211649,1916367795055013889,1916407199693844483,'2025-04-27 19:02:41','2025-04-27 19:02:41',0),(1916447944513540097,1916365992301211649,1916367533326249985,1916407199693844483,'2025-04-27 19:02:50','2025-04-27 19:02:50',0),(1916447995809878017,1916365992301211649,1916368816854577154,1916407199693844483,'2025-04-27 19:03:02','2025-04-27 19:03:02',0),(1916448123308331009,1916354082939908097,1916354837247733761,1916407199693844483,'2025-04-27 19:03:33','2025-04-27 19:03:33',0),(1916448155029852162,1916354082939908097,1916355081247174657,1916407199693844483,'2025-04-27 19:03:40','2025-04-27 19:03:40',0),(1916449640102875137,1916449283243102210,1916449639993823233,1916407199693844483,'2025-04-27 19:09:34','2025-04-27 19:09:34',0),(1916450933882081281,1916449283243102210,1916450228760858626,1916407199693844483,'2025-04-27 19:14:43','2025-04-27 19:14:43',0),(1916450946100088833,1916449283243102210,1916450491613696001,1916407199693844483,'2025-04-27 19:14:46','2025-04-27 19:14:46',0),(1916450958712360962,1916449283243102210,1916450832900018177,1916407199693844483,'2025-04-27 19:14:49','2025-04-27 19:14:49',0),(1916453219454799874,1916449283243102210,1916449833166688257,1916407199693844483,'2025-04-27 19:23:48','2025-04-27 19:23:48',0),(1916453241529421825,1916449283243102210,1916452443781189634,1916407199693844483,'2025-04-27 19:23:53','2025-04-27 19:23:53',0),(1916453254309466113,1916449283243102210,1916452612513845250,1916407199693844483,'2025-04-27 19:23:56','2025-04-27 19:23:56',0),(1916453267366334465,1916449283243102210,1916452792462069761,1916407199693844483,'2025-04-27 19:23:59','2025-04-27 19:23:59',0),(1916455222469840898,1916454085138173954,1916455222352400386,1916407199693844483,'2025-04-27 19:31:45','2025-04-27 19:31:45',0),(1916455461868130306,1916454085138173954,1916455406704644098,1916407199693844483,'2025-04-27 19:32:42','2025-04-27 19:32:42',0),(1916455492230696961,1916449283243102210,1916453798956617730,1916407199693844483,'2025-04-27 19:32:50','2025-04-27 19:32:50',0),(1916456279824519170,1916454085138173954,1916455685705551873,1916407199693844483,'2025-04-27 19:35:57','2025-04-27 19:35:57',0),(1916456292445179905,1916454085138173954,1916455842266337281,1916407199693844483,'2025-04-27 19:36:00','2025-04-27 19:36:00',0),(1916456304315060226,1916454085138173954,1916456069744414721,1916407199693844483,'2025-04-27 19:36:03','2025-04-27 19:36:03',0),(1916456734663233538,1916454314218475521,1916456730787696642,1916407199693844483,'2025-04-27 19:37:46','2025-04-27 19:37:46',0),(1916457434961006594,1916454314218475521,1916456878821462018,1916407199693844483,'2025-04-27 19:40:33','2025-04-27 19:40:33',0),(1916457460277825538,1916454314218475521,1916457018852495361,1916407199693844483,'2025-04-27 19:40:39','2025-04-27 19:40:39',0),(1916457473766707201,1916454314218475521,1916457201204056066,1916407199693844483,'2025-04-27 19:40:42','2025-04-27 19:40:42',0),(1916457486790021121,1916454314218475521,1916457374667886593,1916407199693844483,'2025-04-27 19:40:45','2025-04-27 19:40:45',0),(1916459725621415938,1916459456988827650,1916459725503975426,1916407199693844483,'2025-04-27 19:49:39','2025-04-27 19:49:39',0),(1916460562598973441,1916459456988827650,1916459890705027073,1916407199693844483,'2025-04-27 19:52:58','2025-04-27 19:52:58',0),(1916460584522600449,1916459456988827650,1916460490901540866,1916407199693844483,'2025-04-27 19:53:04','2025-04-27 19:53:04',0),(1916460595247435778,1916459456988827650,1916460227167899649,1916407199693844483,'2025-04-27 19:53:06','2025-04-27 19:53:06',0),(1916460608627265537,1916459456988827650,1916460086386085890,1916407199693844483,'2025-04-27 19:53:09','2025-04-27 19:53:09',0),(1916461373852864513,1916365992301211649,1916369336109412354,1916407199693844483,'2025-04-27 19:56:12','2025-04-27 19:56:12',0),(1916461395986206721,1916365992301211649,1916369781787766786,1916407199693844483,'2025-04-27 19:56:17','2025-04-27 19:56:17',0),(1916461411786149890,1916365992301211649,1916370093105786881,1916407199693844483,'2025-04-27 19:56:21','2025-04-27 19:56:21',0),(1916463279463583746,1916462821806297089,1916463279354531841,1916407199693844483,'2025-04-27 20:03:46','2025-04-27 20:03:46',0),(1916463836823670786,1916462821806297089,1916463507793104898,1916407199693844483,'2025-04-27 20:05:59','2025-04-27 20:05:59',0),(1916463858629857281,1916462821806297089,1916463770960515073,1916407199693844483,'2025-04-27 20:06:04','2025-04-27 20:06:04',0),(1916464337371910145,1916462821806297089,1916464134023663618,1916407199693844483,'2025-04-27 20:07:58','2025-04-27 20:07:58',0),(1916464355256422402,1916462821806297089,1916464313040752642,1916407199693844483,'2025-04-27 20:08:03','2025-04-27 20:08:03',0);
/*!40000 ALTER TABLE `question_bank_question` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `user`
--

DROP TABLE IF EXISTS `user`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `user` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'id',
  `userAccount` varchar(256) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT '账号',
  `userPassword` varchar(512) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT '密码',
  `unionId` varchar(256) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT '微信开放平台id',
  `mpOpenId` varchar(256) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT '公众号openId',
  `userName` varchar(256) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT '用户昵称',
  `userAvatar` varchar(1024) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT '用户头像',
  `userProfile` varchar(512) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT '用户简介',
  `userRole` varchar(256) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT 'user' COMMENT '用户角色：user/admin/ban',
  `editTime` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '编辑时间',
  `createTime` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `updateTime` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '更新时间',
  `isDelete` tinyint(4) NOT NULL DEFAULT '0' COMMENT '是否删除',
  `vipExpireTime` datetime DEFAULT NULL COMMENT '会员过期时间',
  `vipCode` varchar(128) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT '会员兑换码',
  `vipNumber` bigint(20) DEFAULT NULL COMMENT '会员编号',
  `shareCode` varchar(20) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT '分享码',
  `inviteUser` bigint(20) DEFAULT NULL COMMENT '邀请用户 id',
  PRIMARY KEY (`id`),
  KEY `idx_unionId` (`unionId`)
) ENGINE=InnoDB AUTO_INCREMENT=1916465250073432066 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci COMMENT='用户';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `user`
--

LOCK TABLES `user` WRITE;
/*!40000 ALTER TABLE `user` DISABLE KEYS */;
INSERT INTO `user` VALUES (1916407199693844482,'user1','9665755c5e91617ffd8b936710dc243f',NULL,NULL,'普通用户1','https://rich-tams.oss-cn-beijing.aliyuncs.com/RichInterview/680de8fce4b03512b901f06f.png','用于测试的普通用户，权限为普通用户权限。','user','2025-04-27 16:20:56','2025-04-27 16:20:56','2025-04-27 16:24:48',0,NULL,NULL,NULL,NULL,NULL),(1916407199693844483,'MOJIE','921e10c6021a6d62dd5bfd58b1a7c8ce',NULL,NULL,'管理员账号','https://rich-tams.oss-cn-beijing.aliyuncs.com/DKD_RichDu/2025/03/09/67cd64943c851694f2a087e7.png','系统管理员','admin','2025-04-23 00:01:42','2025-04-23 00:01:42','2025-04-27 20:12:48',0,NULL,NULL,NULL,NULL,NULL),(1916407258225356802,'user2','9665755c5e91617ffd8b936710dc243f',NULL,NULL,'普通用户2','https://rich-tams.oss-cn-beijing.aliyuncs.com/RichInterview/680de8fce4b03512b901f06f.png','用于测试的普通用户，权限为普通用户权限。','user','2025-04-27 16:21:10','2025-04-27 16:21:10','2025-04-27 16:24:47',0,NULL,NULL,NULL,NULL,NULL),(1916408111602642946,'user3','9665755c5e91617ffd8b936710dc243f',NULL,NULL,'普通用户3','https://rich-tams.oss-cn-beijing.aliyuncs.com/DKD_RichDu/2025/03/09/67cd64943c851694f2a087e7.png','当前用户很懒，什么都没留下','user','2025-04-27 16:24:33','2025-04-27 16:24:33','2025-04-27 16:24:33',0,NULL,NULL,NULL,NULL,NULL),(1916408111602642947,'user4','9665755c5e91617ffd8b936710dc243f',NULL,NULL,'普通用户4','https://rich-tams.oss-cn-beijing.aliyuncs.com/DKD_RichDu/2025/03/09/67cd64943c851694f2a087e7.png','当前用户很懒，什么都没留下','user','2025-04-27 19:44:24','2025-04-27 19:44:24','2025-04-27 19:45:19',0,NULL,NULL,NULL,NULL,NULL),(1916408111602642948,'user5','9665755c5e91617ffd8b936710dc243f',NULL,NULL,'普通用户5','https://rich-tams.oss-cn-beijing.aliyuncs.com/DKD_RichDu/2025/03/09/67cd64943c851694f2a087e7.png','当前用户很懒，什么都没留下','user','2025-04-27 19:44:24','2025-04-27 19:44:24','2025-04-27 19:45:19',0,NULL,NULL,NULL,NULL,NULL),(1916408111602642949,'user6','9665755c5e91617ffd8b936710dc243f',NULL,NULL,'普通用户6','https://rich-tams.oss-cn-beijing.aliyuncs.com/DKD_RichDu/2025/03/09/67cd64943c851694f2a087e7.png','当前用户很懒，什么都没留下','user','2025-04-27 19:44:24','2025-04-27 19:44:24','2025-04-27 19:45:19',0,NULL,NULL,NULL,NULL,NULL),(1916408111602642950,'user7','9665755c5e91617ffd8b936710dc243f',NULL,NULL,'普通用户7','https://rich-tams.oss-cn-beijing.aliyuncs.com/DKD_RichDu/2025/03/09/67cd64943c851694f2a087e7.png','当前用户很懒，什么都没留下','user','2025-04-27 19:44:24','2025-04-27 19:44:24','2025-04-27 19:45:19',0,NULL,NULL,NULL,NULL,NULL),(1916408111602642951,'user8','9665755c5e91617ffd8b936710dc243f',NULL,NULL,'普通用户8','https://rich-tams.oss-cn-beijing.aliyuncs.com/DKD_RichDu/2025/03/09/67cd64943c851694f2a087e7.png','当前用户很懒，什么都没留下','user','2025-04-27 19:44:24','2025-04-27 19:44:24','2025-04-27 19:45:19',0,NULL,NULL,NULL,NULL,NULL),(1916408111602642952,'user9','9665755c5e91617ffd8b936710dc243f',NULL,NULL,'普通用户9','https://rich-tams.oss-cn-beijing.aliyuncs.com/DKD_RichDu/2025/03/09/67cd64943c851694f2a087e7.png','当前用户很懒，什么都没留下','user','2025-04-27 19:44:24','2025-04-27 19:44:24','2025-04-27 19:45:19',0,NULL,NULL,NULL,NULL,NULL),(1916408111602642953,'user10','9665755c5e91617ffd8b936710dc243f',NULL,NULL,'普通用户10','https://rich-tams.oss-cn-beijing.aliyuncs.com/DKD_RichDu/2025/03/09/67cd64943c851694f2a087e7.png','当前用户很懒，什么都没留下','user','2025-04-27 19:44:24','2025-04-27 19:44:24','2025-04-27 19:45:19',0,NULL,NULL,NULL,NULL,NULL),(1916408111602642959,'user11','9665755c5e91617ffd8b936710dc243f',NULL,NULL,'普通用户11','https://rich-tams.oss-cn-beijing.aliyuncs.com/DKD_RichDu/2025/03/09/67cd64943c851694f2a087e7.png','当前用户很懒，什么都没留下','user','2025-04-27 19:44:24','2025-04-27 19:44:24','2025-04-27 19:45:19',0,NULL,NULL,NULL,NULL,NULL);
/*!40000 ALTER TABLE `user` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2025-04-27 20:22:16
